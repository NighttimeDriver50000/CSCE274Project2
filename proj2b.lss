
proj2b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001074  00001108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001074  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000172  00800104  00800104  0000110c  2**0
                  ALLOC
  3 .stab         00005460  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001fa7  00000000  00000000  0000656c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008513  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e7       	ldi	r30, 0x74	; 116
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 30       	cpi	r26, 0x04	; 4
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a4 e0       	ldi	r26, 0x04	; 4
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 37       	cpi	r26, 0x76	; 118
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 01 05 	call	0xa02	; 0xa02 <main>
      9e:	0c 94 38 08 	jmp	0x1070	; 0x1070 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <cannotRotateOrAdvance>:
//! Previous IR sensor value
uint8_t irPrevious = 0;

//! True iff the robot should not move at all
uint8_t cannotRotateOrAdvance(void) {
    return getSensorUint8(SenBumpDrop) & MASK_WHEEL_DROP;
      a6:	80 e0       	ldi	r24, 0x00	; 0
      a8:	0e 94 ab 04 	call	0x956	; 0x956 <getSensorUint8>
}
      ac:	8c 71       	andi	r24, 0x1C	; 28
      ae:	08 95       	ret

000000b0 <doWhileTurning>:

//! Called by overTurn periodically while turning.
//! Updates sensors and stops if unsafe to continue.
void doWhileTurning(void) {
    // Get most recent sensor values
    updateSensors();
      b0:	0e 94 2d 04 	call	0x85a	; 0x85a <updateSensors>
    if (cannotRotateOrAdvance()) {
      b4:	0e 94 53 00 	call	0xa6	; 0xa6 <cannotRotateOrAdvance>
      b8:	81 11       	cpse	r24, r1
        // Shouldn't be moving: just stop
        driveStop();
      ba:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <driveStop>
      be:	08 95       	ret

000000c0 <cannotAdvance>:
    return getSensorUint8(SenBumpDrop) & MASK_WHEEL_DROP;
}

//! True iff the robot should not drive forward
uint8_t cannotAdvance(void) {
    return getSensorUint8(SenBumpDrop) || !(getSensorUint16(SenCliffLSig1) &&
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	0e 94 ab 04 	call	0x956	; 0x956 <getSensorUint8>
      c6:	88 23       	and	r24, r24
      c8:	11 f0       	breq	.+4      	; 0xce <cannotAdvance+0xe>
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	08 95       	ret
      ce:	8c e1       	ldi	r24, 0x1C	; 28
      d0:	0e 94 b7 04 	call	0x96e	; 0x96e <getSensorUint16>
      d4:	89 2b       	or	r24, r25
      d6:	c9 f3       	breq	.-14     	; 0xca <cannotAdvance+0xa>
            getSensorUint16(SenCliffFLSig1) && getSensorUint16(SenCliffFRSig1)
      d8:	8e e1       	ldi	r24, 0x1E	; 30
      da:	0e 94 b7 04 	call	0x96e	; 0x96e <getSensorUint16>
    return getSensorUint8(SenBumpDrop) & MASK_WHEEL_DROP;
}

//! True iff the robot should not drive forward
uint8_t cannotAdvance(void) {
    return getSensorUint8(SenBumpDrop) || !(getSensorUint16(SenCliffLSig1) &&
      de:	89 2b       	or	r24, r25
      e0:	a1 f3       	breq	.-24     	; 0xca <cannotAdvance+0xa>
            getSensorUint16(SenCliffFLSig1) && getSensorUint16(SenCliffFRSig1)
      e2:	80 e2       	ldi	r24, 0x20	; 32
      e4:	0e 94 b7 04 	call	0x96e	; 0x96e <getSensorUint16>
      e8:	89 2b       	or	r24, r25
      ea:	79 f3       	breq	.-34     	; 0xca <cannotAdvance+0xa>
            && getSensorUint16(SenCliffRSig1));
      ec:	82 e2       	ldi	r24, 0x22	; 34
      ee:	0e 94 b7 04 	call	0x96e	; 0x96e <getSensorUint16>
    return getSensorUint8(SenBumpDrop) & MASK_WHEEL_DROP;
}

//! True iff the robot should not drive forward
uint8_t cannotAdvance(void) {
    return getSensorUint8(SenBumpDrop) || !(getSensorUint16(SenCliffLSig1) &&
      f2:	21 e0       	ldi	r18, 0x01	; 1
      f4:	89 2b       	or	r24, r25
      f6:	09 f0       	breq	.+2      	; 0xfa <cannotAdvance+0x3a>
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	82 2f       	mov	r24, r18
            getSensorUint16(SenCliffFLSig1) && getSensorUint16(SenCliffFRSig1)
            && getSensorUint16(SenCliffRSig1));
}
      fc:	08 95       	ret

000000fe <driveForwardIfAllowable>:

//! Begin or continue driving forward if it is allowed, otherwise stop
void driveForwardIfAllowable(void) {
    if (cannotAdvance()) {
      fe:	0e 94 60 00 	call	0xc0	; 0xc0 <cannotAdvance>
     102:	81 11       	cpse	r24, r1
        // Shouldn't be moving forward: just stop
        driveStop();
     104:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <driveStop>
    } else {
        // Forward being pressed and able to move forward: drive!
        drive(SPEED, RadStraight);
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e8       	ldi	r23, 0x80	; 128
     10c:	84 ef       	ldi	r24, 0xF4	; 244
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	0c 94 45 01 	jmp	0x28a	; 0x28a <drive>

00000114 <turnContinuous>:
    }
}

//! Begin or continue turning
void turnContinuous(int16_t radius) {
    drive(SPEED, radius);
     114:	bc 01       	movw	r22, r24
     116:	84 ef       	ldi	r24, 0xF4	; 244
     118:	91 e0       	ldi	r25, 0x01	; 1
     11a:	0c 94 45 01 	jmp	0x28a	; 0x28a <drive>

0000011e <overTurn>:
    // Keep going
}

//! Turn an extra 30 degrees. Does not return until fully turned.
//! Calls doWhileTurning periodically for sensor updating and safety.
void overTurn(int16_t radius) {
     11e:	ef 92       	push	r14
     120:	ff 92       	push	r15
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
    driveAngleTFunc(SPEED, radius, OVER_TURN_ANGLE,
     126:	2a e0       	ldi	r18, 0x0A	; 10
     128:	e2 2e       	mov	r14, r18
     12a:	f1 2c       	mov	r15, r1
     12c:	01 e0       	ldi	r16, 0x01	; 1
     12e:	10 e0       	ldi	r17, 0x00	; 0
     130:	28 e5       	ldi	r18, 0x58	; 88
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	4e e1       	ldi	r20, 0x1E	; 30
     136:	50 e0       	ldi	r21, 0x00	; 0
     138:	bc 01       	movw	r22, r24
     13a:	84 ef       	ldi	r24, 0xF4	; 244
     13c:	91 e0       	ldi	r25, 0x01	; 1
     13e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <driveAngleTFunc>
            &doWhileTurning, UPDATE_SENSOR_DELAY_PERIOD,
            UPDATE_SENSOR_DELAY_CUTOFF);
}
     142:	1f 91       	pop	r17
     144:	0f 91       	pop	r16
     146:	ff 90       	pop	r15
     148:	ef 90       	pop	r14
     14a:	08 95       	ret

0000014c <iroblifePeriodic>:

//! Called by irobPeriodic
void iroblifePeriodic(void) {
     14c:	cf 93       	push	r28
    // Get most recent sensor values
    updateSensors();
     14e:	0e 94 2d 04 	call	0x85a	; 0x85a <updateSensors>
    // Get IR sensor value
    uint8_t ir = getSensorUint8(SenIRChar);
     152:	8a e0       	ldi	r24, 0x0A	; 10
     154:	0e 94 ab 04 	call	0x956	; 0x956 <getSensorUint8>
     158:	c8 2f       	mov	r28, r24
    if (cannotRotateOrAdvance()) {
     15a:	0e 94 53 00 	call	0xa6	; 0xa6 <cannotRotateOrAdvance>
     15e:	81 11       	cpse	r24, r1
     160:	1f c0       	rjmp	.+62     	; 0x1a0 <iroblifePeriodic+0x54>
        // Shouldn't be moving: just stop
        driveStop();
    } else {
        switch (ir) {
     162:	c2 38       	cpi	r28, 0x82	; 130
     164:	39 f0       	breq	.+14     	; 0x174 <iroblifePeriodic+0x28>
     166:	c3 38       	cpi	r28, 0x83	; 131
     168:	41 f0       	breq	.+16     	; 0x17a <iroblifePeriodic+0x2e>
     16a:	c1 38       	cpi	r28, 0x81	; 129
     16c:	59 f4       	brne	.+22     	; 0x184 <iroblifePeriodic+0x38>
                // Drive forward if allowable
                driveForwardIfAllowable();
                break;
            case IR_LEFT:
                // Turn left 
                turnContinuous(RadCCW);
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	05 c0       	rjmp	.+10     	; 0x17e <iroblifePeriodic+0x32>
        driveStop();
    } else {
        switch (ir) {
            case IR_FORWARD:
                // Drive forward if allowable
                driveForwardIfAllowable();
     174:	0e 94 7f 00 	call	0xfe	; 0xfe <driveForwardIfAllowable>
                break;
     178:	15 c0       	rjmp	.+42     	; 0x1a4 <iroblifePeriodic+0x58>
                // Turn left 
                turnContinuous(RadCCW);
                break;
            case IR_RIGHT:
                // Turn right
                turnContinuous(RadCW);
     17a:	8f ef       	ldi	r24, 0xFF	; 255
     17c:	9f ef       	ldi	r25, 0xFF	; 255
     17e:	0e 94 8a 00 	call	0x114	; 0x114 <turnContinuous>
                break;
     182:	10 c0       	rjmp	.+32     	; 0x1a4 <iroblifePeriodic+0x58>
            default:
                // Movement button isn't being pressed
                switch (irPrevious) {
     184:	80 91 04 01 	lds	r24, 0x0104
     188:	81 38       	cpi	r24, 0x81	; 129
     18a:	29 f0       	breq	.+10     	; 0x196 <iroblifePeriodic+0x4a>
     18c:	83 38       	cpi	r24, 0x83	; 131
     18e:	41 f4       	brne	.+16     	; 0x1a0 <iroblifePeriodic+0x54>
                        // Turn an extra 30 degrees
                        overTurn(RadCCW);
                        break;
                    case IR_RIGHT:
                        // Turn an extra 30 degrees
                        overTurn(RadCW);
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	9f ef       	ldi	r25, 0xFF	; 255
     194:	02 c0       	rjmp	.+4      	; 0x19a <iroblifePeriodic+0x4e>
            default:
                // Movement button isn't being pressed
                switch (irPrevious) {
                    case IR_LEFT:
                        // Turn an extra 30 degrees
                        overTurn(RadCCW);
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
                        break;
                    case IR_RIGHT:
                        // Turn an extra 30 degrees
                        overTurn(RadCW);
     19a:	0e 94 8f 00 	call	0x11e	; 0x11e <overTurn>
                        break;
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <iroblifePeriodic+0x58>
                    default:
                        // No buttons pressed and no over-turning left: stop
                        driveStop();
     1a0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <driveStop>
                }
                break;
        }
    }
    // Bookkeeping
    irPrevious = ir;
     1a4:	c0 93 04 01 	sts	0x0104, r28
}
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <setSerialDestination>:
#include "oi.h"
#include "timer.h"

uint8_t serialDestination = SERIAL_SWITCHING;

void setSerialDestination(uint8_t dest) {
     1ac:	cf 93       	push	r28
     1ae:	c8 2f       	mov	r28, r24
    serialDestination = SERIAL_SWITCHING;
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	80 93 00 01 	sts	0x0100, r24
    // Which serial port should byteTx and byteRx talk to?
    // Ensure any pending bytes have been sent. Without this, the last byte
    // sent before calling this might seem to disappear.
    delayMs(10);
     1b6:	6a e0       	ldi	r22, 0x0A	; 10
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 22 03 	call	0x644	; 0x644 <delayMs>
    // Configure the port.
    if (dest == SERIAL_CREATE) {
     1c2:	c1 30       	cpi	r28, 0x01	; 1
     1c4:	11 f4       	brne	.+4      	; 0x1ca <setSerialDestination+0x1e>
        PORTB &= ~0x10 ;
     1c6:	2c 98       	cbi	0x05, 4	; 5
     1c8:	01 c0       	rjmp	.+2      	; 0x1cc <setSerialDestination+0x20>
    } else {
        PORTB |= 0x10 ;
     1ca:	2c 9a       	sbi	0x05, 4	; 5
    }
    // Wait a bit to let things get back to normal. According to the docs, this
    // should be at least 10 times the amount of time needed to send one byte.
    // This is less than 1 millisecond. We are using a much longer delay to be
    // super extra sure.
    delayMs(10);
     1cc:	6a e0       	ldi	r22, 0x0A	; 10
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 22 03 	call	0x644	; 0x644 <delayMs>
    serialDestination = dest;
     1d8:	c0 93 00 01 	sts	0x0100, r28
}
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret

000001e0 <getSerialDestination>:

uint8_t getSerialDestination(void) {
   return serialDestination; 
}
     1e0:	80 91 00 01 	lds	r24, 0x0100
     1e4:	08 95       	ret

000001e6 <irobprint>:

void irobprint(char* str) {
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	ec 01       	movw	r28, r24
    char c;
    // Null-terminated string
    while ((c = *(str++)) != '\0') {
     1ec:	89 91       	ld	r24, Y+
     1ee:	88 23       	and	r24, r24
     1f0:	19 f0       	breq	.+6      	; 0x1f8 <irobprint+0x12>
        // Print each byte
        byteTx(c);
     1f2:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
     1f6:	fa cf       	rjmp	.-12     	; 0x1ec <irobprint+0x6>
    }
}
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <irobprintf>:

char printfBuffer[PRINTF_BUFFER_SIZE];

void irobprintf(const char* format, ...) {
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	fe 01       	movw	r30, r28
     208:	35 96       	adiw	r30, 0x05	; 5
     20a:	41 91       	ld	r20, Z+
     20c:	51 91       	ld	r21, Z+
    char* fp = &printfBuffer[0];
    va_list ap;
    va_start(ap, format);
    // Format the string
    vsnprintf(fp, PRINTF_BUFFER_SIZE, format, ap);
     20e:	9f 01       	movw	r18, r30
     210:	6f ef       	ldi	r22, 0xFF	; 255
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	8c e0       	ldi	r24, 0x0C	; 12
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	0e 94 5d 05 	call	0xaba	; 0xaba <vsnprintf>
    va_end(ap);
    // Print the string
    irobprint(fp);
     21c:	8c e0       	ldi	r24, 0x0C	; 12
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <irobprint>
}
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	08 95       	ret

0000022a <irobnprintf>:

void irobnprintf(uint16_t size, const char* format, ...) {
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	69 85       	ldd	r22, Y+9	; 0x09
     23c:	7a 85       	ldd	r23, Y+10	; 0x0a
    // Format the string
    vsnprintf(fp, size, format, ap);
    va_end(ap);
    // Print the string
    irobprint(fp);
}
     23e:	ed b6       	in	r14, 0x3d	; 61
     240:	fe b6       	in	r15, 0x3e	; 62
    irobprint(fp);
}

void irobnprintf(uint16_t size, const char* format, ...) {
    // Create a buffer
    char formatted[size];
     242:	8d b7       	in	r24, 0x3d	; 61
     244:	9e b7       	in	r25, 0x3e	; 62
     246:	86 1b       	sub	r24, r22
     248:	97 0b       	sbc	r25, r23
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	9e bf       	out	0x3e, r25	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	8d bf       	out	0x3d, r24	; 61
     254:	0d b7       	in	r16, 0x3d	; 61
     256:	1e b7       	in	r17, 0x3e	; 62
     258:	0f 5f       	subi	r16, 0xFF	; 255
     25a:	1f 4f       	sbci	r17, 0xFF	; 255
    char* fp = &formatted[0];
    va_list ap;
    va_start(ap, format);
    // Format the string
    vsnprintf(fp, size, format, ap);
     25c:	9e 01       	movw	r18, r28
     25e:	23 5f       	subi	r18, 0xF3	; 243
     260:	3f 4f       	sbci	r19, 0xFF	; 255
     262:	4b 85       	ldd	r20, Y+11	; 0x0b
     264:	5c 85       	ldd	r21, Y+12	; 0x0c
     266:	c8 01       	movw	r24, r16
     268:	0e 94 5d 05 	call	0xaba	; 0xaba <vsnprintf>
    va_end(ap);
    // Print the string
    irobprint(fp);
     26c:	c8 01       	movw	r24, r16
     26e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <irobprint>
}
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	f8 94       	cli
     276:	fe be       	out	0x3e, r15	; 62
     278:	0f be       	out	0x3f, r0	; 63
     27a:	ed be       	out	0x3d, r14	; 61
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	1f 91       	pop	r17
     282:	0f 91       	pop	r16
     284:	ff 90       	pop	r15
     286:	ef 90       	pop	r14
     288:	08 95       	ret

0000028a <drive>:
#define PIe5            314159
#define TENTH_RADIUS    13

// # BASIC COMMANDS #

void drive(int16_t velocity, int16_t radius) {
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	00 d0       	rcall	.+0      	; 0x292 <drive+0x8>
     292:	1f 92       	push	r1
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	18 2f       	mov	r17, r24
    // Send the start driving command to the Create
    byteTx(CmdDrive);
     29a:	89 e8       	ldi	r24, 0x89	; 137
     29c:	6b 83       	std	Y+3, r22	; 0x03
     29e:	7a 83       	std	Y+2, r23	; 0x02
     2a0:	99 83       	std	Y+1, r25	; 0x01
     2a2:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    byteTx((uint8_t)((velocity >> 8) & 0x00FF));
     2a6:	99 81       	ldd	r25, Y+1	; 0x01
     2a8:	89 2f       	mov	r24, r25
     2aa:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    byteTx((uint8_t)(velocity & 0x00FF));
     2ae:	81 2f       	mov	r24, r17
     2b0:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    byteTx((uint8_t)((radius >> 8) & 0x00FF));
     2b4:	7a 81       	ldd	r23, Y+2	; 0x02
     2b6:	87 2f       	mov	r24, r23
     2b8:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    byteTx((uint8_t)(radius & 0x00FF));
     2bc:	6b 81       	ldd	r22, Y+3	; 0x03
     2be:	86 2f       	mov	r24, r22
}
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	1f 91       	pop	r17
    // Send the start driving command to the Create
    byteTx(CmdDrive);
    byteTx((uint8_t)((velocity >> 8) & 0x00FF));
    byteTx((uint8_t)(velocity & 0x00FF));
    byteTx((uint8_t)((radius >> 8) & 0x00FF));
    byteTx((uint8_t)(radius & 0x00FF));
     2cc:	0c 94 ba 03 	jmp	0x774	; 0x774 <byteTx>

000002d0 <driveStop>:
}

void driveStop(void) {
    drive(0, RadStraight);
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	70 e8       	ldi	r23, 0x80	; 128
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0c 94 45 01 	jmp	0x28a	; 0x28a <drive>

000002dc <driveDistanceOp>:
}


// # OPCODE-BASED COMMANDS #

void driveDistanceOp(int16_t velocity, int16_t distance) {
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	eb 01       	movw	r28, r22
    // Start driving
    drive(velocity, RadStraight);
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	70 e8       	ldi	r23, 0x80	; 128
     2e6:	0e 94 45 01 	call	0x28a	; 0x28a <drive>
    // Halt execution of new commands on the Create until reached distance
    byteTx(WaitForDistance);
     2ea:	8c e9       	ldi	r24, 0x9C	; 156
     2ec:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    byteTx((uint8_t)((distance >> 8) & 0x00FF));
     2f0:	8d 2f       	mov	r24, r29
     2f2:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    byteTx((uint8_t)(distance & 0x00FF));
     2f6:	8c 2f       	mov	r24, r28
     2f8:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    // Stop the Create
    driveStop();
}
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
    // Halt execution of new commands on the Create until reached distance
    byteTx(WaitForDistance);
    byteTx((uint8_t)((distance >> 8) & 0x00FF));
    byteTx((uint8_t)(distance & 0x00FF));
    // Stop the Create
    driveStop();
     300:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <driveStop>

00000304 <driveAngleOp>:
}

void driveAngleOp(int16_t velocity, int16_t radius, int16_t angle) {
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	ea 01       	movw	r28, r20
    // Wait for angle opcode compatibility
    if (radius == RadCW) {
     30a:	6f 3f       	cpi	r22, 0xFF	; 255
     30c:	2f ef       	ldi	r18, 0xFF	; 255
     30e:	72 07       	cpc	r23, r18
     310:	19 f4       	brne	.+6      	; 0x318 <driveAngleOp+0x14>
        angle = -angle;
     312:	d1 95       	neg	r29
     314:	c1 95       	neg	r28
     316:	d1 09       	sbc	r29, r1
    }
    // Start driving
    drive(velocity, radius);
     318:	0e 94 45 01 	call	0x28a	; 0x28a <drive>
    // Halt execution of new commands on the Create until reached angle
    byteTx(WaitForAngle);
     31c:	8d e9       	ldi	r24, 0x9D	; 157
     31e:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    byteTx((uint8_t)((angle >> 8) & 0x00FF));
     322:	8d 2f       	mov	r24, r29
     324:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    byteTx((uint8_t)(angle & 0x00FF));
     328:	8c 2f       	mov	r24, r28
     32a:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    // Stop the Create
    driveStop();
}
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
    // Halt execution of new commands on the Create until reached angle
    byteTx(WaitForAngle);
    byteTx((uint8_t)((angle >> 8) & 0x00FF));
    byteTx((uint8_t)(angle & 0x00FF));
    // Stop the Create
    driveStop();
     332:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <driveStop>

00000336 <driveDistanceTFunc>:


// # TIMER-BASED COMMANDS #

void driveDistanceTFunc(int16_t velocity, int16_t distance, void (*func)(void),
        uint16_t period_ms, uint16_t cutoff_ms) {
     336:	8f 92       	push	r8
     338:	9f 92       	push	r9
     33a:	af 92       	push	r10
     33c:	bf 92       	push	r11
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	ec 01       	movw	r28, r24
     350:	7a 01       	movw	r14, r20
     352:	69 01       	movw	r12, r18
    // Calculate the delay
    uint32_t time_ms = (1000 * (uint32_t)distance) / (uint32_t)velocity;
     354:	28 ee       	ldi	r18, 0xE8	; 232
     356:	33 e0       	ldi	r19, 0x03	; 3
     358:	db 01       	movw	r26, r22
     35a:	0e 94 12 05 	call	0xa24	; 0xa24 <__usmulhisi3>
     35e:	9e 01       	movw	r18, r28
     360:	44 27       	eor	r20, r20
     362:	37 fd       	sbrc	r19, 7
     364:	40 95       	com	r20
     366:	54 2f       	mov	r21, r20
     368:	0e 94 21 05 	call	0xa42	; 0xa42 <__udivmodsi4>
     36c:	49 01       	movw	r8, r18
     36e:	5a 01       	movw	r10, r20
    // Start driving
    drive(velocity, RadStraight);
     370:	60 e0       	ldi	r22, 0x00	; 0
     372:	70 e8       	ldi	r23, 0x80	; 128
     374:	ce 01       	movw	r24, r28
     376:	0e 94 45 01 	call	0x28a	; 0x28a <drive>
    // Wait delay
    delayMsFunc(time_ms, func, period_ms, cutoff_ms);
     37a:	96 01       	movw	r18, r12
     37c:	a7 01       	movw	r20, r14
     37e:	c5 01       	movw	r24, r10
     380:	b4 01       	movw	r22, r8
     382:	0e 94 32 03 	call	0x664	; 0x664 <delayMsFunc>
    // Stop the Create
    driveStop();
}
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	df 90       	pop	r13
     394:	cf 90       	pop	r12
     396:	bf 90       	pop	r11
     398:	af 90       	pop	r10
     39a:	9f 90       	pop	r9
     39c:	8f 90       	pop	r8
    // Start driving
    drive(velocity, RadStraight);
    // Wait delay
    delayMsFunc(time_ms, func, period_ms, cutoff_ms);
    // Stop the Create
    driveStop();
     39e:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <driveStop>

000003a2 <driveAngleTFunc>:
}

void driveAngleTFunc(int16_t velocity, int16_t radius, int16_t angle,
        void (*func)(void), uint16_t period_ms, uint16_t cutoff_ms) {
     3a2:	4f 92       	push	r4
     3a4:	5f 92       	push	r5
     3a6:	6f 92       	push	r6
     3a8:	7f 92       	push	r7
     3aa:	8f 92       	push	r8
     3ac:	9f 92       	push	r9
     3ae:	af 92       	push	r10
     3b0:	bf 92       	push	r11
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	ec 01       	movw	r28, r24
     3c4:	4b 01       	movw	r8, r22
     3c6:	69 01       	movw	r12, r18
     3c8:	58 01       	movw	r10, r16
     3ca:	87 01       	movw	r16, r14
    // Calculate the delay
    uint32_t time_ms = (PIe5 * TENTH_RADIUS * (uint32_t)angle)
     3cc:	da 01       	movw	r26, r20
     3ce:	23 e6       	ldi	r18, 0x63	; 99
     3d0:	31 e5       	ldi	r19, 0x51	; 81
     3d2:	4e e3       	ldi	r20, 0x3E	; 62
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	0e 94 19 05 	call	0xa32	; 0xa32 <__mulshisi3>
     3da:	2b 01       	movw	r4, r22
     3dc:	3c 01       	movw	r6, r24
        / (1800 * (uint32_t)velocity);
     3de:	28 e0       	ldi	r18, 0x08	; 8
     3e0:	37 e0       	ldi	r19, 0x07	; 7
     3e2:	de 01       	movw	r26, r28
     3e4:	0e 94 12 05 	call	0xa24	; 0xa24 <__usmulhisi3>
     3e8:	9b 01       	movw	r18, r22
     3ea:	ac 01       	movw	r20, r24
}

void driveAngleTFunc(int16_t velocity, int16_t radius, int16_t angle,
        void (*func)(void), uint16_t period_ms, uint16_t cutoff_ms) {
    // Calculate the delay
    uint32_t time_ms = (PIe5 * TENTH_RADIUS * (uint32_t)angle)
     3ec:	c3 01       	movw	r24, r6
     3ee:	b2 01       	movw	r22, r4
     3f0:	0e 94 21 05 	call	0xa42	; 0xa42 <__udivmodsi4>
     3f4:	29 01       	movw	r4, r18
     3f6:	3a 01       	movw	r6, r20
        / (1800 * (uint32_t)velocity);
    // Start driving
    drive(velocity, radius);
     3f8:	b4 01       	movw	r22, r8
     3fa:	ce 01       	movw	r24, r28
     3fc:	0e 94 45 01 	call	0x28a	; 0x28a <drive>
    // Wait delay
    delayMsFunc(time_ms, func, period_ms, cutoff_ms);
     400:	95 01       	movw	r18, r10
     402:	a6 01       	movw	r20, r12
     404:	c3 01       	movw	r24, r6
     406:	b2 01       	movw	r22, r4
     408:	0e 94 32 03 	call	0x664	; 0x664 <delayMsFunc>
    // Stop the Create
    driveStop();
}
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	df 90       	pop	r13
     41a:	cf 90       	pop	r12
     41c:	bf 90       	pop	r11
     41e:	af 90       	pop	r10
     420:	9f 90       	pop	r9
     422:	8f 90       	pop	r8
     424:	7f 90       	pop	r7
     426:	6f 90       	pop	r6
     428:	5f 90       	pop	r5
     42a:	4f 90       	pop	r4
    // Start driving
    drive(velocity, radius);
    // Wait delay
    delayMsFunc(time_ms, func, period_ms, cutoff_ms);
    // Stop the Create
    driveStop();
     42c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <driveStop>

00000430 <defineSongs>:
#include "timer.h"

// Define songs to be played later
void defineSongs(void) {
  // Reset song
  byteTx(CmdSong);
     430:	8c e8       	ldi	r24, 0x8C	; 140
     432:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(RESET_SONG);
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(4);
     43c:	84 e0       	ldi	r24, 0x04	; 4
     43e:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(60);
     442:	8c e3       	ldi	r24, 0x3C	; 60
     444:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(6);
     448:	86 e0       	ldi	r24, 0x06	; 6
     44a:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(72);
     44e:	88 e4       	ldi	r24, 0x48	; 72
     450:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(6);
     454:	86 e0       	ldi	r24, 0x06	; 6
     456:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(84);
     45a:	84 e5       	ldi	r24, 0x54	; 84
     45c:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(6);
     460:	86 e0       	ldi	r24, 0x06	; 6
     462:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(96);
     466:	80 e6       	ldi	r24, 0x60	; 96
     468:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(6);
     46c:	86 e0       	ldi	r24, 0x06	; 6
     46e:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>

  // Start song
  byteTx(CmdSong);
     472:	8c e8       	ldi	r24, 0x8C	; 140
     474:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(START_SONG);
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(6);
     47e:	86 e0       	ldi	r24, 0x06	; 6
     480:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(69);
     484:	85 e4       	ldi	r24, 0x45	; 69
     486:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(18);
     48a:	82 e1       	ldi	r24, 0x12	; 18
     48c:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(72);
     490:	88 e4       	ldi	r24, 0x48	; 72
     492:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(12);
     496:	8c e0       	ldi	r24, 0x0C	; 12
     498:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(74);
     49c:	8a e4       	ldi	r24, 0x4A	; 74
     49e:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(12);
     4a2:	8c e0       	ldi	r24, 0x0C	; 12
     4a4:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(72);
     4a8:	88 e4       	ldi	r24, 0x48	; 72
     4aa:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(12);
     4ae:	8c e0       	ldi	r24, 0x0C	; 12
     4b0:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(69);
     4b4:	85 e4       	ldi	r24, 0x45	; 69
     4b6:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(12);
     4ba:	8c e0       	ldi	r24, 0x0C	; 12
     4bc:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(77);
     4c0:	8d e4       	ldi	r24, 0x4D	; 77
     4c2:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
  byteTx(24);
     4c6:	88 e1       	ldi	r24, 0x18	; 24
     4c8:	0c 94 ba 03 	jmp	0x774	; 0x774 <byteTx>

000004cc <powerOnRobot>:
}

// Ensure that the robot is On.
void powerOnRobot(void) {
  // If Create's power is off, turn it on
  if(!RobotIsOn) {
     4cc:	1d 99       	sbic	0x03, 5	; 3
     4ce:	18 c0       	rjmp	.+48     	; 0x500 <__stack+0x1>
    while(!RobotIsOn) {
     4d0:	1d 99       	sbic	0x03, 5	; 3
     4d2:	10 c0       	rjmp	.+32     	; 0x4f4 <powerOnRobot+0x28>
      RobotPwrToggleLow;
     4d4:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
     4d6:	64 ef       	ldi	r22, 0xF4	; 244
     4d8:	71 e0       	ldi	r23, 0x01	; 1
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 22 03 	call	0x644	; 0x644 <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
     4e2:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
     4e4:	64 e6       	ldi	r22, 0x64	; 100
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 22 03 	call	0x644	; 0x644 <delayMs>
      RobotPwrToggleLow;
     4f0:	5f 98       	cbi	0x0b, 7	; 11
     4f2:	ee cf       	rjmp	.-36     	; 0x4d0 <powerOnRobot+0x4>
    }
    delayMs(3500);  // Delay for startup
     4f4:	6c ea       	ldi	r22, 0xAC	; 172
     4f6:	7d e0       	ldi	r23, 0x0D	; 13
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 22 03 	call	0x644	; 0x644 <delayMs>
  }

  // Flush the buffer
  while( (UCSR0A & 0x80) && UDR0);
     500:	80 91 c0 00 	lds	r24, 0x00C0
     504:	87 ff       	sbrs	r24, 7
     506:	04 c0       	rjmp	.+8      	; 0x510 <__stack+0x11>
     508:	80 91 c6 00 	lds	r24, 0x00C6
     50c:	81 11       	cpse	r24, r1
     50e:	f8 cf       	rjmp	.-16     	; 0x500 <__stack+0x1>
     510:	08 95       	ret

00000512 <powerOffRobot>:
}

// Ensure that the robot is OFF.
void powerOffRobot(void) {
  // If Create's power is on, turn it off
  if(RobotIsOn) {
     512:	1d 9b       	sbis	0x03, 5	; 3
     514:	08 95       	ret
    while(RobotIsOn) {
     516:	1d 9b       	sbis	0x03, 5	; 3
     518:	10 c0       	rjmp	.+32     	; 0x53a <powerOffRobot+0x28>
      RobotPwrToggleLow;
     51a:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
     51c:	64 ef       	ldi	r22, 0xF4	; 244
     51e:	71 e0       	ldi	r23, 0x01	; 1
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 22 03 	call	0x644	; 0x644 <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
     528:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
     52a:	64 e6       	ldi	r22, 0x64	; 100
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 22 03 	call	0x644	; 0x644 <delayMs>
      RobotPwrToggleLow;
     536:	5f 98       	cbi	0x0b, 7	; 11
     538:	ee cf       	rjmp	.-36     	; 0x516 <powerOffRobot+0x4>
     53a:	08 95       	ret

0000053c <irobledUpdate>:
    irobledUpdate();
}

void irobledUpdate(void) {
    // Send the led command using the current state
    byteTx(CmdLeds);
     53c:	8b e8       	ldi	r24, 0x8B	; 139
     53e:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    byteTx(iroblibState.bits);
     542:	80 91 0b 02 	lds	r24, 0x020B
     546:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    byteTx(iroblibState.color);
     54a:	80 91 0c 02 	lds	r24, 0x020C
     54e:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    byteTx(iroblibState.intensity); 
     552:	80 91 0d 02 	lds	r24, 0x020D
     556:	0c 94 ba 03 	jmp	0x774	; 0x774 <byteTx>

0000055a <irobledCmd>:
    uint8_t intensity;
} iroblibState;

void irobledCmd(uint8_t bits, uint8_t color, uint8_t intensity) {
    // Modify the state
    iroblibState.bits = bits;
     55a:	80 93 0b 02 	sts	0x020B, r24
    iroblibState.color = color;
     55e:	60 93 0c 02 	sts	0x020C, r22
    iroblibState.intensity = intensity;
     562:	40 93 0d 02 	sts	0x020D, r20
    // Update
    irobledUpdate();
     566:	0c 94 9e 02 	jmp	0x53c	; 0x53c <irobledUpdate>

0000056a <irobledInit>:
    uint8_t intensity;
} iroblibState;

void irobledCmd(uint8_t bits, uint8_t color, uint8_t intensity) {
    // Modify the state
    iroblibState.bits = bits;
     56a:	10 92 0b 02 	sts	0x020B, r1
    iroblibState.color = color;
     56e:	80 e4       	ldi	r24, 0x40	; 64
     570:	80 93 0c 02 	sts	0x020C, r24
    iroblibState.intensity = intensity;
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	80 93 0d 02 	sts	0x020D, r24
    // Update
    irobledUpdate();
     57a:	0c 94 9e 02 	jmp	0x53c	; 0x53c <irobledUpdate>

0000057e <powerLedSet>:
} iroblibState;

void irobledCmd(uint8_t bits, uint8_t color, uint8_t intensity) {
    // Modify the state
    iroblibState.bits = bits;
    iroblibState.color = color;
     57e:	80 93 0c 02 	sts	0x020C, r24
    iroblibState.intensity = intensity;
     582:	60 93 0d 02 	sts	0x020D, r22
    // Update
    irobledUpdate();
     586:	0c 94 9e 02 	jmp	0x53c	; 0x53c <irobledUpdate>

0000058a <robotLedSetBits>:
void powerLedSet(uint8_t color, uint8_t intensity) {
    irobledCmd(iroblibState.bits, color, intensity);
}

void robotLedSetBits(uint8_t bits) {
    iroblibState.bits = bits;
     58a:	80 93 0b 02 	sts	0x020B, r24
    irobledUpdate();
     58e:	0c 94 9e 02 	jmp	0x53c	; 0x53c <irobledUpdate>

00000592 <robotLedOn>:
}

void robotLedOn(uint8_t led) {
    iroblibState.bits |= led;
     592:	eb e0       	ldi	r30, 0x0B	; 11
     594:	f2 e0       	ldi	r31, 0x02	; 2
     596:	90 81       	ld	r25, Z
     598:	98 2b       	or	r25, r24
     59a:	90 83       	st	Z, r25
    irobledUpdate();
     59c:	0c 94 9e 02 	jmp	0x53c	; 0x53c <irobledUpdate>

000005a0 <robotLedOff>:
}

void robotLedOff(uint8_t led) {
    iroblibState.bits &= ~led;
     5a0:	eb e0       	ldi	r30, 0x0B	; 11
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	80 95       	com	r24
     5a6:	90 81       	ld	r25, Z
     5a8:	89 23       	and	r24, r25
     5aa:	80 83       	st	Z, r24
    irobledUpdate();
     5ac:	0c 94 9e 02 	jmp	0x53c	; 0x53c <irobledUpdate>

000005b0 <robotLedToggle>:
}

void robotLedToggle(uint8_t led) {
    iroblibState.bits ^= led;
     5b0:	eb e0       	ldi	r30, 0x0B	; 11
     5b2:	f2 e0       	ldi	r31, 0x02	; 2
     5b4:	90 81       	ld	r25, Z
     5b6:	98 27       	eor	r25, r24
     5b8:	90 83       	st	Z, r25
    irobledUpdate();
     5ba:	0c 94 9e 02 	jmp	0x53c	; 0x53c <irobledUpdate>

000005be <__vector_11>:
    // You DO NOT need it for this assignment. If i feel it 
    // becomes relevant, I will show you how/when to use it.
}*/

//SIGNAL(SIG_OUTPUT_COMPARE1A)
ISR(TIMER1_COMPA_vect) {
     5be:	1f 92       	push	r1
     5c0:	0f 92       	push	r0
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	0f 92       	push	r0
     5c6:	11 24       	eor	r1, r1
     5c8:	8f 93       	push	r24
     5ca:	9f 93       	push	r25
     5cc:	af 93       	push	r26
     5ce:	bf 93       	push	r27
    // Interrupt handler called every 1ms.
    // Decrement the counter variable, to allow delayMs to keep time.
    if(delayTimerCount != 0) {
     5d0:	80 91 06 01 	lds	r24, 0x0106
     5d4:	90 91 07 01 	lds	r25, 0x0107
     5d8:	a0 91 08 01 	lds	r26, 0x0108
     5dc:	b0 91 09 01 	lds	r27, 0x0109
     5e0:	89 2b       	or	r24, r25
     5e2:	8a 2b       	or	r24, r26
     5e4:	8b 2b       	or	r24, r27
     5e6:	a1 f0       	breq	.+40     	; 0x610 <__vector_11+0x52>
        delayTimerCount--;
     5e8:	80 91 06 01 	lds	r24, 0x0106
     5ec:	90 91 07 01 	lds	r25, 0x0107
     5f0:	a0 91 08 01 	lds	r26, 0x0108
     5f4:	b0 91 09 01 	lds	r27, 0x0109
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	a1 09       	sbc	r26, r1
     5fc:	b1 09       	sbc	r27, r1
     5fe:	80 93 06 01 	sts	0x0106, r24
     602:	90 93 07 01 	sts	0x0107, r25
     606:	a0 93 08 01 	sts	0x0108, r26
     60a:	b0 93 09 01 	sts	0x0109, r27
     60e:	02 c0       	rjmp	.+4      	; 0x614 <__vector_11+0x56>
    } else {
        delayTimerRunning = 0;
     610:	10 92 05 01 	sts	0x0105, r1
    }
}
     614:	bf 91       	pop	r27
     616:	af 91       	pop	r26
     618:	9f 91       	pop	r25
     61a:	8f 91       	pop	r24
     61c:	0f 90       	pop	r0
     61e:	0f be       	out	0x3f, r0	; 63
     620:	0f 90       	pop	r0
     622:	1f 90       	pop	r1
     624:	18 95       	reti

00000626 <setupTimer>:
    // It's probably best to treat this as a black box.
    // Basic idea: Except for the 71, these are special codes, for which details
    // appear in the ATMega168 data sheet. The 71 is a computed value, based on
    // the processor speed and the amount of "scaling" of the timer, that gives
    // us the 1ms time interval.
    TCCR1A = 0x00;
     626:	10 92 80 00 	sts	0x0080, r1
    // TCCR1B = 0x0C;
    TCCR1B = (_BV(WGM12) | _BV(CS12));
     62a:	8c e0       	ldi	r24, 0x0C	; 12
     62c:	80 93 81 00 	sts	0x0081, r24
    OCR1A = 71;
     630:	87 e4       	ldi	r24, 0x47	; 71
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	90 93 89 00 	sts	0x0089, r25
     638:	80 93 88 00 	sts	0x0088, r24
    // TIMSK1 = 0x02;
    TIMSK1 = _BV(OCIE1A);
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	80 93 6f 00 	sts	0x006F, r24
     642:	08 95       	ret

00000644 <delayMs>:
}

// Delay for the specified time in ms without updating sensor values
void delayMs(uint32_t time_ms) {
    delayTimerRunning = 1;
     644:	21 e0       	ldi	r18, 0x01	; 1
     646:	20 93 05 01 	sts	0x0105, r18
    delayTimerCount = time_ms;
     64a:	60 93 06 01 	sts	0x0106, r22
     64e:	70 93 07 01 	sts	0x0107, r23
     652:	80 93 08 01 	sts	0x0108, r24
     656:	90 93 09 01 	sts	0x0109, r25
    while(delayTimerRunning) ;
     65a:	80 91 05 01 	lds	r24, 0x0105
     65e:	81 11       	cpse	r24, r1
     660:	fc cf       	rjmp	.-8      	; 0x65a <delayMs+0x16>
}
     662:	08 95       	ret

00000664 <delayMsFunc>:

void delayMsFunc(uint32_t time_ms, void (*func)(void), uint16_t period_ms,
        uint16_t cutoff_ms) {
     664:	4f 92       	push	r4
     666:	5f 92       	push	r5
     668:	6f 92       	push	r6
     66a:	7f 92       	push	r7
     66c:	8f 92       	push	r8
     66e:	9f 92       	push	r9
     670:	af 92       	push	r10
     672:	bf 92       	push	r11
     674:	cf 92       	push	r12
     676:	df 92       	push	r13
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	ea 01       	movw	r28, r20
    // Initialize the conditions for the delay loop
    uint32_t lastExec = time_ms;
    uint32_t nextExec = lastExec - period_ms;
     686:	49 01       	movw	r8, r18
     688:	a1 2c       	mov	r10, r1
     68a:	b1 2c       	mov	r11, r1
     68c:	6b 01       	movw	r12, r22
     68e:	7c 01       	movw	r14, r24
     690:	c8 18       	sub	r12, r8
     692:	d9 08       	sbc	r13, r9
     694:	ea 08       	sbc	r14, r10
     696:	fb 08       	sbc	r15, r11
    // Start the timer
    delayTimerRunning = 1;
     698:	21 e0       	ldi	r18, 0x01	; 1
     69a:	20 93 05 01 	sts	0x0105, r18
    delayTimerCount = time_ms;
     69e:	60 93 06 01 	sts	0x0106, r22
     6a2:	70 93 07 01 	sts	0x0107, r23
     6a6:	80 93 08 01 	sts	0x0108, r24
     6aa:	90 93 09 01 	sts	0x0109, r25
    // Wait until the timer runs out (delayTimerCount decrements every ms)
    while(delayTimerRunning) {
        // If it's before the cutoff and time for the next execution
        if (delayTimerCount > cutoff_ms && delayTimerCount <= nextExec) {
     6ae:	28 01       	movw	r4, r16
     6b0:	61 2c       	mov	r6, r1
     6b2:	71 2c       	mov	r7, r1
    uint32_t nextExec = lastExec - period_ms;
    // Start the timer
    delayTimerRunning = 1;
    delayTimerCount = time_ms;
    // Wait until the timer runs out (delayTimerCount decrements every ms)
    while(delayTimerRunning) {
     6b4:	80 91 05 01 	lds	r24, 0x0105
     6b8:	88 23       	and	r24, r24
     6ba:	49 f1       	breq	.+82     	; 0x70e <delayMsFunc+0xaa>
        // If it's before the cutoff and time for the next execution
        if (delayTimerCount > cutoff_ms && delayTimerCount <= nextExec) {
     6bc:	80 91 06 01 	lds	r24, 0x0106
     6c0:	90 91 07 01 	lds	r25, 0x0107
     6c4:	a0 91 08 01 	lds	r26, 0x0108
     6c8:	b0 91 09 01 	lds	r27, 0x0109
     6cc:	48 16       	cp	r4, r24
     6ce:	59 06       	cpc	r5, r25
     6d0:	6a 06       	cpc	r6, r26
     6d2:	7b 06       	cpc	r7, r27
     6d4:	78 f7       	brcc	.-34     	; 0x6b4 <delayMsFunc+0x50>
     6d6:	80 91 06 01 	lds	r24, 0x0106
     6da:	90 91 07 01 	lds	r25, 0x0107
     6de:	a0 91 08 01 	lds	r26, 0x0108
     6e2:	b0 91 09 01 	lds	r27, 0x0109
     6e6:	c8 16       	cp	r12, r24
     6e8:	d9 06       	cpc	r13, r25
     6ea:	ea 06       	cpc	r14, r26
     6ec:	fb 06       	cpc	r15, r27
     6ee:	10 f3       	brcs	.-60     	; 0x6b4 <delayMsFunc+0x50>
            // Execute the function
            lastExec = delayTimerCount;
     6f0:	c0 90 06 01 	lds	r12, 0x0106
     6f4:	d0 90 07 01 	lds	r13, 0x0107
     6f8:	e0 90 08 01 	lds	r14, 0x0108
     6fc:	f0 90 09 01 	lds	r15, 0x0109
            nextExec = lastExec - period_ms;
     700:	c8 18       	sub	r12, r8
     702:	d9 08       	sbc	r13, r9
     704:	ea 08       	sbc	r14, r10
     706:	fb 08       	sbc	r15, r11
            func();
     708:	fe 01       	movw	r30, r28
     70a:	09 95       	icall
     70c:	d3 cf       	rjmp	.-90     	; 0x6b4 <delayMsFunc+0x50>
        }
    }
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	df 90       	pop	r13
     71c:	cf 90       	pop	r12
     71e:	bf 90       	pop	r11
     720:	af 90       	pop	r10
     722:	9f 90       	pop	r9
     724:	8f 90       	pop	r8
     726:	7f 90       	pop	r7
     728:	6f 90       	pop	r6
     72a:	5f 90       	pop	r5
     72c:	4f 90       	pop	r4
     72e:	08 95       	ret

00000730 <setupIOPins>:
  sei();
}

void setupIOPins(void) {
  // Set I/O pins
  DDRB  = 0x10;
     730:	80 e1       	ldi	r24, 0x10	; 16
     732:	84 b9       	out	0x04, r24	; 4
  PORTB = 0xCF;
     734:	8f ec       	ldi	r24, 0xCF	; 207
     736:	85 b9       	out	0x05, r24	; 5
  DDRC  = 0x00;
     738:	17 b8       	out	0x07, r1	; 7
  PORTC = 0xFF;
     73a:	8f ef       	ldi	r24, 0xFF	; 255
     73c:	88 b9       	out	0x08, r24	; 8
  DDRD  = 0xE6;
     73e:	86 ee       	ldi	r24, 0xE6	; 230
     740:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x7D;
     742:	8d e7       	ldi	r24, 0x7D	; 125
     744:	8b b9       	out	0x0b, r24	; 11
     746:	08 95       	ret

00000748 <setupSerialPort>:
}

void setupSerialPort(void) {
  // Set the transmission speed to 57600 baud, which is what the Create expects,
  // unless we tell it otherwise.
  UBRR0 = 19;
     748:	83 e1       	ldi	r24, 0x13	; 19
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	90 93 c5 00 	sts	0x00C5, r25
     750:	80 93 c4 00 	sts	0x00C4, r24
  
  // Enable both transmit and receive.
  UCSR0B = (_BV(RXCIE0) | _BV(TXEN0) | _BV(RXEN0));
     754:	88 e9       	ldi	r24, 0x98	; 152
     756:	80 93 c1 00 	sts	0x00C1, r24
    // UCSR0B = 0x18;
  
  // Set 8-bit data.
  UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));
     75a:	86 e0       	ldi	r24, 0x06	; 6
     75c:	80 93 c2 00 	sts	0x00C2, r24
     760:	08 95       	ret

00000762 <initializeCommandModule>:
#include "oi.h"
#include "timer.h"

void initializeCommandModule(void){
  // Disable interrupts. ("Clear interrupt bit")
  cli();
     762:	f8 94       	cli

  // One-time setup operations.
  setupIOPins();
     764:	0e 94 98 03 	call	0x730	; 0x730 <setupIOPins>
  setupTimer();
     768:	0e 94 13 03 	call	0x626	; 0x626 <setupTimer>
  setupSerialPort();
     76c:	0e 94 a4 03 	call	0x748	; 0x748 <setupSerialPort>

  // Enable interrupts. ("Set interrupt bit")
  sei();
     770:	78 94       	sei
     772:	08 95       	ret

00000774 <byteTx>:
}

void byteTx(uint8_t value) {
  // Transmit one byte to the robot.
  // Wait for the buffer to be empty.
  while(!(UCSR0A & 0x20)) ;
     774:	90 91 c0 00 	lds	r25, 0x00C0
     778:	95 ff       	sbrs	r25, 5
     77a:	fc cf       	rjmp	.-8      	; 0x774 <byteTx>

  // Send the byte.
  UDR0 = value;
     77c:	80 93 c6 00 	sts	0x00C6, r24
     780:	08 95       	ret

00000782 <byteRx>:

uint8_t byteRx(void) {
  // Receive one byte from the robot.
  // Call setupSerialPort() first.
  // Wait for a byte to arrive in the recieve buffer.
  while(!(UCSR0A & 0x80)) ;
     782:	80 91 c0 00 	lds	r24, 0x00C0
     786:	87 ff       	sbrs	r24, 7
     788:	fc cf       	rjmp	.-8      	; 0x782 <byteRx>
  
  // Return that byte.
  return UDR0;
     78a:	80 91 c6 00 	lds	r24, 0x00C6
}
     78e:	08 95       	ret

00000790 <baud>:

void baud(uint8_t baud_code) {
     790:	cf 93       	push	r28
     792:	c8 2f       	mov	r28, r24
  // Switch the baud rate on both Create and module
  if(baud_code <= 11)
     794:	8c 30       	cpi	r24, 0x0C	; 12
     796:	08 f0       	brcs	.+2      	; 0x79a <baud+0xa>
     798:	55 c0       	rjmp	.+170    	; 0x844 <baud+0xb4>
  {
    byteTx(CmdBaud);
     79a:	81 e8       	ldi	r24, 0x81	; 129
     79c:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    UCSR0A |= _BV(TXC0);
     7a0:	80 91 c0 00 	lds	r24, 0x00C0
     7a4:	80 64       	ori	r24, 0x40	; 64
     7a6:	80 93 c0 00 	sts	0x00C0, r24
    byteTx(baud_code);
     7aa:	8c 2f       	mov	r24, r28
     7ac:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    // Wait until transmit is complete
    while(!(UCSR0A & _BV(TXC0))) ;
     7b0:	80 91 c0 00 	lds	r24, 0x00C0
     7b4:	86 ff       	sbrs	r24, 6
     7b6:	fc cf       	rjmp	.-8      	; 0x7b0 <baud+0x20>

    cli();
     7b8:	f8 94       	cli

    // Switch the baud rate register
    if(baud_code == Baud115200) {
     7ba:	cb 30       	cpi	r28, 0x0B	; 11
     7bc:	19 f4       	brne	.+6      	; 0x7c4 <baud+0x34>
      UBRR0 = Ubrr115200;
     7be:	89 e0       	ldi	r24, 0x09	; 9
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	34 c0       	rjmp	.+104    	; 0x82c <baud+0x9c>
    } else if(baud_code == Baud57600) {
     7c4:	ca 30       	cpi	r28, 0x0A	; 10
     7c6:	19 f4       	brne	.+6      	; 0x7ce <baud+0x3e>
      UBRR0 = Ubrr57600;
     7c8:	83 e1       	ldi	r24, 0x13	; 19
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	2f c0       	rjmp	.+94     	; 0x82c <baud+0x9c>
    } else if(baud_code == Baud38400) {
     7ce:	c9 30       	cpi	r28, 0x09	; 9
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <baud+0x48>
      UBRR0 = Ubrr38400;
     7d2:	8d e1       	ldi	r24, 0x1D	; 29
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	2a c0       	rjmp	.+84     	; 0x82c <baud+0x9c>
    } else if(baud_code == Baud28800) {
     7d8:	c8 30       	cpi	r28, 0x08	; 8
     7da:	19 f4       	brne	.+6      	; 0x7e2 <baud+0x52>
      UBRR0 = Ubrr28800;
     7dc:	87 e2       	ldi	r24, 0x27	; 39
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	25 c0       	rjmp	.+74     	; 0x82c <baud+0x9c>
    } else if(baud_code == Baud19200) {
     7e2:	c7 30       	cpi	r28, 0x07	; 7
     7e4:	19 f4       	brne	.+6      	; 0x7ec <baud+0x5c>
      UBRR0 = Ubrr19200;
     7e6:	8b e3       	ldi	r24, 0x3B	; 59
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	20 c0       	rjmp	.+64     	; 0x82c <baud+0x9c>
    } else if(baud_code == Baud14400) {
     7ec:	c6 30       	cpi	r28, 0x06	; 6
     7ee:	19 f4       	brne	.+6      	; 0x7f6 <baud+0x66>
      UBRR0 = Ubrr14400;
     7f0:	8f e4       	ldi	r24, 0x4F	; 79
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	1b c0       	rjmp	.+54     	; 0x82c <baud+0x9c>
    } else if(baud_code == Baud9600) {
     7f6:	c5 30       	cpi	r28, 0x05	; 5
     7f8:	19 f4       	brne	.+6      	; 0x800 <baud+0x70>
      UBRR0 = Ubrr9600;
     7fa:	87 e7       	ldi	r24, 0x77	; 119
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	16 c0       	rjmp	.+44     	; 0x82c <baud+0x9c>
    } else if(baud_code == Baud4800) {
     800:	c4 30       	cpi	r28, 0x04	; 4
     802:	19 f4       	brne	.+6      	; 0x80a <baud+0x7a>
      UBRR0 = Ubrr4800;
     804:	8f ee       	ldi	r24, 0xEF	; 239
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	11 c0       	rjmp	.+34     	; 0x82c <baud+0x9c>
    } else if(baud_code == Baud2400) {
     80a:	c3 30       	cpi	r28, 0x03	; 3
     80c:	19 f4       	brne	.+6      	; 0x814 <baud+0x84>
      UBRR0 = Ubrr2400;
     80e:	8f ed       	ldi	r24, 0xDF	; 223
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0c c0       	rjmp	.+24     	; 0x82c <baud+0x9c>
    } else if(baud_code == Baud1200) {
     814:	c2 30       	cpi	r28, 0x02	; 2
     816:	19 f4       	brne	.+6      	; 0x81e <baud+0x8e>
      UBRR0 = Ubrr1200;
     818:	8f eb       	ldi	r24, 0xBF	; 191
     81a:	93 e0       	ldi	r25, 0x03	; 3
     81c:	07 c0       	rjmp	.+14     	; 0x82c <baud+0x9c>
    } else if(baud_code == Baud600) {
     81e:	c1 30       	cpi	r28, 0x01	; 1
     820:	19 f4       	brne	.+6      	; 0x828 <baud+0x98>
      UBRR0 = Ubrr600;
     822:	8f e7       	ldi	r24, 0x7F	; 127
     824:	97 e0       	ldi	r25, 0x07	; 7
     826:	02 c0       	rjmp	.+4      	; 0x82c <baud+0x9c>
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
     828:	8f ef       	ldi	r24, 0xFF	; 255
     82a:	9e e0       	ldi	r25, 0x0E	; 14
     82c:	90 93 c5 00 	sts	0x00C5, r25
     830:	80 93 c4 00 	sts	0x00C4, r24
    }
    sei();
     834:	78 94       	sei

    delayMs(100);
     836:	64 e6       	ldi	r22, 0x64	; 100
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     83e:	cf 91       	pop	r28
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
    }
    sei();

    delayMs(100);
     840:	0c 94 22 03 	jmp	0x644	; 0x644 <delayMs>
  }
}
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <requestPacket>:
volatile uint8_t usartActive = 0;
volatile uint8_t sensorIndex = 0;
volatile uint8_t sensorBuffer[Sen6Size];
volatile uint8_t sensors[Sen6Size];

void requestPacket(uint8_t packetId) {
     848:	cf 93       	push	r28
     84a:	c8 2f       	mov	r28, r24
    byteTx(CmdSensors);
     84c:	8e e8       	ldi	r24, 0x8E	; 142
     84e:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    byteTx(packetId);
     852:	8c 2f       	mov	r24, r28
}
     854:	cf 91       	pop	r28
volatile uint8_t sensorBuffer[Sen6Size];
volatile uint8_t sensors[Sen6Size];

void requestPacket(uint8_t packetId) {
    byteTx(CmdSensors);
    byteTx(packetId);
     856:	0c 94 ba 03 	jmp	0x774	; 0x774 <byteTx>

0000085a <updateSensors>:
    }
}

void updateSensors(void) {
    // Don't do anything if sensors are still coming in
    if (!usartActive) {
     85a:	80 91 0b 01 	lds	r24, 0x010B
     85e:	81 11       	cpse	r24, r1
     860:	16 c0       	rjmp	.+44     	; 0x88e <updateSensors+0x34>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
        uint8_t i;
        for (i = 0; i < Sen6Size; i++) {
            // Copy in the sensor buffer so the most recent data is available
            sensors[i] = sensorBuffer[i];
     866:	fc 01       	movw	r30, r24
     868:	e2 5f       	subi	r30, 0xF2	; 242
     86a:	fd 4f       	sbci	r31, 0xFD	; 253
     86c:	20 81       	ld	r18, Z
     86e:	fc 01       	movw	r30, r24
     870:	ee 5b       	subi	r30, 0xBE	; 190
     872:	fd 4f       	sbci	r31, 0xFD	; 253
     874:	20 83       	st	Z, r18
     876:	01 96       	adiw	r24, 0x01	; 1

void updateSensors(void) {
    // Don't do anything if sensors are still coming in
    if (!usartActive) {
        uint8_t i;
        for (i = 0; i < Sen6Size; i++) {
     878:	84 33       	cpi	r24, 0x34	; 52
     87a:	91 05       	cpc	r25, r1
     87c:	a1 f7       	brne	.-24     	; 0x866 <updateSensors+0xc>
            // Copy in the sensor buffer so the most recent data is available
            sensors[i] = sensorBuffer[i];
        }
        // Bookkeeping
        sensorIndex = 0;
     87e:	10 92 0a 01 	sts	0x010A, r1
        usartActive = 1;
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	80 93 0b 01 	sts	0x010B, r24
        // Request all sensor data
        requestPacket(PACKET_ALL);
     888:	86 e0       	ldi	r24, 0x06	; 6
     88a:	0c 94 24 04 	jmp	0x848	; 0x848 <requestPacket>
     88e:	08 95       	ret

00000890 <read1ByteSensorPacket>:
    byteTx(packetId);
}

uint8_t read1ByteSensorPacket(uint8_t packetId) {
    // Send the packet ID
    requestPacket(packetId);
     890:	0e 94 24 04 	call	0x848	; 0x848 <requestPacket>
    // Read the packet byte
    return byteRx();
     894:	0c 94 c1 03 	jmp	0x782	; 0x782 <byteRx>

00000898 <__vector_18>:
}

ISR(USART_RX_vect) {
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	2f 93       	push	r18
     8a4:	3f 93       	push	r19
     8a6:	4f 93       	push	r20
     8a8:	5f 93       	push	r21
     8aa:	6f 93       	push	r22
     8ac:	7f 93       	push	r23
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
     8b6:	cf 93       	push	r28
     8b8:	ef 93       	push	r30
     8ba:	ff 93       	push	r31
    // Cache the retrieved byte
    uint8_t tmpUDR0;
    tmpUDR0 = UDR0;
     8bc:	c0 91 c6 00 	lds	r28, 0x00C6
    // Don't do anything if we're not looking
    if (usartActive) {
     8c0:	80 91 0b 01 	lds	r24, 0x010B
     8c4:	88 23       	and	r24, r24
     8c6:	19 f1       	breq	.+70     	; 0x90e <__vector_18+0x76>
        if (getSerialDestination() == SERIAL_CREATE) {
     8c8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <getSerialDestination>
            // New sensor data from the create
            sensorBuffer[sensorIndex++] = tmpUDR0;
     8cc:	e0 91 0a 01 	lds	r30, 0x010A
    // Cache the retrieved byte
    uint8_t tmpUDR0;
    tmpUDR0 = UDR0;
    // Don't do anything if we're not looking
    if (usartActive) {
        if (getSerialDestination() == SERIAL_CREATE) {
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	41 f4       	brne	.+16     	; 0x8e4 <__vector_18+0x4c>
            // New sensor data from the create
            sensorBuffer[sensorIndex++] = tmpUDR0;
     8d4:	8e 0f       	add	r24, r30
     8d6:	80 93 0a 01 	sts	0x010A, r24
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	e2 5f       	subi	r30, 0xF2	; 242
     8de:	fd 4f       	sbci	r31, 0xFD	; 253
     8e0:	c0 83       	st	Z, r28
     8e2:	0f c0       	rjmp	.+30     	; 0x902 <__vector_18+0x6a>
        } else {
            // Probably input from the computer, loop old values around
            sensorBuffer[sensorIndex] = sensors[sensorIndex];
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	a0 91 0a 01 	lds	r26, 0x010A
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	ae 5b       	subi	r26, 0xBE	; 190
     8ee:	bd 4f       	sbci	r27, 0xFD	; 253
     8f0:	8c 91       	ld	r24, X
     8f2:	e2 5f       	subi	r30, 0xF2	; 242
     8f4:	fd 4f       	sbci	r31, 0xFD	; 253
     8f6:	80 83       	st	Z, r24
            sensorIndex++;
     8f8:	80 91 0a 01 	lds	r24, 0x010A
     8fc:	8f 5f       	subi	r24, 0xFF	; 255
     8fe:	80 93 0a 01 	sts	0x010A, r24
        }
        if (sensorIndex >= Sen6Size) {
     902:	80 91 0a 01 	lds	r24, 0x010A
     906:	84 33       	cpi	r24, 0x34	; 52
     908:	10 f0       	brcs	.+4      	; 0x90e <__vector_18+0x76>
            // Reached end of sensor packet
            usartActive = 0;
     90a:	10 92 0b 01 	sts	0x010B, r1
        }
    }
}
     90e:	ff 91       	pop	r31
     910:	ef 91       	pop	r30
     912:	cf 91       	pop	r28
     914:	bf 91       	pop	r27
     916:	af 91       	pop	r26
     918:	9f 91       	pop	r25
     91a:	8f 91       	pop	r24
     91c:	7f 91       	pop	r23
     91e:	6f 91       	pop	r22
     920:	5f 91       	pop	r21
     922:	4f 91       	pop	r20
     924:	3f 91       	pop	r19
     926:	2f 91       	pop	r18
     928:	0f 90       	pop	r0
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	0f 90       	pop	r0
     92e:	1f 90       	pop	r1
     930:	18 95       	reti

00000932 <waitForSensors>:
    }
}

void waitForSensors(void) {
    // Sensors data are coming in if usartActive is true
    while(usartActive);
     932:	80 91 0b 01 	lds	r24, 0x010B
     936:	81 11       	cpse	r24, r1
     938:	fc cf       	rjmp	.-8      	; 0x932 <waitForSensors>
}
     93a:	08 95       	ret

0000093c <delayAndUpdateSensors>:

void delayAndUpdateSensors(uint32_t time_ms) {
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
    // Update sensors while waiting
    delayMsFunc(time_ms, &updateSensors, 1, UPDATE_SENSOR_DELAY_CUTOFF);
     940:	0a e0       	ldi	r16, 0x0A	; 10
     942:	10 e0       	ldi	r17, 0x00	; 0
     944:	21 e0       	ldi	r18, 0x01	; 1
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	4d e2       	ldi	r20, 0x2D	; 45
     94a:	54 e0       	ldi	r21, 0x04	; 4
     94c:	0e 94 32 03 	call	0x664	; 0x664 <delayMsFunc>
}
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	08 95       	ret

00000956 <getSensorUint8>:

uint8_t getSensorUint8(uint8_t index) {
    // Already in the right format
    return sensors[index];
     956:	e8 2f       	mov	r30, r24
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	ee 5b       	subi	r30, 0xBE	; 190
     95c:	fd 4f       	sbci	r31, 0xFD	; 253
     95e:	80 81       	ld	r24, Z
}
     960:	08 95       	ret

00000962 <getSensorInt8>:
    delayMsFunc(time_ms, &updateSensors, 1, UPDATE_SENSOR_DELAY_CUTOFF);
}

uint8_t getSensorUint8(uint8_t index) {
    // Already in the right format
    return sensors[index];
     962:	e8 2f       	mov	r30, r24
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	ee 5b       	subi	r30, 0xBE	; 190
     968:	fd 4f       	sbci	r31, 0xFD	; 253
     96a:	80 81       	ld	r24, Z

int8_t getSensorInt8(uint8_t index) {
    uint8_t x = getSensorUint8(index);
    // Convert to signed; not implementation-dependent, and optimizes away
    return x < (1 << 7) ? x : x - (1 << 8);
}
     96c:	08 95       	ret

0000096e <getSensorUint16>:

uint16_t getSensorUint16(uint8_t index1) {
    // Combine msB and lsB
    return (sensors[index1] << 8) | sensors[index1 + 1];
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	fc 01       	movw	r30, r24
     972:	ee 5b       	subi	r30, 0xBE	; 190
     974:	fd 4f       	sbci	r31, 0xFD	; 253
     976:	20 81       	ld	r18, Z
     978:	fc 01       	movw	r30, r24
     97a:	ed 5b       	subi	r30, 0xBD	; 189
     97c:	fd 4f       	sbci	r31, 0xFD	; 253
     97e:	80 81       	ld	r24, Z
     980:	90 e0       	ldi	r25, 0x00	; 0
}
     982:	92 2b       	or	r25, r18
     984:	08 95       	ret

00000986 <getSensorInt16>:

int16_t getSensorInt16(uint8_t index1) {
    uint16_t x = getSensorUint16(index1);
     986:	0c 94 b7 04 	jmp	0x96e	; 0x96e <getSensorUint16>

0000098a <irobPeriodicImplNull>:
#include "sensing.h"
#include "irobled.h"
#include "driving.h"
#include "irobserial.h"

void irobPeriodicImplNull(void) {
     98a:	08 95       	ret

0000098c <setIrobPeriodicImpl>:
}

void (*irobPeriodicImpl)(void) = &irobPeriodicImplNull;

void setIrobPeriodicImpl(void (*func)(void)) {
    irobPeriodicImpl = func;
     98c:	90 93 02 01 	sts	0x0102, r25
     990:	80 93 01 01 	sts	0x0101, r24
     994:	08 95       	ret

00000996 <irobInit>:
}

void irobInit(void) {
    // Set up Create and module
    initializeCommandModule();
     996:	0e 94 b1 03 	call	0x762	; 0x762 <initializeCommandModule>
    // Set Create as default serial destination
    setSerialDestination(SERIAL_CREATE);
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <setSerialDestination>
    
    // Is the Robot on
    powerOnRobot();
     9a0:	0e 94 66 02 	call	0x4cc	; 0x4cc <powerOnRobot>
    // Start the create
    byteTx(CmdStart);
     9a4:	80 e8       	ldi	r24, 0x80	; 128
     9a6:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    // Set the baud rate for the Create and Command Module
    baud(Baud57600);
     9aa:	8a e0       	ldi	r24, 0x0A	; 10
     9ac:	0e 94 c8 03 	call	0x790	; 0x790 <baud>
    // Define some songs so that we know the robot is on.
    defineSongs();
     9b0:	0e 94 18 02 	call	0x430	; 0x430 <defineSongs>
    // Deprecated form of safe mode. I use it because it will
    // turn of all LEDs, so it's essentially a reset.
    byteTx(CmdControl);
     9b4:	82 e8       	ldi	r24, 0x82	; 130
     9b6:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    // We are operating in FULL mode.
    byteTx(CmdFull);
     9ba:	84 e8       	ldi	r24, 0x84	; 132
     9bc:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>

    // Make sure the robot stops. 
    // As a precaution for the robot and your grade.
    driveStop();
     9c0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <driveStop>

    // Play the reset song and wait while it plays.
    byteTx(CmdPlay);
     9c4:	8d e8       	ldi	r24, 0x8D	; 141
     9c6:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    byteTx(RESET_SONG);
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	0e 94 ba 03 	call	0x774	; 0x774 <byteTx>
    delayMs(750);
     9d0:	6e ee       	ldi	r22, 0xEE	; 238
     9d2:	72 e0       	ldi	r23, 0x02	; 2
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 22 03 	call	0x644	; 0x644 <delayMs>

    // Turn the power button on to red.
    irobledInit();
     9dc:	0c 94 b5 02 	jmp	0x56a	; 0x56a <irobledInit>

000009e0 <irobEnd>:
    }
}

void irobEnd(void) {
    // Stop the Create
    driveStop();
     9e0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <driveStop>
    // Power off the Create
    powerOffRobot();
     9e4:	0e 94 89 02 	call	0x512	; 0x512 <powerOffRobot>
    // Exit the program
    exit(1);
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 38 08 	call	0x1070	; 0x1070 <_exit>

000009f0 <irobPeriodic>:
     9f0:	e0 91 01 01 	lds	r30, 0x0101
     9f4:	f0 91 02 01 	lds	r31, 0x0102
     9f8:	09 95       	icall
     9fa:	4c 9b       	sbis	0x09, 4	; 9
     9fc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <irobEnd>
     a00:	08 95       	ret

00000a02 <main>:
     a02:	86 ea       	ldi	r24, 0xA6	; 166
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 c6 04 	call	0x98c	; 0x98c <setIrobPeriodicImpl>
     a0a:	0e 94 cb 04 	call	0x996	; 0x996 <irobInit>
     a0e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <irobPeriodic>
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 22 03 	call	0x644	; 0x644 <delayMs>
     a1e:	0e 94 99 04 	call	0x932	; 0x932 <waitForSensors>
     a22:	f5 cf       	rjmp	.-22     	; 0xa0e <main+0xc>

00000a24 <__usmulhisi3>:
     a24:	0e 94 43 05 	call	0xa86	; 0xa86 <__umulhisi3>

00000a28 <__usmulhisi3_tail>:
     a28:	b7 ff       	sbrs	r27, 7
     a2a:	08 95       	ret
     a2c:	82 1b       	sub	r24, r18
     a2e:	93 0b       	sbc	r25, r19
     a30:	08 95       	ret

00000a32 <__mulshisi3>:
     a32:	b7 ff       	sbrs	r27, 7
     a34:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__muluhisi3>

00000a38 <__mulohisi3>:
     a38:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__muluhisi3>
     a3c:	82 1b       	sub	r24, r18
     a3e:	93 0b       	sbc	r25, r19
     a40:	08 95       	ret

00000a42 <__udivmodsi4>:
     a42:	a1 e2       	ldi	r26, 0x21	; 33
     a44:	1a 2e       	mov	r1, r26
     a46:	aa 1b       	sub	r26, r26
     a48:	bb 1b       	sub	r27, r27
     a4a:	fd 01       	movw	r30, r26
     a4c:	0d c0       	rjmp	.+26     	; 0xa68 <__udivmodsi4_ep>

00000a4e <__udivmodsi4_loop>:
     a4e:	aa 1f       	adc	r26, r26
     a50:	bb 1f       	adc	r27, r27
     a52:	ee 1f       	adc	r30, r30
     a54:	ff 1f       	adc	r31, r31
     a56:	a2 17       	cp	r26, r18
     a58:	b3 07       	cpc	r27, r19
     a5a:	e4 07       	cpc	r30, r20
     a5c:	f5 07       	cpc	r31, r21
     a5e:	20 f0       	brcs	.+8      	; 0xa68 <__udivmodsi4_ep>
     a60:	a2 1b       	sub	r26, r18
     a62:	b3 0b       	sbc	r27, r19
     a64:	e4 0b       	sbc	r30, r20
     a66:	f5 0b       	sbc	r31, r21

00000a68 <__udivmodsi4_ep>:
     a68:	66 1f       	adc	r22, r22
     a6a:	77 1f       	adc	r23, r23
     a6c:	88 1f       	adc	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	1a 94       	dec	r1
     a72:	69 f7       	brne	.-38     	; 0xa4e <__udivmodsi4_loop>
     a74:	60 95       	com	r22
     a76:	70 95       	com	r23
     a78:	80 95       	com	r24
     a7a:	90 95       	com	r25
     a7c:	9b 01       	movw	r18, r22
     a7e:	ac 01       	movw	r20, r24
     a80:	bd 01       	movw	r22, r26
     a82:	cf 01       	movw	r24, r30
     a84:	08 95       	ret

00000a86 <__umulhisi3>:
     a86:	a2 9f       	mul	r26, r18
     a88:	b0 01       	movw	r22, r0
     a8a:	b3 9f       	mul	r27, r19
     a8c:	c0 01       	movw	r24, r0
     a8e:	a3 9f       	mul	r26, r19
     a90:	70 0d       	add	r23, r0
     a92:	81 1d       	adc	r24, r1
     a94:	11 24       	eor	r1, r1
     a96:	91 1d       	adc	r25, r1
     a98:	b2 9f       	mul	r27, r18
     a9a:	70 0d       	add	r23, r0
     a9c:	81 1d       	adc	r24, r1
     a9e:	11 24       	eor	r1, r1
     aa0:	91 1d       	adc	r25, r1
     aa2:	08 95       	ret

00000aa4 <__muluhisi3>:
     aa4:	0e 94 43 05 	call	0xa86	; 0xa86 <__umulhisi3>
     aa8:	a5 9f       	mul	r26, r21
     aaa:	90 0d       	add	r25, r0
     aac:	b4 9f       	mul	r27, r20
     aae:	90 0d       	add	r25, r0
     ab0:	a4 9f       	mul	r26, r20
     ab2:	80 0d       	add	r24, r0
     ab4:	91 1d       	adc	r25, r1
     ab6:	11 24       	eor	r1, r1
     ab8:	08 95       	ret

00000aba <vsnprintf>:
     aba:	ae e0       	ldi	r26, 0x0E	; 14
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	e3 e6       	ldi	r30, 0x63	; 99
     ac0:	f5 e0       	ldi	r31, 0x05	; 5
     ac2:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__prologue_saves__+0x1c>
     ac6:	8c 01       	movw	r16, r24
     ac8:	ca 01       	movw	r24, r20
     aca:	46 e0       	ldi	r20, 0x06	; 6
     acc:	4c 83       	std	Y+4, r20	; 0x04
     ace:	1a 83       	std	Y+2, r17	; 0x02
     ad0:	09 83       	std	Y+1, r16	; 0x01
     ad2:	77 ff       	sbrs	r23, 7
     ad4:	02 c0       	rjmp	.+4      	; 0xada <vsnprintf+0x20>
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	70 e8       	ldi	r23, 0x80	; 128
     ada:	61 50       	subi	r22, 0x01	; 1
     adc:	71 09       	sbc	r23, r1
     ade:	7e 83       	std	Y+6, r23	; 0x06
     ae0:	6d 83       	std	Y+5, r22	; 0x05
     ae2:	a9 01       	movw	r20, r18
     ae4:	bc 01       	movw	r22, r24
     ae6:	ce 01       	movw	r24, r28
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	0e 94 89 05 	call	0xb12	; 0xb12 <vfprintf>
     aee:	4d 81       	ldd	r20, Y+5	; 0x05
     af0:	5e 81       	ldd	r21, Y+6	; 0x06
     af2:	57 fd       	sbrc	r21, 7
     af4:	0a c0       	rjmp	.+20     	; 0xb0a <vsnprintf+0x50>
     af6:	2f 81       	ldd	r18, Y+7	; 0x07
     af8:	38 85       	ldd	r19, Y+8	; 0x08
     afa:	42 17       	cp	r20, r18
     afc:	53 07       	cpc	r21, r19
     afe:	0c f4       	brge	.+2      	; 0xb02 <vsnprintf+0x48>
     b00:	9a 01       	movw	r18, r20
     b02:	f8 01       	movw	r30, r16
     b04:	e2 0f       	add	r30, r18
     b06:	f3 1f       	adc	r31, r19
     b08:	10 82       	st	Z, r1
     b0a:	2e 96       	adiw	r28, 0x0e	; 14
     b0c:	e4 e0       	ldi	r30, 0x04	; 4
     b0e:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__epilogue_restores__+0x1c>

00000b12 <vfprintf>:
     b12:	ac e0       	ldi	r26, 0x0C	; 12
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	ef e8       	ldi	r30, 0x8F	; 143
     b18:	f5 e0       	ldi	r31, 0x05	; 5
     b1a:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__prologue_saves__>
     b1e:	7c 01       	movw	r14, r24
     b20:	6b 01       	movw	r12, r22
     b22:	8a 01       	movw	r16, r20
     b24:	fc 01       	movw	r30, r24
     b26:	17 82       	std	Z+7, r1	; 0x07
     b28:	16 82       	std	Z+6, r1	; 0x06
     b2a:	83 81       	ldd	r24, Z+3	; 0x03
     b2c:	81 ff       	sbrs	r24, 1
     b2e:	bd c1       	rjmp	.+890    	; 0xeaa <vfprintf+0x398>
     b30:	ce 01       	movw	r24, r28
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	4c 01       	movw	r8, r24
     b36:	f7 01       	movw	r30, r14
     b38:	93 81       	ldd	r25, Z+3	; 0x03
     b3a:	f6 01       	movw	r30, r12
     b3c:	93 fd       	sbrc	r25, 3
     b3e:	85 91       	lpm	r24, Z+
     b40:	93 ff       	sbrs	r25, 3
     b42:	81 91       	ld	r24, Z+
     b44:	6f 01       	movw	r12, r30
     b46:	88 23       	and	r24, r24
     b48:	09 f4       	brne	.+2      	; 0xb4c <vfprintf+0x3a>
     b4a:	ab c1       	rjmp	.+854    	; 0xea2 <vfprintf+0x390>
     b4c:	85 32       	cpi	r24, 0x25	; 37
     b4e:	39 f4       	brne	.+14     	; 0xb5e <vfprintf+0x4c>
     b50:	93 fd       	sbrc	r25, 3
     b52:	85 91       	lpm	r24, Z+
     b54:	93 ff       	sbrs	r25, 3
     b56:	81 91       	ld	r24, Z+
     b58:	6f 01       	movw	r12, r30
     b5a:	85 32       	cpi	r24, 0x25	; 37
     b5c:	29 f4       	brne	.+10     	; 0xb68 <vfprintf+0x56>
     b5e:	b7 01       	movw	r22, r14
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     b66:	e7 cf       	rjmp	.-50     	; 0xb36 <vfprintf+0x24>
     b68:	51 2c       	mov	r5, r1
     b6a:	31 2c       	mov	r3, r1
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	20 32       	cpi	r18, 0x20	; 32
     b70:	a0 f4       	brcc	.+40     	; 0xb9a <vfprintf+0x88>
     b72:	8b 32       	cpi	r24, 0x2B	; 43
     b74:	69 f0       	breq	.+26     	; 0xb90 <vfprintf+0x7e>
     b76:	30 f4       	brcc	.+12     	; 0xb84 <vfprintf+0x72>
     b78:	80 32       	cpi	r24, 0x20	; 32
     b7a:	59 f0       	breq	.+22     	; 0xb92 <vfprintf+0x80>
     b7c:	83 32       	cpi	r24, 0x23	; 35
     b7e:	69 f4       	brne	.+26     	; 0xb9a <vfprintf+0x88>
     b80:	20 61       	ori	r18, 0x10	; 16
     b82:	2c c0       	rjmp	.+88     	; 0xbdc <vfprintf+0xca>
     b84:	8d 32       	cpi	r24, 0x2D	; 45
     b86:	39 f0       	breq	.+14     	; 0xb96 <vfprintf+0x84>
     b88:	80 33       	cpi	r24, 0x30	; 48
     b8a:	39 f4       	brne	.+14     	; 0xb9a <vfprintf+0x88>
     b8c:	21 60       	ori	r18, 0x01	; 1
     b8e:	26 c0       	rjmp	.+76     	; 0xbdc <vfprintf+0xca>
     b90:	22 60       	ori	r18, 0x02	; 2
     b92:	24 60       	ori	r18, 0x04	; 4
     b94:	23 c0       	rjmp	.+70     	; 0xbdc <vfprintf+0xca>
     b96:	28 60       	ori	r18, 0x08	; 8
     b98:	21 c0       	rjmp	.+66     	; 0xbdc <vfprintf+0xca>
     b9a:	27 fd       	sbrc	r18, 7
     b9c:	27 c0       	rjmp	.+78     	; 0xbec <vfprintf+0xda>
     b9e:	30 ed       	ldi	r19, 0xD0	; 208
     ba0:	38 0f       	add	r19, r24
     ba2:	3a 30       	cpi	r19, 0x0A	; 10
     ba4:	78 f4       	brcc	.+30     	; 0xbc4 <vfprintf+0xb2>
     ba6:	26 ff       	sbrs	r18, 6
     ba8:	06 c0       	rjmp	.+12     	; 0xbb6 <vfprintf+0xa4>
     baa:	fa e0       	ldi	r31, 0x0A	; 10
     bac:	5f 9e       	mul	r5, r31
     bae:	30 0d       	add	r19, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	53 2e       	mov	r5, r19
     bb4:	13 c0       	rjmp	.+38     	; 0xbdc <vfprintf+0xca>
     bb6:	8a e0       	ldi	r24, 0x0A	; 10
     bb8:	38 9e       	mul	r3, r24
     bba:	30 0d       	add	r19, r0
     bbc:	11 24       	eor	r1, r1
     bbe:	33 2e       	mov	r3, r19
     bc0:	20 62       	ori	r18, 0x20	; 32
     bc2:	0c c0       	rjmp	.+24     	; 0xbdc <vfprintf+0xca>
     bc4:	8e 32       	cpi	r24, 0x2E	; 46
     bc6:	21 f4       	brne	.+8      	; 0xbd0 <vfprintf+0xbe>
     bc8:	26 fd       	sbrc	r18, 6
     bca:	6b c1       	rjmp	.+726    	; 0xea2 <vfprintf+0x390>
     bcc:	20 64       	ori	r18, 0x40	; 64
     bce:	06 c0       	rjmp	.+12     	; 0xbdc <vfprintf+0xca>
     bd0:	8c 36       	cpi	r24, 0x6C	; 108
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <vfprintf+0xc6>
     bd4:	20 68       	ori	r18, 0x80	; 128
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <vfprintf+0xca>
     bd8:	88 36       	cpi	r24, 0x68	; 104
     bda:	41 f4       	brne	.+16     	; 0xbec <vfprintf+0xda>
     bdc:	f6 01       	movw	r30, r12
     bde:	93 fd       	sbrc	r25, 3
     be0:	85 91       	lpm	r24, Z+
     be2:	93 ff       	sbrs	r25, 3
     be4:	81 91       	ld	r24, Z+
     be6:	6f 01       	movw	r12, r30
     be8:	81 11       	cpse	r24, r1
     bea:	c1 cf       	rjmp	.-126    	; 0xb6e <vfprintf+0x5c>
     bec:	98 2f       	mov	r25, r24
     bee:	9f 7d       	andi	r25, 0xDF	; 223
     bf0:	95 54       	subi	r25, 0x45	; 69
     bf2:	93 30       	cpi	r25, 0x03	; 3
     bf4:	28 f4       	brcc	.+10     	; 0xc00 <vfprintf+0xee>
     bf6:	0c 5f       	subi	r16, 0xFC	; 252
     bf8:	1f 4f       	sbci	r17, 0xFF	; 255
     bfa:	ff e3       	ldi	r31, 0x3F	; 63
     bfc:	f9 83       	std	Y+1, r31	; 0x01
     bfe:	0d c0       	rjmp	.+26     	; 0xc1a <vfprintf+0x108>
     c00:	83 36       	cpi	r24, 0x63	; 99
     c02:	31 f0       	breq	.+12     	; 0xc10 <vfprintf+0xfe>
     c04:	83 37       	cpi	r24, 0x73	; 115
     c06:	71 f0       	breq	.+28     	; 0xc24 <vfprintf+0x112>
     c08:	83 35       	cpi	r24, 0x53	; 83
     c0a:	09 f0       	breq	.+2      	; 0xc0e <vfprintf+0xfc>
     c0c:	5b c0       	rjmp	.+182    	; 0xcc4 <vfprintf+0x1b2>
     c0e:	22 c0       	rjmp	.+68     	; 0xc54 <vfprintf+0x142>
     c10:	f8 01       	movw	r30, r16
     c12:	80 81       	ld	r24, Z
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	0e 5f       	subi	r16, 0xFE	; 254
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	44 24       	eor	r4, r4
     c1c:	43 94       	inc	r4
     c1e:	51 2c       	mov	r5, r1
     c20:	54 01       	movw	r10, r8
     c22:	15 c0       	rjmp	.+42     	; 0xc4e <vfprintf+0x13c>
     c24:	38 01       	movw	r6, r16
     c26:	f2 e0       	ldi	r31, 0x02	; 2
     c28:	6f 0e       	add	r6, r31
     c2a:	71 1c       	adc	r7, r1
     c2c:	f8 01       	movw	r30, r16
     c2e:	a0 80       	ld	r10, Z
     c30:	b1 80       	ldd	r11, Z+1	; 0x01
     c32:	26 ff       	sbrs	r18, 6
     c34:	03 c0       	rjmp	.+6      	; 0xc3c <vfprintf+0x12a>
     c36:	65 2d       	mov	r22, r5
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <vfprintf+0x12e>
     c3c:	6f ef       	ldi	r22, 0xFF	; 255
     c3e:	7f ef       	ldi	r23, 0xFF	; 255
     c40:	c5 01       	movw	r24, r10
     c42:	2c 87       	std	Y+12, r18	; 0x0c
     c44:	0e 94 66 07 	call	0xecc	; 0xecc <strnlen>
     c48:	2c 01       	movw	r4, r24
     c4a:	83 01       	movw	r16, r6
     c4c:	2c 85       	ldd	r18, Y+12	; 0x0c
     c4e:	2f 77       	andi	r18, 0x7F	; 127
     c50:	22 2e       	mov	r2, r18
     c52:	17 c0       	rjmp	.+46     	; 0xc82 <vfprintf+0x170>
     c54:	38 01       	movw	r6, r16
     c56:	f2 e0       	ldi	r31, 0x02	; 2
     c58:	6f 0e       	add	r6, r31
     c5a:	71 1c       	adc	r7, r1
     c5c:	f8 01       	movw	r30, r16
     c5e:	a0 80       	ld	r10, Z
     c60:	b1 80       	ldd	r11, Z+1	; 0x01
     c62:	26 ff       	sbrs	r18, 6
     c64:	03 c0       	rjmp	.+6      	; 0xc6c <vfprintf+0x15a>
     c66:	65 2d       	mov	r22, r5
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <vfprintf+0x15e>
     c6c:	6f ef       	ldi	r22, 0xFF	; 255
     c6e:	7f ef       	ldi	r23, 0xFF	; 255
     c70:	c5 01       	movw	r24, r10
     c72:	2c 87       	std	Y+12, r18	; 0x0c
     c74:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <strnlen_P>
     c78:	2c 01       	movw	r4, r24
     c7a:	2c 85       	ldd	r18, Y+12	; 0x0c
     c7c:	20 68       	ori	r18, 0x80	; 128
     c7e:	22 2e       	mov	r2, r18
     c80:	83 01       	movw	r16, r6
     c82:	23 fc       	sbrc	r2, 3
     c84:	1b c0       	rjmp	.+54     	; 0xcbc <vfprintf+0x1aa>
     c86:	83 2d       	mov	r24, r3
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	48 16       	cp	r4, r24
     c8c:	59 06       	cpc	r5, r25
     c8e:	b0 f4       	brcc	.+44     	; 0xcbc <vfprintf+0x1aa>
     c90:	b7 01       	movw	r22, r14
     c92:	80 e2       	ldi	r24, 0x20	; 32
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     c9a:	3a 94       	dec	r3
     c9c:	f4 cf       	rjmp	.-24     	; 0xc86 <vfprintf+0x174>
     c9e:	f5 01       	movw	r30, r10
     ca0:	27 fc       	sbrc	r2, 7
     ca2:	85 91       	lpm	r24, Z+
     ca4:	27 fe       	sbrs	r2, 7
     ca6:	81 91       	ld	r24, Z+
     ca8:	5f 01       	movw	r10, r30
     caa:	b7 01       	movw	r22, r14
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     cb2:	31 10       	cpse	r3, r1
     cb4:	3a 94       	dec	r3
     cb6:	f1 e0       	ldi	r31, 0x01	; 1
     cb8:	4f 1a       	sub	r4, r31
     cba:	51 08       	sbc	r5, r1
     cbc:	41 14       	cp	r4, r1
     cbe:	51 04       	cpc	r5, r1
     cc0:	71 f7       	brne	.-36     	; 0xc9e <vfprintf+0x18c>
     cc2:	e5 c0       	rjmp	.+458    	; 0xe8e <vfprintf+0x37c>
     cc4:	84 36       	cpi	r24, 0x64	; 100
     cc6:	11 f0       	breq	.+4      	; 0xccc <vfprintf+0x1ba>
     cc8:	89 36       	cpi	r24, 0x69	; 105
     cca:	39 f5       	brne	.+78     	; 0xd1a <vfprintf+0x208>
     ccc:	f8 01       	movw	r30, r16
     cce:	27 ff       	sbrs	r18, 7
     cd0:	07 c0       	rjmp	.+14     	; 0xce0 <vfprintf+0x1ce>
     cd2:	60 81       	ld	r22, Z
     cd4:	71 81       	ldd	r23, Z+1	; 0x01
     cd6:	82 81       	ldd	r24, Z+2	; 0x02
     cd8:	93 81       	ldd	r25, Z+3	; 0x03
     cda:	0c 5f       	subi	r16, 0xFC	; 252
     cdc:	1f 4f       	sbci	r17, 0xFF	; 255
     cde:	08 c0       	rjmp	.+16     	; 0xcf0 <vfprintf+0x1de>
     ce0:	60 81       	ld	r22, Z
     ce2:	71 81       	ldd	r23, Z+1	; 0x01
     ce4:	88 27       	eor	r24, r24
     ce6:	77 fd       	sbrc	r23, 7
     ce8:	80 95       	com	r24
     cea:	98 2f       	mov	r25, r24
     cec:	0e 5f       	subi	r16, 0xFE	; 254
     cee:	1f 4f       	sbci	r17, 0xFF	; 255
     cf0:	2f 76       	andi	r18, 0x6F	; 111
     cf2:	b2 2e       	mov	r11, r18
     cf4:	97 ff       	sbrs	r25, 7
     cf6:	09 c0       	rjmp	.+18     	; 0xd0a <vfprintf+0x1f8>
     cf8:	90 95       	com	r25
     cfa:	80 95       	com	r24
     cfc:	70 95       	com	r23
     cfe:	61 95       	neg	r22
     d00:	7f 4f       	sbci	r23, 0xFF	; 255
     d02:	8f 4f       	sbci	r24, 0xFF	; 255
     d04:	9f 4f       	sbci	r25, 0xFF	; 255
     d06:	20 68       	ori	r18, 0x80	; 128
     d08:	b2 2e       	mov	r11, r18
     d0a:	2a e0       	ldi	r18, 0x0A	; 10
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	a4 01       	movw	r20, r8
     d10:	0e 94 a3 07 	call	0xf46	; 0xf46 <__ultoa_invert>
     d14:	a8 2e       	mov	r10, r24
     d16:	a8 18       	sub	r10, r8
     d18:	44 c0       	rjmp	.+136    	; 0xda2 <vfprintf+0x290>
     d1a:	85 37       	cpi	r24, 0x75	; 117
     d1c:	29 f4       	brne	.+10     	; 0xd28 <vfprintf+0x216>
     d1e:	2f 7e       	andi	r18, 0xEF	; 239
     d20:	b2 2e       	mov	r11, r18
     d22:	2a e0       	ldi	r18, 0x0A	; 10
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	25 c0       	rjmp	.+74     	; 0xd72 <vfprintf+0x260>
     d28:	f2 2f       	mov	r31, r18
     d2a:	f9 7f       	andi	r31, 0xF9	; 249
     d2c:	bf 2e       	mov	r11, r31
     d2e:	8f 36       	cpi	r24, 0x6F	; 111
     d30:	c1 f0       	breq	.+48     	; 0xd62 <vfprintf+0x250>
     d32:	18 f4       	brcc	.+6      	; 0xd3a <vfprintf+0x228>
     d34:	88 35       	cpi	r24, 0x58	; 88
     d36:	79 f0       	breq	.+30     	; 0xd56 <vfprintf+0x244>
     d38:	b4 c0       	rjmp	.+360    	; 0xea2 <vfprintf+0x390>
     d3a:	80 37       	cpi	r24, 0x70	; 112
     d3c:	19 f0       	breq	.+6      	; 0xd44 <vfprintf+0x232>
     d3e:	88 37       	cpi	r24, 0x78	; 120
     d40:	21 f0       	breq	.+8      	; 0xd4a <vfprintf+0x238>
     d42:	af c0       	rjmp	.+350    	; 0xea2 <vfprintf+0x390>
     d44:	2f 2f       	mov	r18, r31
     d46:	20 61       	ori	r18, 0x10	; 16
     d48:	b2 2e       	mov	r11, r18
     d4a:	b4 fe       	sbrs	r11, 4
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <vfprintf+0x256>
     d4e:	8b 2d       	mov	r24, r11
     d50:	84 60       	ori	r24, 0x04	; 4
     d52:	b8 2e       	mov	r11, r24
     d54:	09 c0       	rjmp	.+18     	; 0xd68 <vfprintf+0x256>
     d56:	24 ff       	sbrs	r18, 4
     d58:	0a c0       	rjmp	.+20     	; 0xd6e <vfprintf+0x25c>
     d5a:	9f 2f       	mov	r25, r31
     d5c:	96 60       	ori	r25, 0x06	; 6
     d5e:	b9 2e       	mov	r11, r25
     d60:	06 c0       	rjmp	.+12     	; 0xd6e <vfprintf+0x25c>
     d62:	28 e0       	ldi	r18, 0x08	; 8
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <vfprintf+0x260>
     d68:	20 e1       	ldi	r18, 0x10	; 16
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <vfprintf+0x260>
     d6e:	20 e1       	ldi	r18, 0x10	; 16
     d70:	32 e0       	ldi	r19, 0x02	; 2
     d72:	f8 01       	movw	r30, r16
     d74:	b7 fe       	sbrs	r11, 7
     d76:	07 c0       	rjmp	.+14     	; 0xd86 <vfprintf+0x274>
     d78:	60 81       	ld	r22, Z
     d7a:	71 81       	ldd	r23, Z+1	; 0x01
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	93 81       	ldd	r25, Z+3	; 0x03
     d80:	0c 5f       	subi	r16, 0xFC	; 252
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
     d84:	06 c0       	rjmp	.+12     	; 0xd92 <vfprintf+0x280>
     d86:	60 81       	ld	r22, Z
     d88:	71 81       	ldd	r23, Z+1	; 0x01
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 5f       	subi	r16, 0xFE	; 254
     d90:	1f 4f       	sbci	r17, 0xFF	; 255
     d92:	a4 01       	movw	r20, r8
     d94:	0e 94 a3 07 	call	0xf46	; 0xf46 <__ultoa_invert>
     d98:	a8 2e       	mov	r10, r24
     d9a:	a8 18       	sub	r10, r8
     d9c:	fb 2d       	mov	r31, r11
     d9e:	ff 77       	andi	r31, 0x7F	; 127
     da0:	bf 2e       	mov	r11, r31
     da2:	b6 fe       	sbrs	r11, 6
     da4:	0b c0       	rjmp	.+22     	; 0xdbc <vfprintf+0x2aa>
     da6:	2b 2d       	mov	r18, r11
     da8:	2e 7f       	andi	r18, 0xFE	; 254
     daa:	a5 14       	cp	r10, r5
     dac:	50 f4       	brcc	.+20     	; 0xdc2 <vfprintf+0x2b0>
     dae:	b4 fe       	sbrs	r11, 4
     db0:	0a c0       	rjmp	.+20     	; 0xdc6 <vfprintf+0x2b4>
     db2:	b2 fc       	sbrc	r11, 2
     db4:	08 c0       	rjmp	.+16     	; 0xdc6 <vfprintf+0x2b4>
     db6:	2b 2d       	mov	r18, r11
     db8:	2e 7e       	andi	r18, 0xEE	; 238
     dba:	05 c0       	rjmp	.+10     	; 0xdc6 <vfprintf+0x2b4>
     dbc:	7a 2c       	mov	r7, r10
     dbe:	2b 2d       	mov	r18, r11
     dc0:	03 c0       	rjmp	.+6      	; 0xdc8 <vfprintf+0x2b6>
     dc2:	7a 2c       	mov	r7, r10
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <vfprintf+0x2b6>
     dc6:	75 2c       	mov	r7, r5
     dc8:	24 ff       	sbrs	r18, 4
     dca:	0d c0       	rjmp	.+26     	; 0xde6 <vfprintf+0x2d4>
     dcc:	fe 01       	movw	r30, r28
     dce:	ea 0d       	add	r30, r10
     dd0:	f1 1d       	adc	r31, r1
     dd2:	80 81       	ld	r24, Z
     dd4:	80 33       	cpi	r24, 0x30	; 48
     dd6:	11 f4       	brne	.+4      	; 0xddc <vfprintf+0x2ca>
     dd8:	29 7e       	andi	r18, 0xE9	; 233
     dda:	09 c0       	rjmp	.+18     	; 0xdee <vfprintf+0x2dc>
     ddc:	22 ff       	sbrs	r18, 2
     dde:	06 c0       	rjmp	.+12     	; 0xdec <vfprintf+0x2da>
     de0:	73 94       	inc	r7
     de2:	73 94       	inc	r7
     de4:	04 c0       	rjmp	.+8      	; 0xdee <vfprintf+0x2dc>
     de6:	82 2f       	mov	r24, r18
     de8:	86 78       	andi	r24, 0x86	; 134
     dea:	09 f0       	breq	.+2      	; 0xdee <vfprintf+0x2dc>
     dec:	73 94       	inc	r7
     dee:	23 fd       	sbrc	r18, 3
     df0:	13 c0       	rjmp	.+38     	; 0xe18 <vfprintf+0x306>
     df2:	20 ff       	sbrs	r18, 0
     df4:	06 c0       	rjmp	.+12     	; 0xe02 <vfprintf+0x2f0>
     df6:	5a 2c       	mov	r5, r10
     df8:	73 14       	cp	r7, r3
     dfa:	18 f4       	brcc	.+6      	; 0xe02 <vfprintf+0x2f0>
     dfc:	53 0c       	add	r5, r3
     dfe:	57 18       	sub	r5, r7
     e00:	73 2c       	mov	r7, r3
     e02:	73 14       	cp	r7, r3
     e04:	68 f4       	brcc	.+26     	; 0xe20 <vfprintf+0x30e>
     e06:	b7 01       	movw	r22, r14
     e08:	80 e2       	ldi	r24, 0x20	; 32
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	2c 87       	std	Y+12, r18	; 0x0c
     e0e:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e12:	73 94       	inc	r7
     e14:	2c 85       	ldd	r18, Y+12	; 0x0c
     e16:	f5 cf       	rjmp	.-22     	; 0xe02 <vfprintf+0x2f0>
     e18:	73 14       	cp	r7, r3
     e1a:	10 f4       	brcc	.+4      	; 0xe20 <vfprintf+0x30e>
     e1c:	37 18       	sub	r3, r7
     e1e:	01 c0       	rjmp	.+2      	; 0xe22 <vfprintf+0x310>
     e20:	31 2c       	mov	r3, r1
     e22:	24 ff       	sbrs	r18, 4
     e24:	12 c0       	rjmp	.+36     	; 0xe4a <vfprintf+0x338>
     e26:	b7 01       	movw	r22, r14
     e28:	80 e3       	ldi	r24, 0x30	; 48
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	2c 87       	std	Y+12, r18	; 0x0c
     e2e:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e32:	2c 85       	ldd	r18, Y+12	; 0x0c
     e34:	22 ff       	sbrs	r18, 2
     e36:	17 c0       	rjmp	.+46     	; 0xe66 <vfprintf+0x354>
     e38:	21 ff       	sbrs	r18, 1
     e3a:	03 c0       	rjmp	.+6      	; 0xe42 <vfprintf+0x330>
     e3c:	88 e5       	ldi	r24, 0x58	; 88
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <vfprintf+0x334>
     e42:	88 e7       	ldi	r24, 0x78	; 120
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	b7 01       	movw	r22, r14
     e48:	0c c0       	rjmp	.+24     	; 0xe62 <vfprintf+0x350>
     e4a:	82 2f       	mov	r24, r18
     e4c:	86 78       	andi	r24, 0x86	; 134
     e4e:	59 f0       	breq	.+22     	; 0xe66 <vfprintf+0x354>
     e50:	21 fd       	sbrc	r18, 1
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <vfprintf+0x346>
     e54:	80 e2       	ldi	r24, 0x20	; 32
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <vfprintf+0x348>
     e58:	8b e2       	ldi	r24, 0x2B	; 43
     e5a:	27 fd       	sbrc	r18, 7
     e5c:	8d e2       	ldi	r24, 0x2D	; 45
     e5e:	b7 01       	movw	r22, r14
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e66:	a5 14       	cp	r10, r5
     e68:	38 f4       	brcc	.+14     	; 0xe78 <vfprintf+0x366>
     e6a:	b7 01       	movw	r22, r14
     e6c:	80 e3       	ldi	r24, 0x30	; 48
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e74:	5a 94       	dec	r5
     e76:	f7 cf       	rjmp	.-18     	; 0xe66 <vfprintf+0x354>
     e78:	aa 94       	dec	r10
     e7a:	f4 01       	movw	r30, r8
     e7c:	ea 0d       	add	r30, r10
     e7e:	f1 1d       	adc	r31, r1
     e80:	80 81       	ld	r24, Z
     e82:	b7 01       	movw	r22, r14
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e8a:	a1 10       	cpse	r10, r1
     e8c:	f5 cf       	rjmp	.-22     	; 0xe78 <vfprintf+0x366>
     e8e:	33 20       	and	r3, r3
     e90:	09 f4       	brne	.+2      	; 0xe94 <vfprintf+0x382>
     e92:	51 ce       	rjmp	.-862    	; 0xb36 <vfprintf+0x24>
     e94:	b7 01       	movw	r22, r14
     e96:	80 e2       	ldi	r24, 0x20	; 32
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e9e:	3a 94       	dec	r3
     ea0:	f6 cf       	rjmp	.-20     	; 0xe8e <vfprintf+0x37c>
     ea2:	f7 01       	movw	r30, r14
     ea4:	86 81       	ldd	r24, Z+6	; 0x06
     ea6:	97 81       	ldd	r25, Z+7	; 0x07
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <vfprintf+0x39c>
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	9f ef       	ldi	r25, 0xFF	; 255
     eae:	2c 96       	adiw	r28, 0x0c	; 12
     eb0:	e2 e1       	ldi	r30, 0x12	; 18
     eb2:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__epilogue_restores__>

00000eb6 <strnlen_P>:
     eb6:	fc 01       	movw	r30, r24
     eb8:	05 90       	lpm	r0, Z+
     eba:	61 50       	subi	r22, 0x01	; 1
     ebc:	70 40       	sbci	r23, 0x00	; 0
     ebe:	01 10       	cpse	r0, r1
     ec0:	d8 f7       	brcc	.-10     	; 0xeb8 <strnlen_P+0x2>
     ec2:	80 95       	com	r24
     ec4:	90 95       	com	r25
     ec6:	8e 0f       	add	r24, r30
     ec8:	9f 1f       	adc	r25, r31
     eca:	08 95       	ret

00000ecc <strnlen>:
     ecc:	fc 01       	movw	r30, r24
     ece:	61 50       	subi	r22, 0x01	; 1
     ed0:	70 40       	sbci	r23, 0x00	; 0
     ed2:	01 90       	ld	r0, Z+
     ed4:	01 10       	cpse	r0, r1
     ed6:	d8 f7       	brcc	.-10     	; 0xece <strnlen+0x2>
     ed8:	80 95       	com	r24
     eda:	90 95       	com	r25
     edc:	8e 0f       	add	r24, r30
     ede:	9f 1f       	adc	r25, r31
     ee0:	08 95       	ret

00000ee2 <fputc>:
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	18 2f       	mov	r17, r24
     eec:	09 2f       	mov	r16, r25
     eee:	eb 01       	movw	r28, r22
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	81 fd       	sbrc	r24, 1
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <fputc+0x1a>
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	9f ef       	ldi	r25, 0xFF	; 255
     efa:	20 c0       	rjmp	.+64     	; 0xf3c <fputc+0x5a>
     efc:	82 ff       	sbrs	r24, 2
     efe:	10 c0       	rjmp	.+32     	; 0xf20 <fputc+0x3e>
     f00:	4e 81       	ldd	r20, Y+6	; 0x06
     f02:	5f 81       	ldd	r21, Y+7	; 0x07
     f04:	2c 81       	ldd	r18, Y+4	; 0x04
     f06:	3d 81       	ldd	r19, Y+5	; 0x05
     f08:	42 17       	cp	r20, r18
     f0a:	53 07       	cpc	r21, r19
     f0c:	7c f4       	brge	.+30     	; 0xf2c <fputc+0x4a>
     f0e:	e8 81       	ld	r30, Y
     f10:	f9 81       	ldd	r31, Y+1	; 0x01
     f12:	9f 01       	movw	r18, r30
     f14:	2f 5f       	subi	r18, 0xFF	; 255
     f16:	3f 4f       	sbci	r19, 0xFF	; 255
     f18:	39 83       	std	Y+1, r19	; 0x01
     f1a:	28 83       	st	Y, r18
     f1c:	10 83       	st	Z, r17
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <fputc+0x4a>
     f20:	e8 85       	ldd	r30, Y+8	; 0x08
     f22:	f9 85       	ldd	r31, Y+9	; 0x09
     f24:	81 2f       	mov	r24, r17
     f26:	09 95       	icall
     f28:	89 2b       	or	r24, r25
     f2a:	29 f7       	brne	.-54     	; 0xef6 <fputc+0x14>
     f2c:	2e 81       	ldd	r18, Y+6	; 0x06
     f2e:	3f 81       	ldd	r19, Y+7	; 0x07
     f30:	2f 5f       	subi	r18, 0xFF	; 255
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
     f34:	3f 83       	std	Y+7, r19	; 0x07
     f36:	2e 83       	std	Y+6, r18	; 0x06
     f38:	81 2f       	mov	r24, r17
     f3a:	90 2f       	mov	r25, r16
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <__ultoa_invert>:
     f46:	fa 01       	movw	r30, r20
     f48:	aa 27       	eor	r26, r26
     f4a:	28 30       	cpi	r18, 0x08	; 8
     f4c:	51 f1       	breq	.+84     	; 0xfa2 <__ultoa_invert+0x5c>
     f4e:	20 31       	cpi	r18, 0x10	; 16
     f50:	81 f1       	breq	.+96     	; 0xfb2 <__ultoa_invert+0x6c>
     f52:	e8 94       	clt
     f54:	6f 93       	push	r22
     f56:	6e 7f       	andi	r22, 0xFE	; 254
     f58:	6e 5f       	subi	r22, 0xFE	; 254
     f5a:	7f 4f       	sbci	r23, 0xFF	; 255
     f5c:	8f 4f       	sbci	r24, 0xFF	; 255
     f5e:	9f 4f       	sbci	r25, 0xFF	; 255
     f60:	af 4f       	sbci	r26, 0xFF	; 255
     f62:	b1 e0       	ldi	r27, 0x01	; 1
     f64:	3e d0       	rcall	.+124    	; 0xfe2 <__ultoa_invert+0x9c>
     f66:	b4 e0       	ldi	r27, 0x04	; 4
     f68:	3c d0       	rcall	.+120    	; 0xfe2 <__ultoa_invert+0x9c>
     f6a:	67 0f       	add	r22, r23
     f6c:	78 1f       	adc	r23, r24
     f6e:	89 1f       	adc	r24, r25
     f70:	9a 1f       	adc	r25, r26
     f72:	a1 1d       	adc	r26, r1
     f74:	68 0f       	add	r22, r24
     f76:	79 1f       	adc	r23, r25
     f78:	8a 1f       	adc	r24, r26
     f7a:	91 1d       	adc	r25, r1
     f7c:	a1 1d       	adc	r26, r1
     f7e:	6a 0f       	add	r22, r26
     f80:	71 1d       	adc	r23, r1
     f82:	81 1d       	adc	r24, r1
     f84:	91 1d       	adc	r25, r1
     f86:	a1 1d       	adc	r26, r1
     f88:	20 d0       	rcall	.+64     	; 0xfca <__ultoa_invert+0x84>
     f8a:	09 f4       	brne	.+2      	; 0xf8e <__ultoa_invert+0x48>
     f8c:	68 94       	set
     f8e:	3f 91       	pop	r19
     f90:	2a e0       	ldi	r18, 0x0A	; 10
     f92:	26 9f       	mul	r18, r22
     f94:	11 24       	eor	r1, r1
     f96:	30 19       	sub	r19, r0
     f98:	30 5d       	subi	r19, 0xD0	; 208
     f9a:	31 93       	st	Z+, r19
     f9c:	de f6       	brtc	.-74     	; 0xf54 <__ultoa_invert+0xe>
     f9e:	cf 01       	movw	r24, r30
     fa0:	08 95       	ret
     fa2:	46 2f       	mov	r20, r22
     fa4:	47 70       	andi	r20, 0x07	; 7
     fa6:	40 5d       	subi	r20, 0xD0	; 208
     fa8:	41 93       	st	Z+, r20
     faa:	b3 e0       	ldi	r27, 0x03	; 3
     fac:	0f d0       	rcall	.+30     	; 0xfcc <__ultoa_invert+0x86>
     fae:	c9 f7       	brne	.-14     	; 0xfa2 <__ultoa_invert+0x5c>
     fb0:	f6 cf       	rjmp	.-20     	; 0xf9e <__ultoa_invert+0x58>
     fb2:	46 2f       	mov	r20, r22
     fb4:	4f 70       	andi	r20, 0x0F	; 15
     fb6:	40 5d       	subi	r20, 0xD0	; 208
     fb8:	4a 33       	cpi	r20, 0x3A	; 58
     fba:	18 f0       	brcs	.+6      	; 0xfc2 <__ultoa_invert+0x7c>
     fbc:	49 5d       	subi	r20, 0xD9	; 217
     fbe:	31 fd       	sbrc	r19, 1
     fc0:	40 52       	subi	r20, 0x20	; 32
     fc2:	41 93       	st	Z+, r20
     fc4:	02 d0       	rcall	.+4      	; 0xfca <__ultoa_invert+0x84>
     fc6:	a9 f7       	brne	.-22     	; 0xfb2 <__ultoa_invert+0x6c>
     fc8:	ea cf       	rjmp	.-44     	; 0xf9e <__ultoa_invert+0x58>
     fca:	b4 e0       	ldi	r27, 0x04	; 4
     fcc:	a6 95       	lsr	r26
     fce:	97 95       	ror	r25
     fd0:	87 95       	ror	r24
     fd2:	77 95       	ror	r23
     fd4:	67 95       	ror	r22
     fd6:	ba 95       	dec	r27
     fd8:	c9 f7       	brne	.-14     	; 0xfcc <__ultoa_invert+0x86>
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	61 05       	cpc	r22, r1
     fde:	71 05       	cpc	r23, r1
     fe0:	08 95       	ret
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	0a 2e       	mov	r0, r26
     fe8:	06 94       	lsr	r0
     fea:	57 95       	ror	r21
     fec:	47 95       	ror	r20
     fee:	37 95       	ror	r19
     ff0:	27 95       	ror	r18
     ff2:	ba 95       	dec	r27
     ff4:	c9 f7       	brne	.-14     	; 0xfe8 <__ultoa_invert+0xa2>
     ff6:	62 0f       	add	r22, r18
     ff8:	73 1f       	adc	r23, r19
     ffa:	84 1f       	adc	r24, r20
     ffc:	95 1f       	adc	r25, r21
     ffe:	a0 1d       	adc	r26, r0
    1000:	08 95       	ret

00001002 <__prologue_saves__>:
    1002:	2f 92       	push	r2
    1004:	3f 92       	push	r3
    1006:	4f 92       	push	r4
    1008:	5f 92       	push	r5
    100a:	6f 92       	push	r6
    100c:	7f 92       	push	r7
    100e:	8f 92       	push	r8
    1010:	9f 92       	push	r9
    1012:	af 92       	push	r10
    1014:	bf 92       	push	r11
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	ca 1b       	sub	r28, r26
    102c:	db 0b       	sbc	r29, r27
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	09 94       	ijmp

0000103a <__epilogue_restores__>:
    103a:	2a 88       	ldd	r2, Y+18	; 0x12
    103c:	39 88       	ldd	r3, Y+17	; 0x11
    103e:	48 88       	ldd	r4, Y+16	; 0x10
    1040:	5f 84       	ldd	r5, Y+15	; 0x0f
    1042:	6e 84       	ldd	r6, Y+14	; 0x0e
    1044:	7d 84       	ldd	r7, Y+13	; 0x0d
    1046:	8c 84       	ldd	r8, Y+12	; 0x0c
    1048:	9b 84       	ldd	r9, Y+11	; 0x0b
    104a:	aa 84       	ldd	r10, Y+10	; 0x0a
    104c:	b9 84       	ldd	r11, Y+9	; 0x09
    104e:	c8 84       	ldd	r12, Y+8	; 0x08
    1050:	df 80       	ldd	r13, Y+7	; 0x07
    1052:	ee 80       	ldd	r14, Y+6	; 0x06
    1054:	fd 80       	ldd	r15, Y+5	; 0x05
    1056:	0c 81       	ldd	r16, Y+4	; 0x04
    1058:	1b 81       	ldd	r17, Y+3	; 0x03
    105a:	aa 81       	ldd	r26, Y+2	; 0x02
    105c:	b9 81       	ldd	r27, Y+1	; 0x01
    105e:	ce 0f       	add	r28, r30
    1060:	d1 1d       	adc	r29, r1
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	ed 01       	movw	r28, r26
    106e:	08 95       	ret

00001070 <_exit>:
    1070:	f8 94       	cli

00001072 <__stop_program>:
    1072:	ff cf       	rjmp	.-2      	; 0x1072 <__stop_program>
