   1               		.file	"irobserial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 113               	.global	setSerialDestination
 115               	setSerialDestination:
   1:utils/irobserial.c **** #include <stdint.h>
   2:utils/irobserial.c **** #include <stdarg.h>
   3:utils/irobserial.c **** #include <stdio.h>
   4:utils/irobserial.c **** #include "irobserial.h"
   5:utils/irobserial.c **** #include "cmod.h"
   6:utils/irobserial.c **** #include "oi.h"
   7:utils/irobserial.c **** #include "timer.h"
   8:utils/irobserial.c **** 
   9:utils/irobserial.c **** uint8_t serialDestination = SERIAL_SWITCHING;
  10:utils/irobserial.c **** 
  11:utils/irobserial.c **** void setSerialDestination(uint8_t dest) {
 117               	.LM0:
 118               	.LFBB1:
 119 0000 CF93      		push r28
 120               	/* prologue: function */
 121               	/* frame size = 0 */
 122               	/* stack size = 1 */
 123               	.L__stack_usage = 1
 124 0002 C82F      		mov r28,r24
  12:utils/irobserial.c ****     serialDestination = SERIAL_SWITCHING;
 126               	.LM1:
 127 0004 8FEF      		ldi r24,lo8(-1)
 128 0006 8093 0000 		sts serialDestination,r24
  13:utils/irobserial.c ****     // Which serial port should byteTx and byteRx talk to?
  14:utils/irobserial.c ****     // Ensure any pending bytes have been sent. Without this, the last byte
  15:utils/irobserial.c ****     // sent before calling this might seem to disappear.
  16:utils/irobserial.c ****     delayMs(10);
 130               	.LM2:
 131 000a 6AE0      		ldi r22,lo8(10)
 132 000c 70E0      		ldi r23,0
 133 000e 80E0      		ldi r24,0
 134 0010 90E0      		ldi r25,0
 135 0012 0E94 0000 		call delayMs
  17:utils/irobserial.c ****     // Configure the port.
  18:utils/irobserial.c ****     if (dest == SERIAL_CREATE) {
 137               	.LM3:
 138 0016 C130      		cpi r28,lo8(1)
 139 0018 01F4      		brne .L2
  19:utils/irobserial.c ****         PORTB &= ~0x10 ;
 141               	.LM4:
 142 001a 2C98      		cbi 0x5,4
 143 001c 00C0      		rjmp .L3
 144               	.L2:
  20:utils/irobserial.c ****     } else {
  21:utils/irobserial.c ****         PORTB |= 0x10 ;
 146               	.LM5:
 147 001e 2C9A      		sbi 0x5,4
 148               	.L3:
  22:utils/irobserial.c ****     }
  23:utils/irobserial.c ****     // Wait a bit to let things get back to normal. According to the docs, this
  24:utils/irobserial.c ****     // should be at least 10 times the amount of time needed to send one byte.
  25:utils/irobserial.c ****     // This is less than 1 millisecond. We are using a much longer delay to be
  26:utils/irobserial.c ****     // super extra sure.
  27:utils/irobserial.c ****     delayMs(10);
 150               	.LM6:
 151 0020 6AE0      		ldi r22,lo8(10)
 152 0022 70E0      		ldi r23,0
 153 0024 80E0      		ldi r24,0
 154 0026 90E0      		ldi r25,0
 155 0028 0E94 0000 		call delayMs
  28:utils/irobserial.c ****     serialDestination = dest;
 157               	.LM7:
 158 002c C093 0000 		sts serialDestination,r28
 159               	/* epilogue start */
  29:utils/irobserial.c **** }
 161               	.LM8:
 162 0030 CF91      		pop r28
 163 0032 0895      		ret
 165               	.Lscope1:
 167               	.global	getSerialDestination
 169               	getSerialDestination:
  30:utils/irobserial.c **** 
  31:utils/irobserial.c **** uint8_t getSerialDestination(void) {
 171               	.LM9:
 172               	.LFBB2:
 173               	/* prologue: function */
 174               	/* frame size = 0 */
 175               	/* stack size = 0 */
 176               	.L__stack_usage = 0
  32:utils/irobserial.c ****    return serialDestination; 
  33:utils/irobserial.c **** }
 178               	.LM10:
 179 0034 8091 0000 		lds r24,serialDestination
 180 0038 0895      		ret
 182               	.Lscope2:
 185               	.global	irobprint
 187               	irobprint:
  34:utils/irobserial.c **** 
  35:utils/irobserial.c **** void irobprint(char* str) {
 189               	.LM11:
 190               	.LFBB3:
 191 003a CF93      		push r28
 192 003c DF93      		push r29
 193               	/* prologue: function */
 194               	/* frame size = 0 */
 195               	/* stack size = 2 */
 196               	.L__stack_usage = 2
 197 003e EC01      		movw r28,r24
 198               	.L7:
  36:utils/irobserial.c ****     char c;
  37:utils/irobserial.c ****     // Null-terminated string
  38:utils/irobserial.c ****     while ((c = *(str++)) != '\0') {
 200               	.LM12:
 201 0040 8991      		ld r24,Y+
 202 0042 8823      		tst r24
 203 0044 01F0      		breq .L9
  39:utils/irobserial.c ****         // Print each byte
  40:utils/irobserial.c ****         byteTx(c);
 205               	.LM13:
 206 0046 0E94 0000 		call byteTx
 207 004a 00C0      		rjmp .L7
 208               	.L9:
 209               	/* epilogue start */
  41:utils/irobserial.c ****     }
  42:utils/irobserial.c **** }
 211               	.LM14:
 212 004c DF91      		pop r29
 213 004e CF91      		pop r28
 214 0050 0895      		ret
 219               	.Lscope3:
 222               	.global	irobprintf
 224               	irobprintf:
  43:utils/irobserial.c **** 
  44:utils/irobserial.c **** char printfBuffer[PRINTF_BUFFER_SIZE];
  45:utils/irobserial.c **** 
  46:utils/irobserial.c **** void irobprintf(const char* format, ...) {
 226               	.LM15:
 227               	.LFBB4:
 228 0052 CF93      		push r28
 229 0054 DF93      		push r29
 230 0056 CDB7      		in r28,__SP_L__
 231 0058 DEB7      		in r29,__SP_H__
 232               	/* prologue: function */
 233               	/* frame size = 0 */
 234               	/* stack size = 2 */
 235               	.L__stack_usage = 2
 236 005a FE01      		movw r30,r28
 237 005c 3596      		adiw r30,5
 238 005e 4191      		ld r20,Z+
 239 0060 5191      		ld r21,Z+
  47:utils/irobserial.c ****     char* fp = &printfBuffer[0];
  48:utils/irobserial.c ****     va_list ap;
  49:utils/irobserial.c ****     va_start(ap, format);
  50:utils/irobserial.c ****     // Format the string
  51:utils/irobserial.c ****     vsnprintf(fp, PRINTF_BUFFER_SIZE, format, ap);
 241               	.LM16:
 242 0062 9F01      		movw r18,r30
 243 0064 6FEF      		ldi r22,lo8(-1)
 244 0066 70E0      		ldi r23,0
 245 0068 80E0      		ldi r24,lo8(printfBuffer)
 246 006a 90E0      		ldi r25,hi8(printfBuffer)
 247 006c 0E94 0000 		call vsnprintf
  52:utils/irobserial.c ****     va_end(ap);
  53:utils/irobserial.c ****     // Print the string
  54:utils/irobserial.c ****     irobprint(fp);
 249               	.LM17:
 250 0070 80E0      		ldi r24,lo8(printfBuffer)
 251 0072 90E0      		ldi r25,hi8(printfBuffer)
 252 0074 0E94 0000 		call irobprint
 253               	/* epilogue start */
  55:utils/irobserial.c **** }
 255               	.LM18:
 256 0078 DF91      		pop r29
 257 007a CF91      		pop r28
 258 007c 0895      		ret
 261               	.Lscope4:
 265               	.global	irobnprintf
 267               	irobnprintf:
  56:utils/irobserial.c **** 
  57:utils/irobserial.c **** void irobnprintf(uint16_t size, const char* format, ...) {
 269               	.LM19:
 270               	.LFBB5:
 271 007e EF92      		push r14
 272 0080 FF92      		push r15
 273 0082 0F93      		push r16
 274 0084 1F93      		push r17
 275 0086 CF93      		push r28
 276 0088 DF93      		push r29
 277 008a CDB7      		in r28,__SP_L__
 278 008c DEB7      		in r29,__SP_H__
 279               	/* prologue: function */
 280               	/* frame size = 0 */
 281               	/* stack size = 6 */
 282               	.L__stack_usage = 6
 283 008e 6985      		ldd r22,Y+9
 284 0090 7A85      		ldd r23,Y+10
  58:utils/irobserial.c ****     // Create a buffer
  59:utils/irobserial.c ****     char formatted[size];
  60:utils/irobserial.c ****     char* fp = &formatted[0];
  61:utils/irobserial.c ****     va_list ap;
  62:utils/irobserial.c ****     va_start(ap, format);
  63:utils/irobserial.c ****     // Format the string
  64:utils/irobserial.c ****     vsnprintf(fp, size, format, ap);
  65:utils/irobserial.c ****     va_end(ap);
  66:utils/irobserial.c ****     // Print the string
  67:utils/irobserial.c ****     irobprint(fp);
  68:utils/irobserial.c **** }
 286               	.LM20:
 287 0092 EDB6      		in r14,__SP_L__
 288 0094 FEB6      		in r15,__SP_H__
  59:utils/irobserial.c ****     char formatted[size];
 290               	.LM21:
 291 0096 8DB7      		in r24,__SP_L__
 292 0098 9EB7      		in r25,__SP_H__
 293 009a 861B      		sub r24,r22
 294 009c 970B      		sbc r25,r23
 295 009e 0FB6      		in __tmp_reg__,__SREG__
 296 00a0 F894      		cli
 297 00a2 9EBF      		out __SP_H__,r25
 298 00a4 0FBE      		out __SREG__,__tmp_reg__
 299 00a6 8DBF      		out __SP_L__,r24
 300 00a8 0DB7      		in r16,__SP_L__
 301 00aa 1EB7      		in r17,__SP_H__
 302 00ac 0F5F      		subi r16,-1
 303 00ae 1F4F      		sbci r17,-1
  64:utils/irobserial.c ****     vsnprintf(fp, size, format, ap);
 305               	.LM22:
 306 00b0 9E01      		movw r18,r28
 307 00b2 235F      		subi r18,-13
 308 00b4 3F4F      		sbci r19,-1
 309 00b6 4B85      		ldd r20,Y+11
 310 00b8 5C85      		ldd r21,Y+12
 311 00ba C801      		movw r24,r16
 312 00bc 0E94 0000 		call vsnprintf
  67:utils/irobserial.c ****     irobprint(fp);
 314               	.LM23:
 315 00c0 C801      		movw r24,r16
 316 00c2 0E94 0000 		call irobprint
 318               	.LM24:
 319 00c6 0FB6      		in __tmp_reg__,__SREG__
 320 00c8 F894      		cli
 321 00ca FEBE      		out __SP_H__,r15
 322 00cc 0FBE      		out __SREG__,__tmp_reg__
 323 00ce EDBE      		out __SP_L__,r14
 324               	/* epilogue start */
 325 00d0 DF91      		pop r29
 326 00d2 CF91      		pop r28
 327 00d4 1F91      		pop r17
 328 00d6 0F91      		pop r16
 329 00d8 FF90      		pop r15
 330 00da EF90      		pop r14
 331 00dc 0895      		ret
 334               	.Lscope5:
 335               		.comm	printfBuffer,255,1
 336               	.global	serialDestination
 337               		.data
 340               	serialDestination:
 341 0000 FF        		.byte	-1
 344               		.text
 346               	.Letext0:
 347               		.ident	"GCC: (GNU) 4.8.2"
 348               	.global __do_copy_data
 349               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 irobserial.c
     /tmp/ccaZJ11T.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccaZJ11T.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccaZJ11T.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccaZJ11T.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccaZJ11T.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccaZJ11T.s:115    .text:0000000000000000 setSerialDestination
     /tmp/ccaZJ11T.s:340    .data:0000000000000000 serialDestination
     /tmp/ccaZJ11T.s:169    .text:0000000000000034 getSerialDestination
     /tmp/ccaZJ11T.s:187    .text:000000000000003a irobprint
     /tmp/ccaZJ11T.s:224    .text:0000000000000052 irobprintf
                            *COM*:00000000000000ff printfBuffer
     /tmp/ccaZJ11T.s:267    .text:000000000000007e irobnprintf

UNDEFINED SYMBOLS
delayMs
byteTx
vsnprintf
__do_copy_data
__do_clear_bss
