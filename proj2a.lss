
proj2a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00001096  0000112a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001096  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000171  008001f0  008001f0  0000121a  2**0
                  ALLOC
  3 .stab         0000528c  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ef4  00000000  00000000  000064a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000839c  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e9       	ldi	r30, 0x96	; 150
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3f       	cpi	r26, 0xF0	; 240
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	13 e0       	ldi	r17, 0x03	; 3
      8c:	a0 ef       	ldi	r26, 0xF0	; 240
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 36       	cpi	r26, 0x61	; 97
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 14 05 	call	0xa28	; 0xa28 <main>
      9e:	0c 94 49 08 	jmp	0x1092	; 0x1092 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <iroblifePeriodic>:
#include "cmod.h"

// Called by irobPeriodic
void iroblifePeriodic(void) {
    // Switch output to USB
    setSerialDestination(SERIAL_USB);
      a6:	82 e0       	ldi	r24, 0x02	; 2
      a8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <setSerialDestination>
    // Output sensor values
    irobprintf("Charging State: %d\n", getSensorUint8(SenChargeState));
      ac:	80 e1       	ldi	r24, 0x10	; 16
      ae:	0e 94 be 04 	call	0x97c	; 0x97c <getSensorUint8>
      b2:	1f 92       	push	r1
      b4:	8f 93       	push	r24
      b6:	83 e0       	ldi	r24, 0x03	; 3
      b8:	91 e0       	ldi	r25, 0x01	; 1
      ba:	9f 93       	push	r25
      bc:	8f 93       	push	r24
      be:	0e 94 12 01 	call	0x224	; 0x224 <irobprintf>
    irobprintf("Voltage: %d\n", getSensorUint16(SenVolt1));
      c2:	81 e1       	ldi	r24, 0x11	; 17
      c4:	0e 94 ca 04 	call	0x994	; 0x994 <getSensorUint16>
      c8:	9f 93       	push	r25
      ca:	8f 93       	push	r24
      cc:	87 e1       	ldi	r24, 0x17	; 23
      ce:	91 e0       	ldi	r25, 0x01	; 1
      d0:	9f 93       	push	r25
      d2:	8f 93       	push	r24
      d4:	0e 94 12 01 	call	0x224	; 0x224 <irobprintf>
    irobprintf("Current: %d\n", getSensorInt16(SenCurr1));
      d8:	83 e1       	ldi	r24, 0x13	; 19
      da:	0e 94 d6 04 	call	0x9ac	; 0x9ac <getSensorInt16>
      de:	9f 93       	push	r25
      e0:	8f 93       	push	r24
      e2:	84 e2       	ldi	r24, 0x24	; 36
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	9f 93       	push	r25
      e8:	8f 93       	push	r24
      ea:	0e 94 12 01 	call	0x224	; 0x224 <irobprintf>
    irobprintf("Battery Temperature: %d\n", getSensorInt8(SenTemp));
      ee:	85 e1       	ldi	r24, 0x15	; 21
      f0:	0e 94 c4 04 	call	0x988	; 0x988 <getSensorInt8>
      f4:	28 2f       	mov	r18, r24
      f6:	33 27       	eor	r19, r19
      f8:	27 fd       	sbrc	r18, 7
      fa:	30 95       	com	r19
      fc:	3f 93       	push	r19
      fe:	8f 93       	push	r24
     100:	81 e3       	ldi	r24, 0x31	; 49
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	9f 93       	push	r25
     106:	8f 93       	push	r24
     108:	0e 94 12 01 	call	0x224	; 0x224 <irobprintf>
    irobprintf("Battery Charge: %d\n", getSensorUint16(SenCharge1));
     10c:	86 e1       	ldi	r24, 0x16	; 22
     10e:	0e 94 ca 04 	call	0x994	; 0x994 <getSensorUint16>
     112:	9f 93       	push	r25
     114:	8f 93       	push	r24
     116:	8a e4       	ldi	r24, 0x4A	; 74
     118:	91 e0       	ldi	r25, 0x01	; 1
     11a:	9f 93       	push	r25
     11c:	8f 93       	push	r24
     11e:	0e 94 12 01 	call	0x224	; 0x224 <irobprintf>
    irobprintf("Battery Capacity: %d\n", getSensorUint16(SenCap1));
     122:	88 e1       	ldi	r24, 0x18	; 24
     124:	0e 94 ca 04 	call	0x994	; 0x994 <getSensorUint16>
     128:	9f 93       	push	r25
     12a:	8f 93       	push	r24
     12c:	8e e5       	ldi	r24, 0x5E	; 94
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	9f 93       	push	r25
     132:	8f 93       	push	r24
     134:	0e 94 12 01 	call	0x224	; 0x224 <irobprintf>
    irobprintf("Wall Signal: %d\n", getSensorUint16(SenWallSig1));
     138:	8a e1       	ldi	r24, 0x1A	; 26
     13a:	0e 94 ca 04 	call	0x994	; 0x994 <getSensorUint16>
     13e:	9f 93       	push	r25
     140:	8f 93       	push	r24
     142:	84 e7       	ldi	r24, 0x74	; 116
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	9f 93       	push	r25
     148:	8f 93       	push	r24
     14a:	0e 94 12 01 	call	0x224	; 0x224 <irobprintf>
    irobprintf("Cliff Left Signal: %d\n", getSensorUint16(SenCliffLSig1));
     14e:	8c e1       	ldi	r24, 0x1C	; 28
     150:	0e 94 ca 04 	call	0x994	; 0x994 <getSensorUint16>
     154:	9f 93       	push	r25
     156:	8f 93       	push	r24
     158:	85 e8       	ldi	r24, 0x85	; 133
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	9f 93       	push	r25
     15e:	8f 93       	push	r24
     160:	0e 94 12 01 	call	0x224	; 0x224 <irobprintf>
    irobprintf("Cliff Front Left Signal: %d\n", getSensorUint16(SenCliffFLSig1));
     164:	8d b7       	in	r24, 0x3d	; 61
     166:	9e b7       	in	r25, 0x3e	; 62
     168:	80 96       	adiw	r24, 0x20	; 32
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	f8 94       	cli
     16e:	9e bf       	out	0x3e, r25	; 62
     170:	0f be       	out	0x3f, r0	; 63
     172:	8d bf       	out	0x3d, r24	; 61
     174:	8e e1       	ldi	r24, 0x1E	; 30
     176:	0e 94 ca 04 	call	0x994	; 0x994 <getSensorUint16>
     17a:	9f 93       	push	r25
     17c:	8f 93       	push	r24
     17e:	8c e9       	ldi	r24, 0x9C	; 156
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	9f 93       	push	r25
     184:	8f 93       	push	r24
     186:	0e 94 12 01 	call	0x224	; 0x224 <irobprintf>
    irobprintf("Cliff Front Right Signal: %d\n", getSensorUint16(SenCliffFRSig1));
     18a:	80 e2       	ldi	r24, 0x20	; 32
     18c:	0e 94 ca 04 	call	0x994	; 0x994 <getSensorUint16>
     190:	9f 93       	push	r25
     192:	8f 93       	push	r24
     194:	89 eb       	ldi	r24, 0xB9	; 185
     196:	91 e0       	ldi	r25, 0x01	; 1
     198:	9f 93       	push	r25
     19a:	8f 93       	push	r24
     19c:	0e 94 12 01 	call	0x224	; 0x224 <irobprintf>
    irobprintf("Cliff Right Signal: %d\n", getSensorUint16(SenCliffRSig1));
     1a0:	82 e2       	ldi	r24, 0x22	; 34
     1a2:	0e 94 ca 04 	call	0x994	; 0x994 <getSensorUint16>
     1a6:	9f 93       	push	r25
     1a8:	8f 93       	push	r24
     1aa:	87 ed       	ldi	r24, 0xD7	; 215
     1ac:	91 e0       	ldi	r25, 0x01	; 1
     1ae:	9f 93       	push	r25
     1b0:	8f 93       	push	r24
     1b2:	0e 94 12 01 	call	0x224	; 0x224 <irobprintf>
    // Spacing
    byteTx('\n');
     1b6:	8a e0       	ldi	r24, 0x0A	; 10
     1b8:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    // Switch output back to Create for updating sensor values
    setSerialDestination(SERIAL_CREATE);
     1bc:	8d b7       	in	r24, 0x3d	; 61
     1be:	9e b7       	in	r25, 0x3e	; 62
     1c0:	0c 96       	adiw	r24, 0x0c	; 12
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	f8 94       	cli
     1c6:	9e bf       	out	0x3e, r25	; 62
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	8d bf       	out	0x3d, r24	; 61
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <setSerialDestination>

000001d2 <setSerialDestination>:
#include "oi.h"
#include "timer.h"

uint8_t serialDestination = SERIAL_SWITCHING;

void setSerialDestination(uint8_t dest) {
     1d2:	cf 93       	push	r28
     1d4:	c8 2f       	mov	r28, r24
    serialDestination = SERIAL_SWITCHING;
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	80 93 00 01 	sts	0x0100, r24
    // Which serial port should byteTx and byteRx talk to?
    // Ensure any pending bytes have been sent. Without this, the last byte
    // sent before calling this might seem to disappear.
    delayMs(10);
     1dc:	6a e0       	ldi	r22, 0x0A	; 10
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 35 03 	call	0x66a	; 0x66a <delayMs>
    // Configure the port.
    if (dest == SERIAL_CREATE) {
     1e8:	c1 30       	cpi	r28, 0x01	; 1
     1ea:	11 f4       	brne	.+4      	; 0x1f0 <setSerialDestination+0x1e>
        PORTB &= ~0x10 ;
     1ec:	2c 98       	cbi	0x05, 4	; 5
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <setSerialDestination+0x20>
    } else {
        PORTB |= 0x10 ;
     1f0:	2c 9a       	sbi	0x05, 4	; 5
    }
    // Wait a bit to let things get back to normal. According to the docs, this
    // should be at least 10 times the amount of time needed to send one byte.
    // This is less than 1 millisecond. We are using a much longer delay to be
    // super extra sure.
    delayMs(10);
     1f2:	6a e0       	ldi	r22, 0x0A	; 10
     1f4:	70 e0       	ldi	r23, 0x00	; 0
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 35 03 	call	0x66a	; 0x66a <delayMs>
    serialDestination = dest;
     1fe:	c0 93 00 01 	sts	0x0100, r28
}
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <getSerialDestination>:

uint8_t getSerialDestination(void) {
   return serialDestination; 
}
     206:	80 91 00 01 	lds	r24, 0x0100
     20a:	08 95       	ret

0000020c <irobprint>:

void irobprint(char* str) {
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	ec 01       	movw	r28, r24
    char c;
    // Null-terminated string
    while ((c = *(str++)) != '\0') {
     212:	89 91       	ld	r24, Y+
     214:	88 23       	and	r24, r24
     216:	19 f0       	breq	.+6      	; 0x21e <irobprint+0x12>
        // Print each byte
        byteTx(c);
     218:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
     21c:	fa cf       	rjmp	.-12     	; 0x212 <irobprint+0x6>
    }
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <irobprintf>:

char printfBuffer[PRINTF_BUFFER_SIZE];

void irobprintf(const char* format, ...) {
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
     22c:	fe 01       	movw	r30, r28
     22e:	35 96       	adiw	r30, 0x05	; 5
     230:	41 91       	ld	r20, Z+
     232:	51 91       	ld	r21, Z+
    char* fp = &printfBuffer[0];
    va_list ap;
    va_start(ap, format);
    // Format the string
    vsnprintf(fp, PRINTF_BUFFER_SIZE, format, ap);
     234:	9f 01       	movw	r18, r30
     236:	6f ef       	ldi	r22, 0xFF	; 255
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	87 ef       	ldi	r24, 0xF7	; 247
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	0e 94 6e 05 	call	0xadc	; 0xadc <vsnprintf>
    va_end(ap);
    // Print the string
    irobprint(fp);
     242:	87 ef       	ldi	r24, 0xF7	; 247
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	0e 94 06 01 	call	0x20c	; 0x20c <irobprint>
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <irobnprintf>:

void irobnprintf(uint16_t size, const char* format, ...) {
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
     260:	69 85       	ldd	r22, Y+9	; 0x09
     262:	7a 85       	ldd	r23, Y+10	; 0x0a
    // Format the string
    vsnprintf(fp, size, format, ap);
    va_end(ap);
    // Print the string
    irobprint(fp);
}
     264:	ed b6       	in	r14, 0x3d	; 61
     266:	fe b6       	in	r15, 0x3e	; 62
    irobprint(fp);
}

void irobnprintf(uint16_t size, const char* format, ...) {
    // Create a buffer
    char formatted[size];
     268:	8d b7       	in	r24, 0x3d	; 61
     26a:	9e b7       	in	r25, 0x3e	; 62
     26c:	86 1b       	sub	r24, r22
     26e:	97 0b       	sbc	r25, r23
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	9e bf       	out	0x3e, r25	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	8d bf       	out	0x3d, r24	; 61
     27a:	0d b7       	in	r16, 0x3d	; 61
     27c:	1e b7       	in	r17, 0x3e	; 62
     27e:	0f 5f       	subi	r16, 0xFF	; 255
     280:	1f 4f       	sbci	r17, 0xFF	; 255
    char* fp = &formatted[0];
    va_list ap;
    va_start(ap, format);
    // Format the string
    vsnprintf(fp, size, format, ap);
     282:	9e 01       	movw	r18, r28
     284:	23 5f       	subi	r18, 0xF3	; 243
     286:	3f 4f       	sbci	r19, 0xFF	; 255
     288:	4b 85       	ldd	r20, Y+11	; 0x0b
     28a:	5c 85       	ldd	r21, Y+12	; 0x0c
     28c:	c8 01       	movw	r24, r16
     28e:	0e 94 6e 05 	call	0xadc	; 0xadc <vsnprintf>
    va_end(ap);
    // Print the string
    irobprint(fp);
     292:	c8 01       	movw	r24, r16
     294:	0e 94 06 01 	call	0x20c	; 0x20c <irobprint>
}
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	fe be       	out	0x3e, r15	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	ed be       	out	0x3d, r14	; 61
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	ff 90       	pop	r15
     2ac:	ef 90       	pop	r14
     2ae:	08 95       	ret

000002b0 <drive>:
#define PIe5            314159
#define TENTH_RADIUS    13

// # BASIC COMMANDS #

void drive(int16_t velocity, int16_t radius) {
     2b0:	1f 93       	push	r17
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <drive+0x8>
     2b8:	1f 92       	push	r1
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	18 2f       	mov	r17, r24
    // Send the start driving command to the Create
    byteTx(CmdDrive);
     2c0:	89 e8       	ldi	r24, 0x89	; 137
     2c2:	6b 83       	std	Y+3, r22	; 0x03
     2c4:	7a 83       	std	Y+2, r23	; 0x02
     2c6:	99 83       	std	Y+1, r25	; 0x01
     2c8:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    byteTx((uint8_t)((velocity >> 8) & 0x00FF));
     2cc:	99 81       	ldd	r25, Y+1	; 0x01
     2ce:	89 2f       	mov	r24, r25
     2d0:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    byteTx((uint8_t)(velocity & 0x00FF));
     2d4:	81 2f       	mov	r24, r17
     2d6:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    byteTx((uint8_t)((radius >> 8) & 0x00FF));
     2da:	7a 81       	ldd	r23, Y+2	; 0x02
     2dc:	87 2f       	mov	r24, r23
     2de:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    byteTx((uint8_t)(radius & 0x00FF));
     2e2:	6b 81       	ldd	r22, Y+3	; 0x03
     2e4:	86 2f       	mov	r24, r22
}
     2e6:	0f 90       	pop	r0
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
    // Send the start driving command to the Create
    byteTx(CmdDrive);
    byteTx((uint8_t)((velocity >> 8) & 0x00FF));
    byteTx((uint8_t)(velocity & 0x00FF));
    byteTx((uint8_t)((radius >> 8) & 0x00FF));
    byteTx((uint8_t)(radius & 0x00FF));
     2f2:	0c 94 cd 03 	jmp	0x79a	; 0x79a <byteTx>

000002f6 <driveStop>:
}

void driveStop(void) {
    drive(0, RadStraight);
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	70 e8       	ldi	r23, 0x80	; 128
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <drive>

00000302 <driveDistanceOp>:
}


// # OPCODE-BASED COMMANDS #

void driveDistanceOp(int16_t velocity, int16_t distance) {
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	eb 01       	movw	r28, r22
    // Start driving
    drive(velocity, RadStraight);
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 e8       	ldi	r23, 0x80	; 128
     30c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <drive>
    // Halt execution of new commands on the Create until reached distance
    byteTx(WaitForDistance);
     310:	8c e9       	ldi	r24, 0x9C	; 156
     312:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    byteTx((uint8_t)((distance >> 8) & 0x00FF));
     316:	8d 2f       	mov	r24, r29
     318:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    byteTx((uint8_t)(distance & 0x00FF));
     31c:	8c 2f       	mov	r24, r28
     31e:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    // Stop the Create
    driveStop();
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
    // Halt execution of new commands on the Create until reached distance
    byteTx(WaitForDistance);
    byteTx((uint8_t)((distance >> 8) & 0x00FF));
    byteTx((uint8_t)(distance & 0x00FF));
    // Stop the Create
    driveStop();
     326:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <driveStop>

0000032a <driveAngleOp>:
}

void driveAngleOp(int16_t velocity, int16_t radius, int16_t angle) {
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	ea 01       	movw	r28, r20
    // Wait for angle opcode compatibility
    if (radius == RadCW) {
     330:	6f 3f       	cpi	r22, 0xFF	; 255
     332:	2f ef       	ldi	r18, 0xFF	; 255
     334:	72 07       	cpc	r23, r18
     336:	19 f4       	brne	.+6      	; 0x33e <driveAngleOp+0x14>
        angle = -angle;
     338:	d1 95       	neg	r29
     33a:	c1 95       	neg	r28
     33c:	d1 09       	sbc	r29, r1
    }
    // Start driving
    drive(velocity, radius);
     33e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <drive>
    // Halt execution of new commands on the Create until reached angle
    byteTx(WaitForAngle);
     342:	8d e9       	ldi	r24, 0x9D	; 157
     344:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    byteTx((uint8_t)((angle >> 8) & 0x00FF));
     348:	8d 2f       	mov	r24, r29
     34a:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    byteTx((uint8_t)(angle & 0x00FF));
     34e:	8c 2f       	mov	r24, r28
     350:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    // Stop the Create
    driveStop();
}
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
    // Halt execution of new commands on the Create until reached angle
    byteTx(WaitForAngle);
    byteTx((uint8_t)((angle >> 8) & 0x00FF));
    byteTx((uint8_t)(angle & 0x00FF));
    // Stop the Create
    driveStop();
     358:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <driveStop>

0000035c <driveDistanceTFunc>:


// # TIMER-BASED COMMANDS #

void driveDistanceTFunc(int16_t velocity, int16_t distance, void (*func)(void),
        uint16_t period_ms, uint16_t cutoff_ms) {
     35c:	8f 92       	push	r8
     35e:	9f 92       	push	r9
     360:	af 92       	push	r10
     362:	bf 92       	push	r11
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	ec 01       	movw	r28, r24
     376:	7a 01       	movw	r14, r20
     378:	69 01       	movw	r12, r18
    // Calculate the delay
    uint32_t time_ms = (1000 * (uint32_t)distance) / (uint32_t)velocity;
     37a:	28 ee       	ldi	r18, 0xE8	; 232
     37c:	33 e0       	ldi	r19, 0x03	; 3
     37e:	db 01       	movw	r26, r22
     380:	0e 94 23 05 	call	0xa46	; 0xa46 <__usmulhisi3>
     384:	9e 01       	movw	r18, r28
     386:	44 27       	eor	r20, r20
     388:	37 fd       	sbrc	r19, 7
     38a:	40 95       	com	r20
     38c:	54 2f       	mov	r21, r20
     38e:	0e 94 32 05 	call	0xa64	; 0xa64 <__udivmodsi4>
     392:	49 01       	movw	r8, r18
     394:	5a 01       	movw	r10, r20
    // Start driving
    drive(velocity, RadStraight);
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	70 e8       	ldi	r23, 0x80	; 128
     39a:	ce 01       	movw	r24, r28
     39c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <drive>
    // Wait delay
    delayMsFunc(time_ms, func, period_ms, cutoff_ms);
     3a0:	96 01       	movw	r18, r12
     3a2:	a7 01       	movw	r20, r14
     3a4:	c5 01       	movw	r24, r10
     3a6:	b4 01       	movw	r22, r8
     3a8:	0e 94 45 03 	call	0x68a	; 0x68a <delayMsFunc>
    // Stop the Create
    driveStop();
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	df 90       	pop	r13
     3ba:	cf 90       	pop	r12
     3bc:	bf 90       	pop	r11
     3be:	af 90       	pop	r10
     3c0:	9f 90       	pop	r9
     3c2:	8f 90       	pop	r8
    // Start driving
    drive(velocity, RadStraight);
    // Wait delay
    delayMsFunc(time_ms, func, period_ms, cutoff_ms);
    // Stop the Create
    driveStop();
     3c4:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <driveStop>

000003c8 <driveAngleTFunc>:
}

void driveAngleTFunc(int16_t velocity, int16_t radius, int16_t angle,
        void (*func)(void), uint16_t period_ms, uint16_t cutoff_ms) {
     3c8:	4f 92       	push	r4
     3ca:	5f 92       	push	r5
     3cc:	6f 92       	push	r6
     3ce:	7f 92       	push	r7
     3d0:	8f 92       	push	r8
     3d2:	9f 92       	push	r9
     3d4:	af 92       	push	r10
     3d6:	bf 92       	push	r11
     3d8:	cf 92       	push	r12
     3da:	df 92       	push	r13
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	ec 01       	movw	r28, r24
     3ea:	4b 01       	movw	r8, r22
     3ec:	69 01       	movw	r12, r18
     3ee:	58 01       	movw	r10, r16
     3f0:	87 01       	movw	r16, r14
    // Calculate the delay
    uint32_t time_ms = (PIe5 * TENTH_RADIUS * (uint32_t)angle)
     3f2:	da 01       	movw	r26, r20
     3f4:	23 e6       	ldi	r18, 0x63	; 99
     3f6:	31 e5       	ldi	r19, 0x51	; 81
     3f8:	4e e3       	ldi	r20, 0x3E	; 62
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	0e 94 2a 05 	call	0xa54	; 0xa54 <__mulshisi3>
     400:	2b 01       	movw	r4, r22
     402:	3c 01       	movw	r6, r24
        / (1800 * (uint32_t)velocity);
     404:	28 e0       	ldi	r18, 0x08	; 8
     406:	37 e0       	ldi	r19, 0x07	; 7
     408:	de 01       	movw	r26, r28
     40a:	0e 94 23 05 	call	0xa46	; 0xa46 <__usmulhisi3>
     40e:	9b 01       	movw	r18, r22
     410:	ac 01       	movw	r20, r24
}

void driveAngleTFunc(int16_t velocity, int16_t radius, int16_t angle,
        void (*func)(void), uint16_t period_ms, uint16_t cutoff_ms) {
    // Calculate the delay
    uint32_t time_ms = (PIe5 * TENTH_RADIUS * (uint32_t)angle)
     412:	c3 01       	movw	r24, r6
     414:	b2 01       	movw	r22, r4
     416:	0e 94 32 05 	call	0xa64	; 0xa64 <__udivmodsi4>
     41a:	29 01       	movw	r4, r18
     41c:	3a 01       	movw	r6, r20
        / (1800 * (uint32_t)velocity);
    // Start driving
    drive(velocity, radius);
     41e:	b4 01       	movw	r22, r8
     420:	ce 01       	movw	r24, r28
     422:	0e 94 58 01 	call	0x2b0	; 0x2b0 <drive>
    // Wait delay
    delayMsFunc(time_ms, func, period_ms, cutoff_ms);
     426:	95 01       	movw	r18, r10
     428:	a6 01       	movw	r20, r12
     42a:	c3 01       	movw	r24, r6
     42c:	b2 01       	movw	r22, r4
     42e:	0e 94 45 03 	call	0x68a	; 0x68a <delayMsFunc>
    // Stop the Create
    driveStop();
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	ef 90       	pop	r14
     43e:	df 90       	pop	r13
     440:	cf 90       	pop	r12
     442:	bf 90       	pop	r11
     444:	af 90       	pop	r10
     446:	9f 90       	pop	r9
     448:	8f 90       	pop	r8
     44a:	7f 90       	pop	r7
     44c:	6f 90       	pop	r6
     44e:	5f 90       	pop	r5
     450:	4f 90       	pop	r4
    // Start driving
    drive(velocity, radius);
    // Wait delay
    delayMsFunc(time_ms, func, period_ms, cutoff_ms);
    // Stop the Create
    driveStop();
     452:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <driveStop>

00000456 <defineSongs>:
#include "timer.h"

// Define songs to be played later
void defineSongs(void) {
  // Reset song
  byteTx(CmdSong);
     456:	8c e8       	ldi	r24, 0x8C	; 140
     458:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(RESET_SONG);
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(4);
     462:	84 e0       	ldi	r24, 0x04	; 4
     464:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(60);
     468:	8c e3       	ldi	r24, 0x3C	; 60
     46a:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(6);
     46e:	86 e0       	ldi	r24, 0x06	; 6
     470:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(72);
     474:	88 e4       	ldi	r24, 0x48	; 72
     476:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(6);
     47a:	86 e0       	ldi	r24, 0x06	; 6
     47c:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(84);
     480:	84 e5       	ldi	r24, 0x54	; 84
     482:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(6);
     486:	86 e0       	ldi	r24, 0x06	; 6
     488:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(96);
     48c:	80 e6       	ldi	r24, 0x60	; 96
     48e:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(6);
     492:	86 e0       	ldi	r24, 0x06	; 6
     494:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>

  // Start song
  byteTx(CmdSong);
     498:	8c e8       	ldi	r24, 0x8C	; 140
     49a:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(START_SONG);
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(6);
     4a4:	86 e0       	ldi	r24, 0x06	; 6
     4a6:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(69);
     4aa:	85 e4       	ldi	r24, 0x45	; 69
     4ac:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(18);
     4b0:	82 e1       	ldi	r24, 0x12	; 18
     4b2:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(72);
     4b6:	88 e4       	ldi	r24, 0x48	; 72
     4b8:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(12);
     4bc:	8c e0       	ldi	r24, 0x0C	; 12
     4be:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(74);
     4c2:	8a e4       	ldi	r24, 0x4A	; 74
     4c4:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(12);
     4c8:	8c e0       	ldi	r24, 0x0C	; 12
     4ca:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(72);
     4ce:	88 e4       	ldi	r24, 0x48	; 72
     4d0:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(12);
     4d4:	8c e0       	ldi	r24, 0x0C	; 12
     4d6:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(69);
     4da:	85 e4       	ldi	r24, 0x45	; 69
     4dc:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(12);
     4e0:	8c e0       	ldi	r24, 0x0C	; 12
     4e2:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(77);
     4e6:	8d e4       	ldi	r24, 0x4D	; 77
     4e8:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
  byteTx(24);
     4ec:	88 e1       	ldi	r24, 0x18	; 24
     4ee:	0c 94 cd 03 	jmp	0x79a	; 0x79a <byteTx>

000004f2 <powerOnRobot>:
}

// Ensure that the robot is On.
void powerOnRobot(void) {
  // If Create's power is off, turn it on
  if(!RobotIsOn) {
     4f2:	1d 99       	sbic	0x03, 5	; 3
     4f4:	18 c0       	rjmp	.+48     	; 0x526 <__stack+0x27>
    while(!RobotIsOn) {
     4f6:	1d 99       	sbic	0x03, 5	; 3
     4f8:	10 c0       	rjmp	.+32     	; 0x51a <__stack+0x1b>
      RobotPwrToggleLow;
     4fa:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
     4fc:	64 ef       	ldi	r22, 0xF4	; 244
     4fe:	71 e0       	ldi	r23, 0x01	; 1
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 35 03 	call	0x66a	; 0x66a <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
     508:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
     50a:	64 e6       	ldi	r22, 0x64	; 100
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 35 03 	call	0x66a	; 0x66a <delayMs>
      RobotPwrToggleLow;
     516:	5f 98       	cbi	0x0b, 7	; 11
     518:	ee cf       	rjmp	.-36     	; 0x4f6 <powerOnRobot+0x4>
    }
    delayMs(3500);  // Delay for startup
     51a:	6c ea       	ldi	r22, 0xAC	; 172
     51c:	7d e0       	ldi	r23, 0x0D	; 13
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 35 03 	call	0x66a	; 0x66a <delayMs>
  }

  // Flush the buffer
  while( (UCSR0A & 0x80) && UDR0);
     526:	80 91 c0 00 	lds	r24, 0x00C0
     52a:	87 ff       	sbrs	r24, 7
     52c:	04 c0       	rjmp	.+8      	; 0x536 <__stack+0x37>
     52e:	80 91 c6 00 	lds	r24, 0x00C6
     532:	81 11       	cpse	r24, r1
     534:	f8 cf       	rjmp	.-16     	; 0x526 <__stack+0x27>
     536:	08 95       	ret

00000538 <powerOffRobot>:
}

// Ensure that the robot is OFF.
void powerOffRobot(void) {
  // If Create's power is on, turn it off
  if(RobotIsOn) {
     538:	1d 9b       	sbis	0x03, 5	; 3
     53a:	08 95       	ret
    while(RobotIsOn) {
     53c:	1d 9b       	sbis	0x03, 5	; 3
     53e:	10 c0       	rjmp	.+32     	; 0x560 <powerOffRobot+0x28>
      RobotPwrToggleLow;
     540:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
     542:	64 ef       	ldi	r22, 0xF4	; 244
     544:	71 e0       	ldi	r23, 0x01	; 1
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 35 03 	call	0x66a	; 0x66a <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
     54e:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
     550:	64 e6       	ldi	r22, 0x64	; 100
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 35 03 	call	0x66a	; 0x66a <delayMs>
      RobotPwrToggleLow;
     55c:	5f 98       	cbi	0x0b, 7	; 11
     55e:	ee cf       	rjmp	.-36     	; 0x53c <powerOffRobot+0x4>
     560:	08 95       	ret

00000562 <irobledUpdate>:
    irobledUpdate();
}

void irobledUpdate(void) {
    // Send the led command using the current state
    byteTx(CmdLeds);
     562:	8b e8       	ldi	r24, 0x8B	; 139
     564:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    byteTx(iroblibState.bits);
     568:	80 91 f6 02 	lds	r24, 0x02F6
     56c:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    byteTx(iroblibState.color);
     570:	80 91 f7 02 	lds	r24, 0x02F7
     574:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    byteTx(iroblibState.intensity); 
     578:	80 91 f8 02 	lds	r24, 0x02F8
     57c:	0c 94 cd 03 	jmp	0x79a	; 0x79a <byteTx>

00000580 <irobledCmd>:
    uint8_t intensity;
} iroblibState;

void irobledCmd(uint8_t bits, uint8_t color, uint8_t intensity) {
    // Modify the state
    iroblibState.bits = bits;
     580:	80 93 f6 02 	sts	0x02F6, r24
    iroblibState.color = color;
     584:	60 93 f7 02 	sts	0x02F7, r22
    iroblibState.intensity = intensity;
     588:	40 93 f8 02 	sts	0x02F8, r20
    // Update
    irobledUpdate();
     58c:	0c 94 b1 02 	jmp	0x562	; 0x562 <irobledUpdate>

00000590 <irobledInit>:
    uint8_t intensity;
} iroblibState;

void irobledCmd(uint8_t bits, uint8_t color, uint8_t intensity) {
    // Modify the state
    iroblibState.bits = bits;
     590:	10 92 f6 02 	sts	0x02F6, r1
    iroblibState.color = color;
     594:	80 e4       	ldi	r24, 0x40	; 64
     596:	80 93 f7 02 	sts	0x02F7, r24
    iroblibState.intensity = intensity;
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	80 93 f8 02 	sts	0x02F8, r24
    // Update
    irobledUpdate();
     5a0:	0c 94 b1 02 	jmp	0x562	; 0x562 <irobledUpdate>

000005a4 <powerLedSet>:
} iroblibState;

void irobledCmd(uint8_t bits, uint8_t color, uint8_t intensity) {
    // Modify the state
    iroblibState.bits = bits;
    iroblibState.color = color;
     5a4:	80 93 f7 02 	sts	0x02F7, r24
    iroblibState.intensity = intensity;
     5a8:	60 93 f8 02 	sts	0x02F8, r22
    // Update
    irobledUpdate();
     5ac:	0c 94 b1 02 	jmp	0x562	; 0x562 <irobledUpdate>

000005b0 <robotLedSetBits>:
void powerLedSet(uint8_t color, uint8_t intensity) {
    irobledCmd(iroblibState.bits, color, intensity);
}

void robotLedSetBits(uint8_t bits) {
    iroblibState.bits = bits;
     5b0:	80 93 f6 02 	sts	0x02F6, r24
    irobledUpdate();
     5b4:	0c 94 b1 02 	jmp	0x562	; 0x562 <irobledUpdate>

000005b8 <robotLedOn>:
}

void robotLedOn(uint8_t led) {
    iroblibState.bits |= led;
     5b8:	e6 ef       	ldi	r30, 0xF6	; 246
     5ba:	f2 e0       	ldi	r31, 0x02	; 2
     5bc:	90 81       	ld	r25, Z
     5be:	98 2b       	or	r25, r24
     5c0:	90 83       	st	Z, r25
    irobledUpdate();
     5c2:	0c 94 b1 02 	jmp	0x562	; 0x562 <irobledUpdate>

000005c6 <robotLedOff>:
}

void robotLedOff(uint8_t led) {
    iroblibState.bits &= ~led;
     5c6:	e6 ef       	ldi	r30, 0xF6	; 246
     5c8:	f2 e0       	ldi	r31, 0x02	; 2
     5ca:	80 95       	com	r24
     5cc:	90 81       	ld	r25, Z
     5ce:	89 23       	and	r24, r25
     5d0:	80 83       	st	Z, r24
    irobledUpdate();
     5d2:	0c 94 b1 02 	jmp	0x562	; 0x562 <irobledUpdate>

000005d6 <robotLedToggle>:
}

void robotLedToggle(uint8_t led) {
    iroblibState.bits ^= led;
     5d6:	e6 ef       	ldi	r30, 0xF6	; 246
     5d8:	f2 e0       	ldi	r31, 0x02	; 2
     5da:	90 81       	ld	r25, Z
     5dc:	98 27       	eor	r25, r24
     5de:	90 83       	st	Z, r25
    irobledUpdate();
     5e0:	0c 94 b1 02 	jmp	0x562	; 0x562 <irobledUpdate>

000005e4 <__vector_11>:
    // You DO NOT need it for this assignment. If i feel it 
    // becomes relevant, I will show you how/when to use it.
}*/

//SIGNAL(SIG_OUTPUT_COMPARE1A)
ISR(TIMER1_COMPA_vect) {
     5e4:	1f 92       	push	r1
     5e6:	0f 92       	push	r0
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	0f 92       	push	r0
     5ec:	11 24       	eor	r1, r1
     5ee:	8f 93       	push	r24
     5f0:	9f 93       	push	r25
     5f2:	af 93       	push	r26
     5f4:	bf 93       	push	r27
    // Interrupt handler called every 1ms.
    // Decrement the counter variable, to allow delayMs to keep time.
    if(delayTimerCount != 0) {
     5f6:	80 91 f1 01 	lds	r24, 0x01F1
     5fa:	90 91 f2 01 	lds	r25, 0x01F2
     5fe:	a0 91 f3 01 	lds	r26, 0x01F3
     602:	b0 91 f4 01 	lds	r27, 0x01F4
     606:	89 2b       	or	r24, r25
     608:	8a 2b       	or	r24, r26
     60a:	8b 2b       	or	r24, r27
     60c:	a1 f0       	breq	.+40     	; 0x636 <__vector_11+0x52>
        delayTimerCount--;
     60e:	80 91 f1 01 	lds	r24, 0x01F1
     612:	90 91 f2 01 	lds	r25, 0x01F2
     616:	a0 91 f3 01 	lds	r26, 0x01F3
     61a:	b0 91 f4 01 	lds	r27, 0x01F4
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	a1 09       	sbc	r26, r1
     622:	b1 09       	sbc	r27, r1
     624:	80 93 f1 01 	sts	0x01F1, r24
     628:	90 93 f2 01 	sts	0x01F2, r25
     62c:	a0 93 f3 01 	sts	0x01F3, r26
     630:	b0 93 f4 01 	sts	0x01F4, r27
     634:	02 c0       	rjmp	.+4      	; 0x63a <__vector_11+0x56>
    } else {
        delayTimerRunning = 0;
     636:	10 92 f0 01 	sts	0x01F0, r1
    }
}
     63a:	bf 91       	pop	r27
     63c:	af 91       	pop	r26
     63e:	9f 91       	pop	r25
     640:	8f 91       	pop	r24
     642:	0f 90       	pop	r0
     644:	0f be       	out	0x3f, r0	; 63
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <setupTimer>:
    // It's probably best to treat this as a black box.
    // Basic idea: Except for the 71, these are special codes, for which details
    // appear in the ATMega168 data sheet. The 71 is a computed value, based on
    // the processor speed and the amount of "scaling" of the timer, that gives
    // us the 1ms time interval.
    TCCR1A = 0x00;
     64c:	10 92 80 00 	sts	0x0080, r1
    // TCCR1B = 0x0C;
    TCCR1B = (_BV(WGM12) | _BV(CS12));
     650:	8c e0       	ldi	r24, 0x0C	; 12
     652:	80 93 81 00 	sts	0x0081, r24
    OCR1A = 71;
     656:	87 e4       	ldi	r24, 0x47	; 71
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	90 93 89 00 	sts	0x0089, r25
     65e:	80 93 88 00 	sts	0x0088, r24
    // TIMSK1 = 0x02;
    TIMSK1 = _BV(OCIE1A);
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	80 93 6f 00 	sts	0x006F, r24
     668:	08 95       	ret

0000066a <delayMs>:
}

// Delay for the specified time in ms without updating sensor values
void delayMs(uint32_t time_ms) {
    delayTimerRunning = 1;
     66a:	21 e0       	ldi	r18, 0x01	; 1
     66c:	20 93 f0 01 	sts	0x01F0, r18
    delayTimerCount = time_ms;
     670:	60 93 f1 01 	sts	0x01F1, r22
     674:	70 93 f2 01 	sts	0x01F2, r23
     678:	80 93 f3 01 	sts	0x01F3, r24
     67c:	90 93 f4 01 	sts	0x01F4, r25
    while(delayTimerRunning) ;
     680:	80 91 f0 01 	lds	r24, 0x01F0
     684:	81 11       	cpse	r24, r1
     686:	fc cf       	rjmp	.-8      	; 0x680 <delayMs+0x16>
}
     688:	08 95       	ret

0000068a <delayMsFunc>:

void delayMsFunc(uint32_t time_ms, void (*func)(void), uint16_t period_ms,
        uint16_t cutoff_ms) {
     68a:	4f 92       	push	r4
     68c:	5f 92       	push	r5
     68e:	6f 92       	push	r6
     690:	7f 92       	push	r7
     692:	8f 92       	push	r8
     694:	9f 92       	push	r9
     696:	af 92       	push	r10
     698:	bf 92       	push	r11
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	ea 01       	movw	r28, r20
    // Initialize the conditions for the delay loop
    uint32_t lastExec = time_ms;
    uint32_t nextExec = lastExec - period_ms;
     6ac:	49 01       	movw	r8, r18
     6ae:	a1 2c       	mov	r10, r1
     6b0:	b1 2c       	mov	r11, r1
     6b2:	6b 01       	movw	r12, r22
     6b4:	7c 01       	movw	r14, r24
     6b6:	c8 18       	sub	r12, r8
     6b8:	d9 08       	sbc	r13, r9
     6ba:	ea 08       	sbc	r14, r10
     6bc:	fb 08       	sbc	r15, r11
    // Start the timer
    delayTimerRunning = 1;
     6be:	21 e0       	ldi	r18, 0x01	; 1
     6c0:	20 93 f0 01 	sts	0x01F0, r18
    delayTimerCount = time_ms;
     6c4:	60 93 f1 01 	sts	0x01F1, r22
     6c8:	70 93 f2 01 	sts	0x01F2, r23
     6cc:	80 93 f3 01 	sts	0x01F3, r24
     6d0:	90 93 f4 01 	sts	0x01F4, r25
    // Wait until the timer runs out (delayTimerCount decrements every ms)
    while(delayTimerRunning) {
        // If it's before the cutoff and time for the next execution
        if (delayTimerCount > cutoff_ms && delayTimerCount <= nextExec) {
     6d4:	28 01       	movw	r4, r16
     6d6:	61 2c       	mov	r6, r1
     6d8:	71 2c       	mov	r7, r1
    uint32_t nextExec = lastExec - period_ms;
    // Start the timer
    delayTimerRunning = 1;
    delayTimerCount = time_ms;
    // Wait until the timer runs out (delayTimerCount decrements every ms)
    while(delayTimerRunning) {
     6da:	80 91 f0 01 	lds	r24, 0x01F0
     6de:	88 23       	and	r24, r24
     6e0:	49 f1       	breq	.+82     	; 0x734 <delayMsFunc+0xaa>
        // If it's before the cutoff and time for the next execution
        if (delayTimerCount > cutoff_ms && delayTimerCount <= nextExec) {
     6e2:	80 91 f1 01 	lds	r24, 0x01F1
     6e6:	90 91 f2 01 	lds	r25, 0x01F2
     6ea:	a0 91 f3 01 	lds	r26, 0x01F3
     6ee:	b0 91 f4 01 	lds	r27, 0x01F4
     6f2:	48 16       	cp	r4, r24
     6f4:	59 06       	cpc	r5, r25
     6f6:	6a 06       	cpc	r6, r26
     6f8:	7b 06       	cpc	r7, r27
     6fa:	78 f7       	brcc	.-34     	; 0x6da <delayMsFunc+0x50>
     6fc:	80 91 f1 01 	lds	r24, 0x01F1
     700:	90 91 f2 01 	lds	r25, 0x01F2
     704:	a0 91 f3 01 	lds	r26, 0x01F3
     708:	b0 91 f4 01 	lds	r27, 0x01F4
     70c:	c8 16       	cp	r12, r24
     70e:	d9 06       	cpc	r13, r25
     710:	ea 06       	cpc	r14, r26
     712:	fb 06       	cpc	r15, r27
     714:	10 f3       	brcs	.-60     	; 0x6da <delayMsFunc+0x50>
            // Execute the function
            lastExec = delayTimerCount;
     716:	c0 90 f1 01 	lds	r12, 0x01F1
     71a:	d0 90 f2 01 	lds	r13, 0x01F2
     71e:	e0 90 f3 01 	lds	r14, 0x01F3
     722:	f0 90 f4 01 	lds	r15, 0x01F4
            nextExec = lastExec - period_ms;
     726:	c8 18       	sub	r12, r8
     728:	d9 08       	sbc	r13, r9
     72a:	ea 08       	sbc	r14, r10
     72c:	fb 08       	sbc	r15, r11
            func();
     72e:	fe 01       	movw	r30, r28
     730:	09 95       	icall
     732:	d3 cf       	rjmp	.-90     	; 0x6da <delayMsFunc+0x50>
        }
    }
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	cf 90       	pop	r12
     744:	bf 90       	pop	r11
     746:	af 90       	pop	r10
     748:	9f 90       	pop	r9
     74a:	8f 90       	pop	r8
     74c:	7f 90       	pop	r7
     74e:	6f 90       	pop	r6
     750:	5f 90       	pop	r5
     752:	4f 90       	pop	r4
     754:	08 95       	ret

00000756 <setupIOPins>:
  sei();
}

void setupIOPins(void) {
  // Set I/O pins
  DDRB  = 0x10;
     756:	80 e1       	ldi	r24, 0x10	; 16
     758:	84 b9       	out	0x04, r24	; 4
  PORTB = 0xCF;
     75a:	8f ec       	ldi	r24, 0xCF	; 207
     75c:	85 b9       	out	0x05, r24	; 5
  DDRC  = 0x00;
     75e:	17 b8       	out	0x07, r1	; 7
  PORTC = 0xFF;
     760:	8f ef       	ldi	r24, 0xFF	; 255
     762:	88 b9       	out	0x08, r24	; 8
  DDRD  = 0xE6;
     764:	86 ee       	ldi	r24, 0xE6	; 230
     766:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x7D;
     768:	8d e7       	ldi	r24, 0x7D	; 125
     76a:	8b b9       	out	0x0b, r24	; 11
     76c:	08 95       	ret

0000076e <setupSerialPort>:
}

void setupSerialPort(void) {
  // Set the transmission speed to 57600 baud, which is what the Create expects,
  // unless we tell it otherwise.
  UBRR0 = 19;
     76e:	83 e1       	ldi	r24, 0x13	; 19
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	90 93 c5 00 	sts	0x00C5, r25
     776:	80 93 c4 00 	sts	0x00C4, r24
  
  // Enable both transmit and receive.
  UCSR0B = (_BV(RXCIE0) | _BV(TXEN0) | _BV(RXEN0));
     77a:	88 e9       	ldi	r24, 0x98	; 152
     77c:	80 93 c1 00 	sts	0x00C1, r24
    // UCSR0B = 0x18;
  
  // Set 8-bit data.
  UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));
     780:	86 e0       	ldi	r24, 0x06	; 6
     782:	80 93 c2 00 	sts	0x00C2, r24
     786:	08 95       	ret

00000788 <initializeCommandModule>:
#include "oi.h"
#include "timer.h"

void initializeCommandModule(void){
  // Disable interrupts. ("Clear interrupt bit")
  cli();
     788:	f8 94       	cli

  // One-time setup operations.
  setupIOPins();
     78a:	0e 94 ab 03 	call	0x756	; 0x756 <setupIOPins>
  setupTimer();
     78e:	0e 94 26 03 	call	0x64c	; 0x64c <setupTimer>
  setupSerialPort();
     792:	0e 94 b7 03 	call	0x76e	; 0x76e <setupSerialPort>

  // Enable interrupts. ("Set interrupt bit")
  sei();
     796:	78 94       	sei
     798:	08 95       	ret

0000079a <byteTx>:
}

void byteTx(uint8_t value) {
  // Transmit one byte to the robot.
  // Wait for the buffer to be empty.
  while(!(UCSR0A & 0x20)) ;
     79a:	90 91 c0 00 	lds	r25, 0x00C0
     79e:	95 ff       	sbrs	r25, 5
     7a0:	fc cf       	rjmp	.-8      	; 0x79a <byteTx>

  // Send the byte.
  UDR0 = value;
     7a2:	80 93 c6 00 	sts	0x00C6, r24
     7a6:	08 95       	ret

000007a8 <byteRx>:

uint8_t byteRx(void) {
  // Receive one byte from the robot.
  // Call setupSerialPort() first.
  // Wait for a byte to arrive in the recieve buffer.
  while(!(UCSR0A & 0x80)) ;
     7a8:	80 91 c0 00 	lds	r24, 0x00C0
     7ac:	87 ff       	sbrs	r24, 7
     7ae:	fc cf       	rjmp	.-8      	; 0x7a8 <byteRx>
  
  // Return that byte.
  return UDR0;
     7b0:	80 91 c6 00 	lds	r24, 0x00C6
}
     7b4:	08 95       	ret

000007b6 <baud>:

void baud(uint8_t baud_code) {
     7b6:	cf 93       	push	r28
     7b8:	c8 2f       	mov	r28, r24
  // Switch the baud rate on both Create and module
  if(baud_code <= 11)
     7ba:	8c 30       	cpi	r24, 0x0C	; 12
     7bc:	08 f0       	brcs	.+2      	; 0x7c0 <baud+0xa>
     7be:	55 c0       	rjmp	.+170    	; 0x86a <baud+0xb4>
  {
    byteTx(CmdBaud);
     7c0:	81 e8       	ldi	r24, 0x81	; 129
     7c2:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    UCSR0A |= _BV(TXC0);
     7c6:	80 91 c0 00 	lds	r24, 0x00C0
     7ca:	80 64       	ori	r24, 0x40	; 64
     7cc:	80 93 c0 00 	sts	0x00C0, r24
    byteTx(baud_code);
     7d0:	8c 2f       	mov	r24, r28
     7d2:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    // Wait until transmit is complete
    while(!(UCSR0A & _BV(TXC0))) ;
     7d6:	80 91 c0 00 	lds	r24, 0x00C0
     7da:	86 ff       	sbrs	r24, 6
     7dc:	fc cf       	rjmp	.-8      	; 0x7d6 <baud+0x20>

    cli();
     7de:	f8 94       	cli

    // Switch the baud rate register
    if(baud_code == Baud115200) {
     7e0:	cb 30       	cpi	r28, 0x0B	; 11
     7e2:	19 f4       	brne	.+6      	; 0x7ea <baud+0x34>
      UBRR0 = Ubrr115200;
     7e4:	89 e0       	ldi	r24, 0x09	; 9
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	34 c0       	rjmp	.+104    	; 0x852 <baud+0x9c>
    } else if(baud_code == Baud57600) {
     7ea:	ca 30       	cpi	r28, 0x0A	; 10
     7ec:	19 f4       	brne	.+6      	; 0x7f4 <baud+0x3e>
      UBRR0 = Ubrr57600;
     7ee:	83 e1       	ldi	r24, 0x13	; 19
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	2f c0       	rjmp	.+94     	; 0x852 <baud+0x9c>
    } else if(baud_code == Baud38400) {
     7f4:	c9 30       	cpi	r28, 0x09	; 9
     7f6:	19 f4       	brne	.+6      	; 0x7fe <baud+0x48>
      UBRR0 = Ubrr38400;
     7f8:	8d e1       	ldi	r24, 0x1D	; 29
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	2a c0       	rjmp	.+84     	; 0x852 <baud+0x9c>
    } else if(baud_code == Baud28800) {
     7fe:	c8 30       	cpi	r28, 0x08	; 8
     800:	19 f4       	brne	.+6      	; 0x808 <baud+0x52>
      UBRR0 = Ubrr28800;
     802:	87 e2       	ldi	r24, 0x27	; 39
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	25 c0       	rjmp	.+74     	; 0x852 <baud+0x9c>
    } else if(baud_code == Baud19200) {
     808:	c7 30       	cpi	r28, 0x07	; 7
     80a:	19 f4       	brne	.+6      	; 0x812 <baud+0x5c>
      UBRR0 = Ubrr19200;
     80c:	8b e3       	ldi	r24, 0x3B	; 59
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	20 c0       	rjmp	.+64     	; 0x852 <baud+0x9c>
    } else if(baud_code == Baud14400) {
     812:	c6 30       	cpi	r28, 0x06	; 6
     814:	19 f4       	brne	.+6      	; 0x81c <baud+0x66>
      UBRR0 = Ubrr14400;
     816:	8f e4       	ldi	r24, 0x4F	; 79
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	1b c0       	rjmp	.+54     	; 0x852 <baud+0x9c>
    } else if(baud_code == Baud9600) {
     81c:	c5 30       	cpi	r28, 0x05	; 5
     81e:	19 f4       	brne	.+6      	; 0x826 <baud+0x70>
      UBRR0 = Ubrr9600;
     820:	87 e7       	ldi	r24, 0x77	; 119
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	16 c0       	rjmp	.+44     	; 0x852 <baud+0x9c>
    } else if(baud_code == Baud4800) {
     826:	c4 30       	cpi	r28, 0x04	; 4
     828:	19 f4       	brne	.+6      	; 0x830 <baud+0x7a>
      UBRR0 = Ubrr4800;
     82a:	8f ee       	ldi	r24, 0xEF	; 239
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	11 c0       	rjmp	.+34     	; 0x852 <baud+0x9c>
    } else if(baud_code == Baud2400) {
     830:	c3 30       	cpi	r28, 0x03	; 3
     832:	19 f4       	brne	.+6      	; 0x83a <baud+0x84>
      UBRR0 = Ubrr2400;
     834:	8f ed       	ldi	r24, 0xDF	; 223
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0c c0       	rjmp	.+24     	; 0x852 <baud+0x9c>
    } else if(baud_code == Baud1200) {
     83a:	c2 30       	cpi	r28, 0x02	; 2
     83c:	19 f4       	brne	.+6      	; 0x844 <baud+0x8e>
      UBRR0 = Ubrr1200;
     83e:	8f eb       	ldi	r24, 0xBF	; 191
     840:	93 e0       	ldi	r25, 0x03	; 3
     842:	07 c0       	rjmp	.+14     	; 0x852 <baud+0x9c>
    } else if(baud_code == Baud600) {
     844:	c1 30       	cpi	r28, 0x01	; 1
     846:	19 f4       	brne	.+6      	; 0x84e <baud+0x98>
      UBRR0 = Ubrr600;
     848:	8f e7       	ldi	r24, 0x7F	; 127
     84a:	97 e0       	ldi	r25, 0x07	; 7
     84c:	02 c0       	rjmp	.+4      	; 0x852 <baud+0x9c>
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	9e e0       	ldi	r25, 0x0E	; 14
     852:	90 93 c5 00 	sts	0x00C5, r25
     856:	80 93 c4 00 	sts	0x00C4, r24
    }
    sei();
     85a:	78 94       	sei

    delayMs(100);
     85c:	64 e6       	ldi	r22, 0x64	; 100
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     864:	cf 91       	pop	r28
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
    }
    sei();

    delayMs(100);
     866:	0c 94 35 03 	jmp	0x66a	; 0x66a <delayMs>
  }
}
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <requestPacket>:
volatile uint8_t usartActive = 0;
volatile uint8_t sensorIndex = 0;
volatile uint8_t sensorBuffer[Sen6Size];
volatile uint8_t sensors[Sen6Size];

void requestPacket(uint8_t packetId) {
     86e:	cf 93       	push	r28
     870:	c8 2f       	mov	r28, r24
    byteTx(CmdSensors);
     872:	8e e8       	ldi	r24, 0x8E	; 142
     874:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    byteTx(packetId);
     878:	8c 2f       	mov	r24, r28
}
     87a:	cf 91       	pop	r28
volatile uint8_t sensorBuffer[Sen6Size];
volatile uint8_t sensors[Sen6Size];

void requestPacket(uint8_t packetId) {
    byteTx(CmdSensors);
    byteTx(packetId);
     87c:	0c 94 cd 03 	jmp	0x79a	; 0x79a <byteTx>

00000880 <updateSensors>:
    }
}

void updateSensors(void) {
    // Don't do anything if sensors are still coming in
    if (!usartActive) {
     880:	80 91 f6 01 	lds	r24, 0x01F6
     884:	81 11       	cpse	r24, r1
     886:	16 c0       	rjmp	.+44     	; 0x8b4 <updateSensors+0x34>
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
        uint8_t i;
        for (i = 0; i < Sen6Size; i++) {
            // Copy in the sensor buffer so the most recent data is available
            sensors[i] = sensorBuffer[i];
     88c:	fc 01       	movw	r30, r24
     88e:	e7 50       	subi	r30, 0x07	; 7
     890:	fd 4f       	sbci	r31, 0xFD	; 253
     892:	20 81       	ld	r18, Z
     894:	fc 01       	movw	r30, r24
     896:	e3 5d       	subi	r30, 0xD3	; 211
     898:	fc 4f       	sbci	r31, 0xFC	; 252
     89a:	20 83       	st	Z, r18
     89c:	01 96       	adiw	r24, 0x01	; 1

void updateSensors(void) {
    // Don't do anything if sensors are still coming in
    if (!usartActive) {
        uint8_t i;
        for (i = 0; i < Sen6Size; i++) {
     89e:	84 33       	cpi	r24, 0x34	; 52
     8a0:	91 05       	cpc	r25, r1
     8a2:	a1 f7       	brne	.-24     	; 0x88c <updateSensors+0xc>
            // Copy in the sensor buffer so the most recent data is available
            sensors[i] = sensorBuffer[i];
        }
        // Bookkeeping
        sensorIndex = 0;
     8a4:	10 92 f5 01 	sts	0x01F5, r1
        usartActive = 1;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 f6 01 	sts	0x01F6, r24
        // Request all sensor data
        requestPacket(PACKET_ALL);
     8ae:	86 e0       	ldi	r24, 0x06	; 6
     8b0:	0c 94 37 04 	jmp	0x86e	; 0x86e <requestPacket>
     8b4:	08 95       	ret

000008b6 <read1ByteSensorPacket>:
    byteTx(packetId);
}

uint8_t read1ByteSensorPacket(uint8_t packetId) {
    // Send the packet ID
    requestPacket(packetId);
     8b6:	0e 94 37 04 	call	0x86e	; 0x86e <requestPacket>
    // Read the packet byte
    return byteRx();
     8ba:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <byteRx>

000008be <__vector_18>:
}

ISR(USART_RX_vect) {
     8be:	1f 92       	push	r1
     8c0:	0f 92       	push	r0
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	0f 92       	push	r0
     8c6:	11 24       	eor	r1, r1
     8c8:	2f 93       	push	r18
     8ca:	3f 93       	push	r19
     8cc:	4f 93       	push	r20
     8ce:	5f 93       	push	r21
     8d0:	6f 93       	push	r22
     8d2:	7f 93       	push	r23
     8d4:	8f 93       	push	r24
     8d6:	9f 93       	push	r25
     8d8:	af 93       	push	r26
     8da:	bf 93       	push	r27
     8dc:	cf 93       	push	r28
     8de:	ef 93       	push	r30
     8e0:	ff 93       	push	r31
    // Cache the retrieved byte
    uint8_t tmpUDR0;
    tmpUDR0 = UDR0;
     8e2:	c0 91 c6 00 	lds	r28, 0x00C6
    // Don't do anything if we're not looking
    if (usartActive) {
     8e6:	80 91 f6 01 	lds	r24, 0x01F6
     8ea:	88 23       	and	r24, r24
     8ec:	19 f1       	breq	.+70     	; 0x934 <__vector_18+0x76>
        if (getSerialDestination() == SERIAL_CREATE) {
     8ee:	0e 94 03 01 	call	0x206	; 0x206 <getSerialDestination>
            // New sensor data from the create
            sensorBuffer[sensorIndex++] = tmpUDR0;
     8f2:	e0 91 f5 01 	lds	r30, 0x01F5
    // Cache the retrieved byte
    uint8_t tmpUDR0;
    tmpUDR0 = UDR0;
    // Don't do anything if we're not looking
    if (usartActive) {
        if (getSerialDestination() == SERIAL_CREATE) {
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	41 f4       	brne	.+16     	; 0x90a <__vector_18+0x4c>
            // New sensor data from the create
            sensorBuffer[sensorIndex++] = tmpUDR0;
     8fa:	8e 0f       	add	r24, r30
     8fc:	80 93 f5 01 	sts	0x01F5, r24
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	e7 50       	subi	r30, 0x07	; 7
     904:	fd 4f       	sbci	r31, 0xFD	; 253
     906:	c0 83       	st	Z, r28
     908:	0f c0       	rjmp	.+30     	; 0x928 <__vector_18+0x6a>
        } else {
            // Probably input from the computer, loop old values around
            sensorBuffer[sensorIndex] = sensors[sensorIndex];
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	a0 91 f5 01 	lds	r26, 0x01F5
     910:	b0 e0       	ldi	r27, 0x00	; 0
     912:	a3 5d       	subi	r26, 0xD3	; 211
     914:	bc 4f       	sbci	r27, 0xFC	; 252
     916:	8c 91       	ld	r24, X
     918:	e7 50       	subi	r30, 0x07	; 7
     91a:	fd 4f       	sbci	r31, 0xFD	; 253
     91c:	80 83       	st	Z, r24
            sensorIndex++;
     91e:	80 91 f5 01 	lds	r24, 0x01F5
     922:	8f 5f       	subi	r24, 0xFF	; 255
     924:	80 93 f5 01 	sts	0x01F5, r24
        }
        if (sensorIndex >= Sen6Size) {
     928:	80 91 f5 01 	lds	r24, 0x01F5
     92c:	84 33       	cpi	r24, 0x34	; 52
     92e:	10 f0       	brcs	.+4      	; 0x934 <__vector_18+0x76>
            // Reached end of sensor packet
            usartActive = 0;
     930:	10 92 f6 01 	sts	0x01F6, r1
        }
    }
}
     934:	ff 91       	pop	r31
     936:	ef 91       	pop	r30
     938:	cf 91       	pop	r28
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <waitForSensors>:
    }
}

void waitForSensors(void) {
    // Sensors data are coming in if usartActive is true
    while(usartActive);
     958:	80 91 f6 01 	lds	r24, 0x01F6
     95c:	81 11       	cpse	r24, r1
     95e:	fc cf       	rjmp	.-8      	; 0x958 <waitForSensors>
}
     960:	08 95       	ret

00000962 <delayAndUpdateSensors>:

void delayAndUpdateSensors(uint32_t time_ms) {
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
    // Update sensors while waiting
    delayMsFunc(time_ms, &updateSensors, 1, UPDATE_SENSOR_DELAY_CUTOFF);
     966:	0a e0       	ldi	r16, 0x0A	; 10
     968:	10 e0       	ldi	r17, 0x00	; 0
     96a:	21 e0       	ldi	r18, 0x01	; 1
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e4       	ldi	r20, 0x40	; 64
     970:	54 e0       	ldi	r21, 0x04	; 4
     972:	0e 94 45 03 	call	0x68a	; 0x68a <delayMsFunc>
}
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	08 95       	ret

0000097c <getSensorUint8>:

uint8_t getSensorUint8(uint8_t index) {
    // Already in the right format
    return sensors[index];
     97c:	e8 2f       	mov	r30, r24
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	e3 5d       	subi	r30, 0xD3	; 211
     982:	fc 4f       	sbci	r31, 0xFC	; 252
     984:	80 81       	ld	r24, Z
}
     986:	08 95       	ret

00000988 <getSensorInt8>:
    delayMsFunc(time_ms, &updateSensors, 1, UPDATE_SENSOR_DELAY_CUTOFF);
}

uint8_t getSensorUint8(uint8_t index) {
    // Already in the right format
    return sensors[index];
     988:	e8 2f       	mov	r30, r24
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	e3 5d       	subi	r30, 0xD3	; 211
     98e:	fc 4f       	sbci	r31, 0xFC	; 252
     990:	80 81       	ld	r24, Z

int8_t getSensorInt8(uint8_t index) {
    uint8_t x = getSensorUint8(index);
    // Convert to signed; not implementation-dependent, and optimizes away
    return x < (1 << 7) ? x : x - (1 << 8);
}
     992:	08 95       	ret

00000994 <getSensorUint16>:

uint16_t getSensorUint16(uint8_t index1) {
    // Combine msB and lsB
    return (sensors[index1] << 8) | sensors[index1 + 1];
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	fc 01       	movw	r30, r24
     998:	e3 5d       	subi	r30, 0xD3	; 211
     99a:	fc 4f       	sbci	r31, 0xFC	; 252
     99c:	20 81       	ld	r18, Z
     99e:	fc 01       	movw	r30, r24
     9a0:	e2 5d       	subi	r30, 0xD2	; 210
     9a2:	fc 4f       	sbci	r31, 0xFC	; 252
     9a4:	80 81       	ld	r24, Z
     9a6:	90 e0       	ldi	r25, 0x00	; 0
}
     9a8:	92 2b       	or	r25, r18
     9aa:	08 95       	ret

000009ac <getSensorInt16>:

int16_t getSensorInt16(uint8_t index1) {
    uint16_t x = getSensorUint16(index1);
     9ac:	0c 94 ca 04 	jmp	0x994	; 0x994 <getSensorUint16>

000009b0 <irobPeriodicImplNull>:
#include "sensing.h"
#include "irobled.h"
#include "driving.h"
#include "irobserial.h"

void irobPeriodicImplNull(void) {
     9b0:	08 95       	ret

000009b2 <setIrobPeriodicImpl>:
}

void (*irobPeriodicImpl)(void) = &irobPeriodicImplNull;

void setIrobPeriodicImpl(void (*func)(void)) {
    irobPeriodicImpl = func;
     9b2:	90 93 02 01 	sts	0x0102, r25
     9b6:	80 93 01 01 	sts	0x0101, r24
     9ba:	08 95       	ret

000009bc <irobInit>:
}

void irobInit(void) {
    // Set up Create and module
    initializeCommandModule();
     9bc:	0e 94 c4 03 	call	0x788	; 0x788 <initializeCommandModule>
    // Set Create as default serial destination
    setSerialDestination(SERIAL_CREATE);
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <setSerialDestination>
    
    // Is the Robot on
    powerOnRobot();
     9c6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <powerOnRobot>
    // Start the create
    byteTx(CmdStart);
     9ca:	80 e8       	ldi	r24, 0x80	; 128
     9cc:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    // Set the baud rate for the Create and Command Module
    baud(Baud57600);
     9d0:	8a e0       	ldi	r24, 0x0A	; 10
     9d2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <baud>
    // Define some songs so that we know the robot is on.
    defineSongs();
     9d6:	0e 94 2b 02 	call	0x456	; 0x456 <defineSongs>
    // Deprecated form of safe mode. I use it because it will
    // turn of all LEDs, so it's essentially a reset.
    byteTx(CmdControl);
     9da:	82 e8       	ldi	r24, 0x82	; 130
     9dc:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    // We are operating in FULL mode.
    byteTx(CmdFull);
     9e0:	84 e8       	ldi	r24, 0x84	; 132
     9e2:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>

    // Make sure the robot stops. 
    // As a precaution for the robot and your grade.
    driveStop();
     9e6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <driveStop>

    // Play the reset song and wait while it plays.
    byteTx(CmdPlay);
     9ea:	8d e8       	ldi	r24, 0x8D	; 141
     9ec:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    byteTx(RESET_SONG);
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 cd 03 	call	0x79a	; 0x79a <byteTx>
    delayMs(750);
     9f6:	6e ee       	ldi	r22, 0xEE	; 238
     9f8:	72 e0       	ldi	r23, 0x02	; 2
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 35 03 	call	0x66a	; 0x66a <delayMs>

    // Turn the power button on to red.
    irobledInit();
     a02:	0c 94 c8 02 	jmp	0x590	; 0x590 <irobledInit>

00000a06 <irobEnd>:
    }
}

void irobEnd(void) {
    // Stop the Create
    driveStop();
     a06:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <driveStop>
    // Power off the Create
    powerOffRobot();
     a0a:	0e 94 9c 02 	call	0x538	; 0x538 <powerOffRobot>
    // Exit the program
    exit(1);
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 49 08 	call	0x1092	; 0x1092 <_exit>

00000a16 <irobPeriodic>:
     a16:	e0 91 01 01 	lds	r30, 0x0101
     a1a:	f0 91 02 01 	lds	r31, 0x0102
     a1e:	09 95       	icall
     a20:	4c 9b       	sbis	0x09, 4	; 9
     a22:	0e 94 03 05 	call	0xa06	; 0xa06 <irobEnd>
     a26:	08 95       	ret

00000a28 <main>:
     a28:	83 e5       	ldi	r24, 0x53	; 83
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <setIrobPeriodicImpl>
     a30:	0e 94 de 04 	call	0x9bc	; 0x9bc <irobInit>
     a34:	0e 94 0b 05 	call	0xa16	; 0xa16 <irobPeriodic>
     a38:	68 ee       	ldi	r22, 0xE8	; 232
     a3a:	73 e0       	ldi	r23, 0x03	; 3
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 b1 04 	call	0x962	; 0x962 <delayAndUpdateSensors>
     a44:	f7 cf       	rjmp	.-18     	; 0xa34 <main+0xc>

00000a46 <__usmulhisi3>:
     a46:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__umulhisi3>

00000a4a <__usmulhisi3_tail>:
     a4a:	b7 ff       	sbrs	r27, 7
     a4c:	08 95       	ret
     a4e:	82 1b       	sub	r24, r18
     a50:	93 0b       	sbc	r25, r19
     a52:	08 95       	ret

00000a54 <__mulshisi3>:
     a54:	b7 ff       	sbrs	r27, 7
     a56:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__muluhisi3>

00000a5a <__mulohisi3>:
     a5a:	0e 94 63 05 	call	0xac6	; 0xac6 <__muluhisi3>
     a5e:	82 1b       	sub	r24, r18
     a60:	93 0b       	sbc	r25, r19
     a62:	08 95       	ret

00000a64 <__udivmodsi4>:
     a64:	a1 e2       	ldi	r26, 0x21	; 33
     a66:	1a 2e       	mov	r1, r26
     a68:	aa 1b       	sub	r26, r26
     a6a:	bb 1b       	sub	r27, r27
     a6c:	fd 01       	movw	r30, r26
     a6e:	0d c0       	rjmp	.+26     	; 0xa8a <__udivmodsi4_ep>

00000a70 <__udivmodsi4_loop>:
     a70:	aa 1f       	adc	r26, r26
     a72:	bb 1f       	adc	r27, r27
     a74:	ee 1f       	adc	r30, r30
     a76:	ff 1f       	adc	r31, r31
     a78:	a2 17       	cp	r26, r18
     a7a:	b3 07       	cpc	r27, r19
     a7c:	e4 07       	cpc	r30, r20
     a7e:	f5 07       	cpc	r31, r21
     a80:	20 f0       	brcs	.+8      	; 0xa8a <__udivmodsi4_ep>
     a82:	a2 1b       	sub	r26, r18
     a84:	b3 0b       	sbc	r27, r19
     a86:	e4 0b       	sbc	r30, r20
     a88:	f5 0b       	sbc	r31, r21

00000a8a <__udivmodsi4_ep>:
     a8a:	66 1f       	adc	r22, r22
     a8c:	77 1f       	adc	r23, r23
     a8e:	88 1f       	adc	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	1a 94       	dec	r1
     a94:	69 f7       	brne	.-38     	; 0xa70 <__udivmodsi4_loop>
     a96:	60 95       	com	r22
     a98:	70 95       	com	r23
     a9a:	80 95       	com	r24
     a9c:	90 95       	com	r25
     a9e:	9b 01       	movw	r18, r22
     aa0:	ac 01       	movw	r20, r24
     aa2:	bd 01       	movw	r22, r26
     aa4:	cf 01       	movw	r24, r30
     aa6:	08 95       	ret

00000aa8 <__umulhisi3>:
     aa8:	a2 9f       	mul	r26, r18
     aaa:	b0 01       	movw	r22, r0
     aac:	b3 9f       	mul	r27, r19
     aae:	c0 01       	movw	r24, r0
     ab0:	a3 9f       	mul	r26, r19
     ab2:	70 0d       	add	r23, r0
     ab4:	81 1d       	adc	r24, r1
     ab6:	11 24       	eor	r1, r1
     ab8:	91 1d       	adc	r25, r1
     aba:	b2 9f       	mul	r27, r18
     abc:	70 0d       	add	r23, r0
     abe:	81 1d       	adc	r24, r1
     ac0:	11 24       	eor	r1, r1
     ac2:	91 1d       	adc	r25, r1
     ac4:	08 95       	ret

00000ac6 <__muluhisi3>:
     ac6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__umulhisi3>
     aca:	a5 9f       	mul	r26, r21
     acc:	90 0d       	add	r25, r0
     ace:	b4 9f       	mul	r27, r20
     ad0:	90 0d       	add	r25, r0
     ad2:	a4 9f       	mul	r26, r20
     ad4:	80 0d       	add	r24, r0
     ad6:	91 1d       	adc	r25, r1
     ad8:	11 24       	eor	r1, r1
     ada:	08 95       	ret

00000adc <vsnprintf>:
     adc:	ae e0       	ldi	r26, 0x0E	; 14
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	e4 e7       	ldi	r30, 0x74	; 116
     ae2:	f5 e0       	ldi	r31, 0x05	; 5
     ae4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__prologue_saves__+0x1c>
     ae8:	8c 01       	movw	r16, r24
     aea:	ca 01       	movw	r24, r20
     aec:	46 e0       	ldi	r20, 0x06	; 6
     aee:	4c 83       	std	Y+4, r20	; 0x04
     af0:	1a 83       	std	Y+2, r17	; 0x02
     af2:	09 83       	std	Y+1, r16	; 0x01
     af4:	77 ff       	sbrs	r23, 7
     af6:	02 c0       	rjmp	.+4      	; 0xafc <vsnprintf+0x20>
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e8       	ldi	r23, 0x80	; 128
     afc:	61 50       	subi	r22, 0x01	; 1
     afe:	71 09       	sbc	r23, r1
     b00:	7e 83       	std	Y+6, r23	; 0x06
     b02:	6d 83       	std	Y+5, r22	; 0x05
     b04:	a9 01       	movw	r20, r18
     b06:	bc 01       	movw	r22, r24
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	0e 94 9a 05 	call	0xb34	; 0xb34 <vfprintf>
     b10:	4d 81       	ldd	r20, Y+5	; 0x05
     b12:	5e 81       	ldd	r21, Y+6	; 0x06
     b14:	57 fd       	sbrc	r21, 7
     b16:	0a c0       	rjmp	.+20     	; 0xb2c <vsnprintf+0x50>
     b18:	2f 81       	ldd	r18, Y+7	; 0x07
     b1a:	38 85       	ldd	r19, Y+8	; 0x08
     b1c:	42 17       	cp	r20, r18
     b1e:	53 07       	cpc	r21, r19
     b20:	0c f4       	brge	.+2      	; 0xb24 <vsnprintf+0x48>
     b22:	9a 01       	movw	r18, r20
     b24:	f8 01       	movw	r30, r16
     b26:	e2 0f       	add	r30, r18
     b28:	f3 1f       	adc	r31, r19
     b2a:	10 82       	st	Z, r1
     b2c:	2e 96       	adiw	r28, 0x0e	; 14
     b2e:	e4 e0       	ldi	r30, 0x04	; 4
     b30:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__epilogue_restores__+0x1c>

00000b34 <vfprintf>:
     b34:	ac e0       	ldi	r26, 0x0C	; 12
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	e0 ea       	ldi	r30, 0xA0	; 160
     b3a:	f5 e0       	ldi	r31, 0x05	; 5
     b3c:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__prologue_saves__>
     b40:	7c 01       	movw	r14, r24
     b42:	6b 01       	movw	r12, r22
     b44:	8a 01       	movw	r16, r20
     b46:	fc 01       	movw	r30, r24
     b48:	17 82       	std	Z+7, r1	; 0x07
     b4a:	16 82       	std	Z+6, r1	; 0x06
     b4c:	83 81       	ldd	r24, Z+3	; 0x03
     b4e:	81 ff       	sbrs	r24, 1
     b50:	bd c1       	rjmp	.+890    	; 0xecc <vfprintf+0x398>
     b52:	ce 01       	movw	r24, r28
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	4c 01       	movw	r8, r24
     b58:	f7 01       	movw	r30, r14
     b5a:	93 81       	ldd	r25, Z+3	; 0x03
     b5c:	f6 01       	movw	r30, r12
     b5e:	93 fd       	sbrc	r25, 3
     b60:	85 91       	lpm	r24, Z+
     b62:	93 ff       	sbrs	r25, 3
     b64:	81 91       	ld	r24, Z+
     b66:	6f 01       	movw	r12, r30
     b68:	88 23       	and	r24, r24
     b6a:	09 f4       	brne	.+2      	; 0xb6e <vfprintf+0x3a>
     b6c:	ab c1       	rjmp	.+854    	; 0xec4 <vfprintf+0x390>
     b6e:	85 32       	cpi	r24, 0x25	; 37
     b70:	39 f4       	brne	.+14     	; 0xb80 <vfprintf+0x4c>
     b72:	93 fd       	sbrc	r25, 3
     b74:	85 91       	lpm	r24, Z+
     b76:	93 ff       	sbrs	r25, 3
     b78:	81 91       	ld	r24, Z+
     b7a:	6f 01       	movw	r12, r30
     b7c:	85 32       	cpi	r24, 0x25	; 37
     b7e:	29 f4       	brne	.+10     	; 0xb8a <vfprintf+0x56>
     b80:	b7 01       	movw	r22, r14
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 82 07 	call	0xf04	; 0xf04 <fputc>
     b88:	e7 cf       	rjmp	.-50     	; 0xb58 <vfprintf+0x24>
     b8a:	51 2c       	mov	r5, r1
     b8c:	31 2c       	mov	r3, r1
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	20 32       	cpi	r18, 0x20	; 32
     b92:	a0 f4       	brcc	.+40     	; 0xbbc <vfprintf+0x88>
     b94:	8b 32       	cpi	r24, 0x2B	; 43
     b96:	69 f0       	breq	.+26     	; 0xbb2 <vfprintf+0x7e>
     b98:	30 f4       	brcc	.+12     	; 0xba6 <vfprintf+0x72>
     b9a:	80 32       	cpi	r24, 0x20	; 32
     b9c:	59 f0       	breq	.+22     	; 0xbb4 <vfprintf+0x80>
     b9e:	83 32       	cpi	r24, 0x23	; 35
     ba0:	69 f4       	brne	.+26     	; 0xbbc <vfprintf+0x88>
     ba2:	20 61       	ori	r18, 0x10	; 16
     ba4:	2c c0       	rjmp	.+88     	; 0xbfe <vfprintf+0xca>
     ba6:	8d 32       	cpi	r24, 0x2D	; 45
     ba8:	39 f0       	breq	.+14     	; 0xbb8 <vfprintf+0x84>
     baa:	80 33       	cpi	r24, 0x30	; 48
     bac:	39 f4       	brne	.+14     	; 0xbbc <vfprintf+0x88>
     bae:	21 60       	ori	r18, 0x01	; 1
     bb0:	26 c0       	rjmp	.+76     	; 0xbfe <vfprintf+0xca>
     bb2:	22 60       	ori	r18, 0x02	; 2
     bb4:	24 60       	ori	r18, 0x04	; 4
     bb6:	23 c0       	rjmp	.+70     	; 0xbfe <vfprintf+0xca>
     bb8:	28 60       	ori	r18, 0x08	; 8
     bba:	21 c0       	rjmp	.+66     	; 0xbfe <vfprintf+0xca>
     bbc:	27 fd       	sbrc	r18, 7
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <vfprintf+0xda>
     bc0:	30 ed       	ldi	r19, 0xD0	; 208
     bc2:	38 0f       	add	r19, r24
     bc4:	3a 30       	cpi	r19, 0x0A	; 10
     bc6:	78 f4       	brcc	.+30     	; 0xbe6 <vfprintf+0xb2>
     bc8:	26 ff       	sbrs	r18, 6
     bca:	06 c0       	rjmp	.+12     	; 0xbd8 <vfprintf+0xa4>
     bcc:	fa e0       	ldi	r31, 0x0A	; 10
     bce:	5f 9e       	mul	r5, r31
     bd0:	30 0d       	add	r19, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	53 2e       	mov	r5, r19
     bd6:	13 c0       	rjmp	.+38     	; 0xbfe <vfprintf+0xca>
     bd8:	8a e0       	ldi	r24, 0x0A	; 10
     bda:	38 9e       	mul	r3, r24
     bdc:	30 0d       	add	r19, r0
     bde:	11 24       	eor	r1, r1
     be0:	33 2e       	mov	r3, r19
     be2:	20 62       	ori	r18, 0x20	; 32
     be4:	0c c0       	rjmp	.+24     	; 0xbfe <vfprintf+0xca>
     be6:	8e 32       	cpi	r24, 0x2E	; 46
     be8:	21 f4       	brne	.+8      	; 0xbf2 <vfprintf+0xbe>
     bea:	26 fd       	sbrc	r18, 6
     bec:	6b c1       	rjmp	.+726    	; 0xec4 <vfprintf+0x390>
     bee:	20 64       	ori	r18, 0x40	; 64
     bf0:	06 c0       	rjmp	.+12     	; 0xbfe <vfprintf+0xca>
     bf2:	8c 36       	cpi	r24, 0x6C	; 108
     bf4:	11 f4       	brne	.+4      	; 0xbfa <vfprintf+0xc6>
     bf6:	20 68       	ori	r18, 0x80	; 128
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <vfprintf+0xca>
     bfa:	88 36       	cpi	r24, 0x68	; 104
     bfc:	41 f4       	brne	.+16     	; 0xc0e <vfprintf+0xda>
     bfe:	f6 01       	movw	r30, r12
     c00:	93 fd       	sbrc	r25, 3
     c02:	85 91       	lpm	r24, Z+
     c04:	93 ff       	sbrs	r25, 3
     c06:	81 91       	ld	r24, Z+
     c08:	6f 01       	movw	r12, r30
     c0a:	81 11       	cpse	r24, r1
     c0c:	c1 cf       	rjmp	.-126    	; 0xb90 <vfprintf+0x5c>
     c0e:	98 2f       	mov	r25, r24
     c10:	9f 7d       	andi	r25, 0xDF	; 223
     c12:	95 54       	subi	r25, 0x45	; 69
     c14:	93 30       	cpi	r25, 0x03	; 3
     c16:	28 f4       	brcc	.+10     	; 0xc22 <vfprintf+0xee>
     c18:	0c 5f       	subi	r16, 0xFC	; 252
     c1a:	1f 4f       	sbci	r17, 0xFF	; 255
     c1c:	ff e3       	ldi	r31, 0x3F	; 63
     c1e:	f9 83       	std	Y+1, r31	; 0x01
     c20:	0d c0       	rjmp	.+26     	; 0xc3c <vfprintf+0x108>
     c22:	83 36       	cpi	r24, 0x63	; 99
     c24:	31 f0       	breq	.+12     	; 0xc32 <vfprintf+0xfe>
     c26:	83 37       	cpi	r24, 0x73	; 115
     c28:	71 f0       	breq	.+28     	; 0xc46 <vfprintf+0x112>
     c2a:	83 35       	cpi	r24, 0x53	; 83
     c2c:	09 f0       	breq	.+2      	; 0xc30 <vfprintf+0xfc>
     c2e:	5b c0       	rjmp	.+182    	; 0xce6 <vfprintf+0x1b2>
     c30:	22 c0       	rjmp	.+68     	; 0xc76 <vfprintf+0x142>
     c32:	f8 01       	movw	r30, r16
     c34:	80 81       	ld	r24, Z
     c36:	89 83       	std	Y+1, r24	; 0x01
     c38:	0e 5f       	subi	r16, 0xFE	; 254
     c3a:	1f 4f       	sbci	r17, 0xFF	; 255
     c3c:	44 24       	eor	r4, r4
     c3e:	43 94       	inc	r4
     c40:	51 2c       	mov	r5, r1
     c42:	54 01       	movw	r10, r8
     c44:	15 c0       	rjmp	.+42     	; 0xc70 <vfprintf+0x13c>
     c46:	38 01       	movw	r6, r16
     c48:	f2 e0       	ldi	r31, 0x02	; 2
     c4a:	6f 0e       	add	r6, r31
     c4c:	71 1c       	adc	r7, r1
     c4e:	f8 01       	movw	r30, r16
     c50:	a0 80       	ld	r10, Z
     c52:	b1 80       	ldd	r11, Z+1	; 0x01
     c54:	26 ff       	sbrs	r18, 6
     c56:	03 c0       	rjmp	.+6      	; 0xc5e <vfprintf+0x12a>
     c58:	65 2d       	mov	r22, r5
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <vfprintf+0x12e>
     c5e:	6f ef       	ldi	r22, 0xFF	; 255
     c60:	7f ef       	ldi	r23, 0xFF	; 255
     c62:	c5 01       	movw	r24, r10
     c64:	2c 87       	std	Y+12, r18	; 0x0c
     c66:	0e 94 77 07 	call	0xeee	; 0xeee <strnlen>
     c6a:	2c 01       	movw	r4, r24
     c6c:	83 01       	movw	r16, r6
     c6e:	2c 85       	ldd	r18, Y+12	; 0x0c
     c70:	2f 77       	andi	r18, 0x7F	; 127
     c72:	22 2e       	mov	r2, r18
     c74:	17 c0       	rjmp	.+46     	; 0xca4 <vfprintf+0x170>
     c76:	38 01       	movw	r6, r16
     c78:	f2 e0       	ldi	r31, 0x02	; 2
     c7a:	6f 0e       	add	r6, r31
     c7c:	71 1c       	adc	r7, r1
     c7e:	f8 01       	movw	r30, r16
     c80:	a0 80       	ld	r10, Z
     c82:	b1 80       	ldd	r11, Z+1	; 0x01
     c84:	26 ff       	sbrs	r18, 6
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <vfprintf+0x15a>
     c88:	65 2d       	mov	r22, r5
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <vfprintf+0x15e>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	c5 01       	movw	r24, r10
     c94:	2c 87       	std	Y+12, r18	; 0x0c
     c96:	0e 94 6c 07 	call	0xed8	; 0xed8 <strnlen_P>
     c9a:	2c 01       	movw	r4, r24
     c9c:	2c 85       	ldd	r18, Y+12	; 0x0c
     c9e:	20 68       	ori	r18, 0x80	; 128
     ca0:	22 2e       	mov	r2, r18
     ca2:	83 01       	movw	r16, r6
     ca4:	23 fc       	sbrc	r2, 3
     ca6:	1b c0       	rjmp	.+54     	; 0xcde <vfprintf+0x1aa>
     ca8:	83 2d       	mov	r24, r3
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	48 16       	cp	r4, r24
     cae:	59 06       	cpc	r5, r25
     cb0:	b0 f4       	brcc	.+44     	; 0xcde <vfprintf+0x1aa>
     cb2:	b7 01       	movw	r22, r14
     cb4:	80 e2       	ldi	r24, 0x20	; 32
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 82 07 	call	0xf04	; 0xf04 <fputc>
     cbc:	3a 94       	dec	r3
     cbe:	f4 cf       	rjmp	.-24     	; 0xca8 <vfprintf+0x174>
     cc0:	f5 01       	movw	r30, r10
     cc2:	27 fc       	sbrc	r2, 7
     cc4:	85 91       	lpm	r24, Z+
     cc6:	27 fe       	sbrs	r2, 7
     cc8:	81 91       	ld	r24, Z+
     cca:	5f 01       	movw	r10, r30
     ccc:	b7 01       	movw	r22, r14
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 82 07 	call	0xf04	; 0xf04 <fputc>
     cd4:	31 10       	cpse	r3, r1
     cd6:	3a 94       	dec	r3
     cd8:	f1 e0       	ldi	r31, 0x01	; 1
     cda:	4f 1a       	sub	r4, r31
     cdc:	51 08       	sbc	r5, r1
     cde:	41 14       	cp	r4, r1
     ce0:	51 04       	cpc	r5, r1
     ce2:	71 f7       	brne	.-36     	; 0xcc0 <vfprintf+0x18c>
     ce4:	e5 c0       	rjmp	.+458    	; 0xeb0 <vfprintf+0x37c>
     ce6:	84 36       	cpi	r24, 0x64	; 100
     ce8:	11 f0       	breq	.+4      	; 0xcee <vfprintf+0x1ba>
     cea:	89 36       	cpi	r24, 0x69	; 105
     cec:	39 f5       	brne	.+78     	; 0xd3c <vfprintf+0x208>
     cee:	f8 01       	movw	r30, r16
     cf0:	27 ff       	sbrs	r18, 7
     cf2:	07 c0       	rjmp	.+14     	; 0xd02 <vfprintf+0x1ce>
     cf4:	60 81       	ld	r22, Z
     cf6:	71 81       	ldd	r23, Z+1	; 0x01
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	93 81       	ldd	r25, Z+3	; 0x03
     cfc:	0c 5f       	subi	r16, 0xFC	; 252
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	08 c0       	rjmp	.+16     	; 0xd12 <vfprintf+0x1de>
     d02:	60 81       	ld	r22, Z
     d04:	71 81       	ldd	r23, Z+1	; 0x01
     d06:	88 27       	eor	r24, r24
     d08:	77 fd       	sbrc	r23, 7
     d0a:	80 95       	com	r24
     d0c:	98 2f       	mov	r25, r24
     d0e:	0e 5f       	subi	r16, 0xFE	; 254
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
     d12:	2f 76       	andi	r18, 0x6F	; 111
     d14:	b2 2e       	mov	r11, r18
     d16:	97 ff       	sbrs	r25, 7
     d18:	09 c0       	rjmp	.+18     	; 0xd2c <vfprintf+0x1f8>
     d1a:	90 95       	com	r25
     d1c:	80 95       	com	r24
     d1e:	70 95       	com	r23
     d20:	61 95       	neg	r22
     d22:	7f 4f       	sbci	r23, 0xFF	; 255
     d24:	8f 4f       	sbci	r24, 0xFF	; 255
     d26:	9f 4f       	sbci	r25, 0xFF	; 255
     d28:	20 68       	ori	r18, 0x80	; 128
     d2a:	b2 2e       	mov	r11, r18
     d2c:	2a e0       	ldi	r18, 0x0A	; 10
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	a4 01       	movw	r20, r8
     d32:	0e 94 b4 07 	call	0xf68	; 0xf68 <__ultoa_invert>
     d36:	a8 2e       	mov	r10, r24
     d38:	a8 18       	sub	r10, r8
     d3a:	44 c0       	rjmp	.+136    	; 0xdc4 <vfprintf+0x290>
     d3c:	85 37       	cpi	r24, 0x75	; 117
     d3e:	29 f4       	brne	.+10     	; 0xd4a <vfprintf+0x216>
     d40:	2f 7e       	andi	r18, 0xEF	; 239
     d42:	b2 2e       	mov	r11, r18
     d44:	2a e0       	ldi	r18, 0x0A	; 10
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	25 c0       	rjmp	.+74     	; 0xd94 <vfprintf+0x260>
     d4a:	f2 2f       	mov	r31, r18
     d4c:	f9 7f       	andi	r31, 0xF9	; 249
     d4e:	bf 2e       	mov	r11, r31
     d50:	8f 36       	cpi	r24, 0x6F	; 111
     d52:	c1 f0       	breq	.+48     	; 0xd84 <vfprintf+0x250>
     d54:	18 f4       	brcc	.+6      	; 0xd5c <vfprintf+0x228>
     d56:	88 35       	cpi	r24, 0x58	; 88
     d58:	79 f0       	breq	.+30     	; 0xd78 <vfprintf+0x244>
     d5a:	b4 c0       	rjmp	.+360    	; 0xec4 <vfprintf+0x390>
     d5c:	80 37       	cpi	r24, 0x70	; 112
     d5e:	19 f0       	breq	.+6      	; 0xd66 <vfprintf+0x232>
     d60:	88 37       	cpi	r24, 0x78	; 120
     d62:	21 f0       	breq	.+8      	; 0xd6c <vfprintf+0x238>
     d64:	af c0       	rjmp	.+350    	; 0xec4 <vfprintf+0x390>
     d66:	2f 2f       	mov	r18, r31
     d68:	20 61       	ori	r18, 0x10	; 16
     d6a:	b2 2e       	mov	r11, r18
     d6c:	b4 fe       	sbrs	r11, 4
     d6e:	0d c0       	rjmp	.+26     	; 0xd8a <vfprintf+0x256>
     d70:	8b 2d       	mov	r24, r11
     d72:	84 60       	ori	r24, 0x04	; 4
     d74:	b8 2e       	mov	r11, r24
     d76:	09 c0       	rjmp	.+18     	; 0xd8a <vfprintf+0x256>
     d78:	24 ff       	sbrs	r18, 4
     d7a:	0a c0       	rjmp	.+20     	; 0xd90 <vfprintf+0x25c>
     d7c:	9f 2f       	mov	r25, r31
     d7e:	96 60       	ori	r25, 0x06	; 6
     d80:	b9 2e       	mov	r11, r25
     d82:	06 c0       	rjmp	.+12     	; 0xd90 <vfprintf+0x25c>
     d84:	28 e0       	ldi	r18, 0x08	; 8
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <vfprintf+0x260>
     d8a:	20 e1       	ldi	r18, 0x10	; 16
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <vfprintf+0x260>
     d90:	20 e1       	ldi	r18, 0x10	; 16
     d92:	32 e0       	ldi	r19, 0x02	; 2
     d94:	f8 01       	movw	r30, r16
     d96:	b7 fe       	sbrs	r11, 7
     d98:	07 c0       	rjmp	.+14     	; 0xda8 <vfprintf+0x274>
     d9a:	60 81       	ld	r22, Z
     d9c:	71 81       	ldd	r23, Z+1	; 0x01
     d9e:	82 81       	ldd	r24, Z+2	; 0x02
     da0:	93 81       	ldd	r25, Z+3	; 0x03
     da2:	0c 5f       	subi	r16, 0xFC	; 252
     da4:	1f 4f       	sbci	r17, 0xFF	; 255
     da6:	06 c0       	rjmp	.+12     	; 0xdb4 <vfprintf+0x280>
     da8:	60 81       	ld	r22, Z
     daa:	71 81       	ldd	r23, Z+1	; 0x01
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 5f       	subi	r16, 0xFE	; 254
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
     db4:	a4 01       	movw	r20, r8
     db6:	0e 94 b4 07 	call	0xf68	; 0xf68 <__ultoa_invert>
     dba:	a8 2e       	mov	r10, r24
     dbc:	a8 18       	sub	r10, r8
     dbe:	fb 2d       	mov	r31, r11
     dc0:	ff 77       	andi	r31, 0x7F	; 127
     dc2:	bf 2e       	mov	r11, r31
     dc4:	b6 fe       	sbrs	r11, 6
     dc6:	0b c0       	rjmp	.+22     	; 0xdde <vfprintf+0x2aa>
     dc8:	2b 2d       	mov	r18, r11
     dca:	2e 7f       	andi	r18, 0xFE	; 254
     dcc:	a5 14       	cp	r10, r5
     dce:	50 f4       	brcc	.+20     	; 0xde4 <vfprintf+0x2b0>
     dd0:	b4 fe       	sbrs	r11, 4
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <vfprintf+0x2b4>
     dd4:	b2 fc       	sbrc	r11, 2
     dd6:	08 c0       	rjmp	.+16     	; 0xde8 <vfprintf+0x2b4>
     dd8:	2b 2d       	mov	r18, r11
     dda:	2e 7e       	andi	r18, 0xEE	; 238
     ddc:	05 c0       	rjmp	.+10     	; 0xde8 <vfprintf+0x2b4>
     dde:	7a 2c       	mov	r7, r10
     de0:	2b 2d       	mov	r18, r11
     de2:	03 c0       	rjmp	.+6      	; 0xdea <vfprintf+0x2b6>
     de4:	7a 2c       	mov	r7, r10
     de6:	01 c0       	rjmp	.+2      	; 0xdea <vfprintf+0x2b6>
     de8:	75 2c       	mov	r7, r5
     dea:	24 ff       	sbrs	r18, 4
     dec:	0d c0       	rjmp	.+26     	; 0xe08 <vfprintf+0x2d4>
     dee:	fe 01       	movw	r30, r28
     df0:	ea 0d       	add	r30, r10
     df2:	f1 1d       	adc	r31, r1
     df4:	80 81       	ld	r24, Z
     df6:	80 33       	cpi	r24, 0x30	; 48
     df8:	11 f4       	brne	.+4      	; 0xdfe <vfprintf+0x2ca>
     dfa:	29 7e       	andi	r18, 0xE9	; 233
     dfc:	09 c0       	rjmp	.+18     	; 0xe10 <vfprintf+0x2dc>
     dfe:	22 ff       	sbrs	r18, 2
     e00:	06 c0       	rjmp	.+12     	; 0xe0e <vfprintf+0x2da>
     e02:	73 94       	inc	r7
     e04:	73 94       	inc	r7
     e06:	04 c0       	rjmp	.+8      	; 0xe10 <vfprintf+0x2dc>
     e08:	82 2f       	mov	r24, r18
     e0a:	86 78       	andi	r24, 0x86	; 134
     e0c:	09 f0       	breq	.+2      	; 0xe10 <vfprintf+0x2dc>
     e0e:	73 94       	inc	r7
     e10:	23 fd       	sbrc	r18, 3
     e12:	13 c0       	rjmp	.+38     	; 0xe3a <vfprintf+0x306>
     e14:	20 ff       	sbrs	r18, 0
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <vfprintf+0x2f0>
     e18:	5a 2c       	mov	r5, r10
     e1a:	73 14       	cp	r7, r3
     e1c:	18 f4       	brcc	.+6      	; 0xe24 <vfprintf+0x2f0>
     e1e:	53 0c       	add	r5, r3
     e20:	57 18       	sub	r5, r7
     e22:	73 2c       	mov	r7, r3
     e24:	73 14       	cp	r7, r3
     e26:	68 f4       	brcc	.+26     	; 0xe42 <vfprintf+0x30e>
     e28:	b7 01       	movw	r22, r14
     e2a:	80 e2       	ldi	r24, 0x20	; 32
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	2c 87       	std	Y+12, r18	; 0x0c
     e30:	0e 94 82 07 	call	0xf04	; 0xf04 <fputc>
     e34:	73 94       	inc	r7
     e36:	2c 85       	ldd	r18, Y+12	; 0x0c
     e38:	f5 cf       	rjmp	.-22     	; 0xe24 <vfprintf+0x2f0>
     e3a:	73 14       	cp	r7, r3
     e3c:	10 f4       	brcc	.+4      	; 0xe42 <vfprintf+0x30e>
     e3e:	37 18       	sub	r3, r7
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <vfprintf+0x310>
     e42:	31 2c       	mov	r3, r1
     e44:	24 ff       	sbrs	r18, 4
     e46:	12 c0       	rjmp	.+36     	; 0xe6c <vfprintf+0x338>
     e48:	b7 01       	movw	r22, r14
     e4a:	80 e3       	ldi	r24, 0x30	; 48
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	2c 87       	std	Y+12, r18	; 0x0c
     e50:	0e 94 82 07 	call	0xf04	; 0xf04 <fputc>
     e54:	2c 85       	ldd	r18, Y+12	; 0x0c
     e56:	22 ff       	sbrs	r18, 2
     e58:	17 c0       	rjmp	.+46     	; 0xe88 <vfprintf+0x354>
     e5a:	21 ff       	sbrs	r18, 1
     e5c:	03 c0       	rjmp	.+6      	; 0xe64 <vfprintf+0x330>
     e5e:	88 e5       	ldi	r24, 0x58	; 88
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <vfprintf+0x334>
     e64:	88 e7       	ldi	r24, 0x78	; 120
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	b7 01       	movw	r22, r14
     e6a:	0c c0       	rjmp	.+24     	; 0xe84 <vfprintf+0x350>
     e6c:	82 2f       	mov	r24, r18
     e6e:	86 78       	andi	r24, 0x86	; 134
     e70:	59 f0       	breq	.+22     	; 0xe88 <vfprintf+0x354>
     e72:	21 fd       	sbrc	r18, 1
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0x346>
     e76:	80 e2       	ldi	r24, 0x20	; 32
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <vfprintf+0x348>
     e7a:	8b e2       	ldi	r24, 0x2B	; 43
     e7c:	27 fd       	sbrc	r18, 7
     e7e:	8d e2       	ldi	r24, 0x2D	; 45
     e80:	b7 01       	movw	r22, r14
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 82 07 	call	0xf04	; 0xf04 <fputc>
     e88:	a5 14       	cp	r10, r5
     e8a:	38 f4       	brcc	.+14     	; 0xe9a <vfprintf+0x366>
     e8c:	b7 01       	movw	r22, r14
     e8e:	80 e3       	ldi	r24, 0x30	; 48
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 82 07 	call	0xf04	; 0xf04 <fputc>
     e96:	5a 94       	dec	r5
     e98:	f7 cf       	rjmp	.-18     	; 0xe88 <vfprintf+0x354>
     e9a:	aa 94       	dec	r10
     e9c:	f4 01       	movw	r30, r8
     e9e:	ea 0d       	add	r30, r10
     ea0:	f1 1d       	adc	r31, r1
     ea2:	80 81       	ld	r24, Z
     ea4:	b7 01       	movw	r22, r14
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 82 07 	call	0xf04	; 0xf04 <fputc>
     eac:	a1 10       	cpse	r10, r1
     eae:	f5 cf       	rjmp	.-22     	; 0xe9a <vfprintf+0x366>
     eb0:	33 20       	and	r3, r3
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <vfprintf+0x382>
     eb4:	51 ce       	rjmp	.-862    	; 0xb58 <vfprintf+0x24>
     eb6:	b7 01       	movw	r22, r14
     eb8:	80 e2       	ldi	r24, 0x20	; 32
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 82 07 	call	0xf04	; 0xf04 <fputc>
     ec0:	3a 94       	dec	r3
     ec2:	f6 cf       	rjmp	.-20     	; 0xeb0 <vfprintf+0x37c>
     ec4:	f7 01       	movw	r30, r14
     ec6:	86 81       	ldd	r24, Z+6	; 0x06
     ec8:	97 81       	ldd	r25, Z+7	; 0x07
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <vfprintf+0x39c>
     ecc:	8f ef       	ldi	r24, 0xFF	; 255
     ece:	9f ef       	ldi	r25, 0xFF	; 255
     ed0:	2c 96       	adiw	r28, 0x0c	; 12
     ed2:	e2 e1       	ldi	r30, 0x12	; 18
     ed4:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__epilogue_restores__>

00000ed8 <strnlen_P>:
     ed8:	fc 01       	movw	r30, r24
     eda:	05 90       	lpm	r0, Z+
     edc:	61 50       	subi	r22, 0x01	; 1
     ede:	70 40       	sbci	r23, 0x00	; 0
     ee0:	01 10       	cpse	r0, r1
     ee2:	d8 f7       	brcc	.-10     	; 0xeda <strnlen_P+0x2>
     ee4:	80 95       	com	r24
     ee6:	90 95       	com	r25
     ee8:	8e 0f       	add	r24, r30
     eea:	9f 1f       	adc	r25, r31
     eec:	08 95       	ret

00000eee <strnlen>:
     eee:	fc 01       	movw	r30, r24
     ef0:	61 50       	subi	r22, 0x01	; 1
     ef2:	70 40       	sbci	r23, 0x00	; 0
     ef4:	01 90       	ld	r0, Z+
     ef6:	01 10       	cpse	r0, r1
     ef8:	d8 f7       	brcc	.-10     	; 0xef0 <strnlen+0x2>
     efa:	80 95       	com	r24
     efc:	90 95       	com	r25
     efe:	8e 0f       	add	r24, r30
     f00:	9f 1f       	adc	r25, r31
     f02:	08 95       	ret

00000f04 <fputc>:
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	18 2f       	mov	r17, r24
     f0e:	09 2f       	mov	r16, r25
     f10:	eb 01       	movw	r28, r22
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	81 fd       	sbrc	r24, 1
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <fputc+0x1a>
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	9f ef       	ldi	r25, 0xFF	; 255
     f1c:	20 c0       	rjmp	.+64     	; 0xf5e <fputc+0x5a>
     f1e:	82 ff       	sbrs	r24, 2
     f20:	10 c0       	rjmp	.+32     	; 0xf42 <fputc+0x3e>
     f22:	4e 81       	ldd	r20, Y+6	; 0x06
     f24:	5f 81       	ldd	r21, Y+7	; 0x07
     f26:	2c 81       	ldd	r18, Y+4	; 0x04
     f28:	3d 81       	ldd	r19, Y+5	; 0x05
     f2a:	42 17       	cp	r20, r18
     f2c:	53 07       	cpc	r21, r19
     f2e:	7c f4       	brge	.+30     	; 0xf4e <fputc+0x4a>
     f30:	e8 81       	ld	r30, Y
     f32:	f9 81       	ldd	r31, Y+1	; 0x01
     f34:	9f 01       	movw	r18, r30
     f36:	2f 5f       	subi	r18, 0xFF	; 255
     f38:	3f 4f       	sbci	r19, 0xFF	; 255
     f3a:	39 83       	std	Y+1, r19	; 0x01
     f3c:	28 83       	st	Y, r18
     f3e:	10 83       	st	Z, r17
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <fputc+0x4a>
     f42:	e8 85       	ldd	r30, Y+8	; 0x08
     f44:	f9 85       	ldd	r31, Y+9	; 0x09
     f46:	81 2f       	mov	r24, r17
     f48:	09 95       	icall
     f4a:	89 2b       	or	r24, r25
     f4c:	29 f7       	brne	.-54     	; 0xf18 <fputc+0x14>
     f4e:	2e 81       	ldd	r18, Y+6	; 0x06
     f50:	3f 81       	ldd	r19, Y+7	; 0x07
     f52:	2f 5f       	subi	r18, 0xFF	; 255
     f54:	3f 4f       	sbci	r19, 0xFF	; 255
     f56:	3f 83       	std	Y+7, r19	; 0x07
     f58:	2e 83       	std	Y+6, r18	; 0x06
     f5a:	81 2f       	mov	r24, r17
     f5c:	90 2f       	mov	r25, r16
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	08 95       	ret

00000f68 <__ultoa_invert>:
     f68:	fa 01       	movw	r30, r20
     f6a:	aa 27       	eor	r26, r26
     f6c:	28 30       	cpi	r18, 0x08	; 8
     f6e:	51 f1       	breq	.+84     	; 0xfc4 <__ultoa_invert+0x5c>
     f70:	20 31       	cpi	r18, 0x10	; 16
     f72:	81 f1       	breq	.+96     	; 0xfd4 <__ultoa_invert+0x6c>
     f74:	e8 94       	clt
     f76:	6f 93       	push	r22
     f78:	6e 7f       	andi	r22, 0xFE	; 254
     f7a:	6e 5f       	subi	r22, 0xFE	; 254
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8f 4f       	sbci	r24, 0xFF	; 255
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	af 4f       	sbci	r26, 0xFF	; 255
     f84:	b1 e0       	ldi	r27, 0x01	; 1
     f86:	3e d0       	rcall	.+124    	; 0x1004 <__ultoa_invert+0x9c>
     f88:	b4 e0       	ldi	r27, 0x04	; 4
     f8a:	3c d0       	rcall	.+120    	; 0x1004 <__ultoa_invert+0x9c>
     f8c:	67 0f       	add	r22, r23
     f8e:	78 1f       	adc	r23, r24
     f90:	89 1f       	adc	r24, r25
     f92:	9a 1f       	adc	r25, r26
     f94:	a1 1d       	adc	r26, r1
     f96:	68 0f       	add	r22, r24
     f98:	79 1f       	adc	r23, r25
     f9a:	8a 1f       	adc	r24, r26
     f9c:	91 1d       	adc	r25, r1
     f9e:	a1 1d       	adc	r26, r1
     fa0:	6a 0f       	add	r22, r26
     fa2:	71 1d       	adc	r23, r1
     fa4:	81 1d       	adc	r24, r1
     fa6:	91 1d       	adc	r25, r1
     fa8:	a1 1d       	adc	r26, r1
     faa:	20 d0       	rcall	.+64     	; 0xfec <__ultoa_invert+0x84>
     fac:	09 f4       	brne	.+2      	; 0xfb0 <__ultoa_invert+0x48>
     fae:	68 94       	set
     fb0:	3f 91       	pop	r19
     fb2:	2a e0       	ldi	r18, 0x0A	; 10
     fb4:	26 9f       	mul	r18, r22
     fb6:	11 24       	eor	r1, r1
     fb8:	30 19       	sub	r19, r0
     fba:	30 5d       	subi	r19, 0xD0	; 208
     fbc:	31 93       	st	Z+, r19
     fbe:	de f6       	brtc	.-74     	; 0xf76 <__ultoa_invert+0xe>
     fc0:	cf 01       	movw	r24, r30
     fc2:	08 95       	ret
     fc4:	46 2f       	mov	r20, r22
     fc6:	47 70       	andi	r20, 0x07	; 7
     fc8:	40 5d       	subi	r20, 0xD0	; 208
     fca:	41 93       	st	Z+, r20
     fcc:	b3 e0       	ldi	r27, 0x03	; 3
     fce:	0f d0       	rcall	.+30     	; 0xfee <__ultoa_invert+0x86>
     fd0:	c9 f7       	brne	.-14     	; 0xfc4 <__ultoa_invert+0x5c>
     fd2:	f6 cf       	rjmp	.-20     	; 0xfc0 <__ultoa_invert+0x58>
     fd4:	46 2f       	mov	r20, r22
     fd6:	4f 70       	andi	r20, 0x0F	; 15
     fd8:	40 5d       	subi	r20, 0xD0	; 208
     fda:	4a 33       	cpi	r20, 0x3A	; 58
     fdc:	18 f0       	brcs	.+6      	; 0xfe4 <__ultoa_invert+0x7c>
     fde:	49 5d       	subi	r20, 0xD9	; 217
     fe0:	31 fd       	sbrc	r19, 1
     fe2:	40 52       	subi	r20, 0x20	; 32
     fe4:	41 93       	st	Z+, r20
     fe6:	02 d0       	rcall	.+4      	; 0xfec <__ultoa_invert+0x84>
     fe8:	a9 f7       	brne	.-22     	; 0xfd4 <__ultoa_invert+0x6c>
     fea:	ea cf       	rjmp	.-44     	; 0xfc0 <__ultoa_invert+0x58>
     fec:	b4 e0       	ldi	r27, 0x04	; 4
     fee:	a6 95       	lsr	r26
     ff0:	97 95       	ror	r25
     ff2:	87 95       	ror	r24
     ff4:	77 95       	ror	r23
     ff6:	67 95       	ror	r22
     ff8:	ba 95       	dec	r27
     ffa:	c9 f7       	brne	.-14     	; 0xfee <__ultoa_invert+0x86>
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	61 05       	cpc	r22, r1
    1000:	71 05       	cpc	r23, r1
    1002:	08 95       	ret
    1004:	9b 01       	movw	r18, r22
    1006:	ac 01       	movw	r20, r24
    1008:	0a 2e       	mov	r0, r26
    100a:	06 94       	lsr	r0
    100c:	57 95       	ror	r21
    100e:	47 95       	ror	r20
    1010:	37 95       	ror	r19
    1012:	27 95       	ror	r18
    1014:	ba 95       	dec	r27
    1016:	c9 f7       	brne	.-14     	; 0x100a <__ultoa_invert+0xa2>
    1018:	62 0f       	add	r22, r18
    101a:	73 1f       	adc	r23, r19
    101c:	84 1f       	adc	r24, r20
    101e:	95 1f       	adc	r25, r21
    1020:	a0 1d       	adc	r26, r0
    1022:	08 95       	ret

00001024 <__prologue_saves__>:
    1024:	2f 92       	push	r2
    1026:	3f 92       	push	r3
    1028:	4f 92       	push	r4
    102a:	5f 92       	push	r5
    102c:	6f 92       	push	r6
    102e:	7f 92       	push	r7
    1030:	8f 92       	push	r8
    1032:	9f 92       	push	r9
    1034:	af 92       	push	r10
    1036:	bf 92       	push	r11
    1038:	cf 92       	push	r12
    103a:	df 92       	push	r13
    103c:	ef 92       	push	r14
    103e:	ff 92       	push	r15
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	ca 1b       	sub	r28, r26
    104e:	db 0b       	sbc	r29, r27
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	09 94       	ijmp

0000105c <__epilogue_restores__>:
    105c:	2a 88       	ldd	r2, Y+18	; 0x12
    105e:	39 88       	ldd	r3, Y+17	; 0x11
    1060:	48 88       	ldd	r4, Y+16	; 0x10
    1062:	5f 84       	ldd	r5, Y+15	; 0x0f
    1064:	6e 84       	ldd	r6, Y+14	; 0x0e
    1066:	7d 84       	ldd	r7, Y+13	; 0x0d
    1068:	8c 84       	ldd	r8, Y+12	; 0x0c
    106a:	9b 84       	ldd	r9, Y+11	; 0x0b
    106c:	aa 84       	ldd	r10, Y+10	; 0x0a
    106e:	b9 84       	ldd	r11, Y+9	; 0x09
    1070:	c8 84       	ldd	r12, Y+8	; 0x08
    1072:	df 80       	ldd	r13, Y+7	; 0x07
    1074:	ee 80       	ldd	r14, Y+6	; 0x06
    1076:	fd 80       	ldd	r15, Y+5	; 0x05
    1078:	0c 81       	ldd	r16, Y+4	; 0x04
    107a:	1b 81       	ldd	r17, Y+3	; 0x03
    107c:	aa 81       	ldd	r26, Y+2	; 0x02
    107e:	b9 81       	ldd	r27, Y+1	; 0x01
    1080:	ce 0f       	add	r28, r30
    1082:	d1 1d       	adc	r29, r1
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	ed 01       	movw	r28, r26
    1090:	08 95       	ret

00001092 <_exit>:
    1092:	f8 94       	cli

00001094 <__stop_program>:
    1094:	ff cf       	rjmp	.-2      	; 0x1094 <__stop_program>
